@page "/"

@using Facilitate.Libraries.Models;
@using MongoDB.Bson;

@using System.Text.Json;

@attribute [StreamRendering(true)]
@rendermode InteractiveServer

@inject NavigationManager NavigationManager

@using Json.Net;
@using JsonConverter = System.Text.Json.Serialization.JsonConverter;
@using System.Net.Http;
@using Newtonsoft.Json;
@using System.Threading.Tasks;
@using System.Collections.Generic;
@using System.Web;

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

@* if(@quoteList != null)
{ *@
    <p>@quoteList.Count</p>
@* } *@
    
@code
{
    public List<Quote> quoteList = new List<Quote>();

    public string apiResponse;
    //public string apiUrl = "http://localhost:8080/api/Quote?status=new";
    public string apiUrl = "https://api.facilitate.org/api/Quote?status=new";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var newQuote = CreateLead();

            var tmpVal = await GetQuoteList("new");

            var tmpVal2 = quoteList;
        }
        catch (Exception ex)
        {
            //logger.LogError(ex, "Error occurred calling the GitHub API.");
        }
    }

    public string PostQuote()
    {
        try
        {
            var _quote = CreateLead();

            using (var httpClient = new HttpClient())
            {
                httpClient.DefaultRequestHeaders.Add("RequestType", "GetQuotes");

                // using (HttpResponseMessage response = await httpClient.GetAsync(apiUrl))
                // {
                //     if (response.IsSuccessStatusCode)
                //     {
                //         string apiResponse = await response.Content.ReadAsStringAsync();

                //         quoteList = JsonConvert.DeserializeObject<List<Quote>>(apiResponse);

                //         return quoteList;
                //     }

                // }

                apiResponse = "success";
            }
        }
        catch (Exception ex)
        {
            var tmpVal = ex.Message;
        }

        return apiResponse;
    }

    private QuoteRoofleSubmission CreateLead()
    {
        List<String> nameGenders = new List<string>();
        nameGenders.Add("male");
        nameGenders.Add("female");

        QuoteRoofleSubmission quote = new QuoteRoofleSubmission();
        // quote.status = "New";

        // quote.ipAddress = "127.0.0.1";

        Utils utils = new Utils();

        var randomStreetNumber = utils.GetRandomStreetNumber();
        var randomStreetName = utils.GetRandomStreetName();

        var randomState = utils.GetRandomState();
        var stateName = randomState[0];
        var stateAbbr = randomState[1];
        var stateId = randomState[2];

        var randomCity = utils.GetRandomCity(MongoDB.Bson.ObjectId.Parse(stateId));

        string cityId = randomCity[0];
        string cityName = randomCity[1];
        string cityCountyId = randomCity[2];
        string cityTimeZoneId = randomCity[3];

        var randomZipCode = utils.GetRandomZipCode(MongoDB.Bson.ObjectId.Parse(cityId)).ToString();

        quote.address = randomStreetNumber + " " + randomStreetName + ", " + cityName + ", " + stateAbbr + " " + randomZipCode;
        quote.fullAddress = quote.address;
        quote.street = randomStreetNumber + " " + randomStreetName;
        quote.city = cityName;
        quote.state = stateAbbr;
        quote.zip = randomZipCode;

        Random rnd = new Random();
        int randomInt = rnd.Next(0, 1);

        quote.firstName = utils.GetRandomFirstName(nameGenders[randomInt]);
        quote.lastName = utils.GetRandomLastName();

        quote.email = quote.firstName.ToLower() + "@" + quote.lastName.ToLower() + ".com";
        quote.phone = "(" + utils.GetRandomAreaCode() + ") " + utils.GetRandomHomePhoneNumber();
        quote.market = quote.city + ", " + quote.state;
        quote.externalUrl = "https://app.roofle.com/dashboard";
        quote.sessionId = "nH9YvHwoBldl2ZkpQSWrX";

        randomInt = rnd.Next(0, 1);
        var repName = utils.GetRandomFirstName(nameGenders[randomInt]) + " " + utils.GetRandomLastName();

        quote.repLead = repName;
        quote.repEmail = repName.Replace(" ", ".").ToLower() + "@facilitate.org";

        randomInt = rnd.Next(5000, 9999);
        quote.leadId = randomInt;

        // Add Structure Info
        int totalSquareFeet = 0;
        int mainRoofTotalSquareFeet = randomInt;

        randomInt = rnd.Next(1, 3);

        quote.numberOfStructures = randomInt;
        quote.numberOfIncludedStructures = quote.numberOfStructures;

        quote.structures = null;
        quote.structures = new List<Structure>();
        for (var i = 0; i < quote.numberOfStructures; i++)
        {
            Structure structure = new Structure();
            switch (i)
            {
                case 1:
                    structure.initialSquareFeet = rnd.Next(1000, 5000);
                    structure.isIncluded = true;
                    structure.name = "Main Roof";
                    structure.roofComplexity = "Complex";
                    structure.slope = "steep";
                    break;
                case 2:
                    structure.initialSquareFeet = rnd.Next(500, 1000);
                    structure.isIncluded = true;
                    structure.name = "Garage Roof";
                    structure.roofComplexity = "Simple";
                    structure.slope = "medium";
                    break;
                default:
                    structure.initialSquareFeet = rnd.Next(250, 1000);
                    structure.isIncluded = false;
                    structure.name = "Misc Roof";
                    structure.roofComplexity = "Compound";
                    structure.slope = "shallow";
                    break;
            }

            structure.squareFeet = structure.initialSquareFeet;

            totalSquareFeet += structure.initialSquareFeet;

            quote.structures.Add(structure);
        }

        quote.totalSquareFeet = totalSquareFeet;
        quote.totalInitialSquareFeet = quote.totalSquareFeet;

        quote.mainRoofTotalSquareFeet = totalSquareFeet;

        quote.products = null;
        quote.products = new List<Product>();

        // Add Product Info
        var productIndex = 0;
        double quoteTotal = 0;

        foreach (Structure structure in quote.structures)
        {
            productIndex++;

            Product product = new Product();
            product.name = "Certainteed Landmark (" + productIndex + ")";
            product.id = 1;

            PriceInfo _priceInfo = new PriceInfo();
            _priceInfo.priceType = "BasicFinancing";

            randomInt = rnd.Next(550, 675);
            _priceInfo.pricePerSquare = randomInt;

            randomInt = rnd.Next(250, 400);
            _priceInfo.monthly = randomInt;

            randomInt = rnd.Next(8, 26);
            _priceInfo.apr = randomInt;

            randomInt = rnd.Next(120, 360);
            _priceInfo.months = randomInt;

            product.priceInfo = _priceInfo;

            PriceRange _priceRange = new PriceRange();
            randomInt = rnd.Next(1150, 5200);
            _priceRange.totalMin = randomInt;

            randomInt = rnd.Next(16575, 16575);
            _priceRange.totalMax = randomInt;

            randomInt = rnd.Next(200, 300);
            _priceRange.monthlyMin = randomInt;

            randomInt = rnd.Next(350, 400);
            _priceRange.monthlyMax = randomInt;

            product.priceRange = _priceRange;

            product.wasteFactorMainRoof = 1.2;

            _priceInfo.total = (_priceInfo.pricePerSquare * quote.totalSquareFeet) / 100;

            if (quoteTotal < _priceInfo.total)
                quoteTotal = _priceInfo.total;

            quote.products.Add(product);
        }

        // quote.totalQuote = quoteTotal;

        // var deviceType = "Desktop";
        // var latitude = 0;
        // var longitude = 0;

        // Event _event = new Event();
        // _event.Name = "New Quote";
        // _event.DateTime = DateTime.UtcNow;
        // _event.Details = "New quote referred by Roofle";

        //quote.events.Add(_event);

        return quote;
    }

    public async Task<List<Quote>> GetQuoteList(string _status)
    {
        try
        {
            using (var httpClient = new HttpClient())
            {
                httpClient.DefaultRequestHeaders.Add("RequestType", "GetQuotes");

                using (HttpResponseMessage response = await httpClient.GetAsync(apiUrl))
                {
                    if (response.IsSuccessStatusCode)
                    {
                        string apiResponse = await response.Content.ReadAsStringAsync();

                        quoteList = JsonConvert.DeserializeObject<List<Quote>>(apiResponse);

                        return quoteList;
                    }

                }
            }
        }
        catch (Exception ex)
        {
            var tmpVal = ex.Message;
        }
        return quoteList;
    }
}
