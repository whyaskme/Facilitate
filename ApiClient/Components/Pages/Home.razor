@page "/"

@using Facilitate.Libraries.Models;
@using MongoDB.Bson;

@using System.Text.Json;

@attribute [StreamRendering(true)]
@rendermode InteractiveServer

@inject NavigationManager NavigationManager

@using Json.Net;
@using JsonConverter = System.Text.Json.Serialization.JsonConverter;
@using System.Net.Http;
@using Newtonsoft.Json;
@using System.Threading.Tasks;
@using System.Collections.Generic;
@using System.Web;

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

@code
{
    //public List<Quote> quotes = new List<Quote>();
    public List<Quote> quoteList = new List<Quote>();

    public string apiResponse;

    public Home()
    {
        GetQuoteList("customer");

        var tmpVal = quoteList;
    }

    public List<Quote> GetQuoteListNew(string _status)
    {
        //var apiUrl = "http://localhost:8080/api/quote?status=" + _status;
        var apiUrl = "https://api.facilitate.org/api/quote?status=" + _status;

        try
        {
            var httpClient = new HttpClient()
            {
                BaseAddress = new Uri(apiUrl)
            };

            httpClient.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
            var quotes = httpClient.GetFromJsonAsync<List<Quote>>(apiUrl);

            var tmpVal = "";

            // using (var httpClient = new HttpClient())
            // {
            //     using (HttpResponseMessage response = await httpClient.GetAsync(apiUrl))
            //     {
            //         apiResponse = await response.Content.ReadAsStringAsync();
            //         //quoteList = JsonConvert.DeserializeObject<List<Quote>>(apiResponse);

            //         quoteList = JsonConvert.DeserializeObject<List<Quote>>(apiResponse);

            //         foreach (Quote quote in quoteList)
            //         {
            //             var QuoteId = quote._id;
            //         }

            //         var tmpVal = "";
            //     }
            // }
        }
        catch (Exception ex)
        {
            var tmpVal = ex.Message;
        }
        return quoteList;
    }

    public async Task<List<Quote>> GetQuoteList(string _status)
    {
        //var apiUrl = "http://localhost:8080/api/quote?status=" + _status;
        var apiUrl = "https://api.facilitate.org/api/quote?status=" + _status;

        try
        {
            using (var httpClient = new HttpClient())
            {
                using (HttpResponseMessage response = await httpClient.GetAsync(apiUrl))
                {
                    apiResponse = await response.Content.ReadAsStringAsync();
                    //quoteList = JsonConvert.DeserializeObject<List<Quote>>(apiResponse);

                    List<Quote> quotes = await httpClient.GetFromJsonAsync<List<Quote>>(apiUrl);

                    foreach (var quote in quotes)
                    {
                        var QuoteId = "";
                    }

                    var tmpVal = "";
                }
            }
        }
        catch (Exception ex)
        {
            var tmpVal = ex.Message;
        }
        return quoteList;
    }
}
