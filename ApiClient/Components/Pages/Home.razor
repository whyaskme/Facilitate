@page "/"

@using Facilitate.Libraries.Models;
@using MongoDB.Bson;

@using System.Text.Json;

@attribute [StreamRendering(true)]
@rendermode InteractiveServer

@inject NavigationManager NavigationManager

@using Json.Net;
@using JsonConverter = System.Text.Json.Serialization.JsonConverter;
@using System.Net.Http;
@using Newtonsoft.Json;
@using System.Threading.Tasks;
@using System.Collections.Generic;
@using System.Web;

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.


    <p>@quoteList.Count</p>


@code
{
    public List<Quote> quoteList = new List<Quote>();

    public string apiResponse;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var tmpVal = await GetQuoteList("new");

            var tmpVal2 = quoteList;
        }
        catch (Exception ex)
        {
            //logger.LogError(ex, "Error occurred calling the GitHub API.");
        }
    }

    public async Task<List<Quote>> GetQuoteList(string _status)
    {
        var apiUrl = "http://localhost:8080/api/Quote?status=" + _status;

        //apiUrl = "https://localhost:7235/api/Quote?status=" + _status;
        apiUrl = "https://api.facilitate.org/api/Quote?status=" + _status;

        try
        {
            using (var httpClient = new HttpClient())
            {
                httpClient.DefaultRequestHeaders.Add("Key", "Value");

                using (HttpResponseMessage response = await httpClient.GetAsync(apiUrl))
                {
                    if (response.IsSuccessStatusCode)
                    {
                        string apiResponse = await response.Content.ReadAsStringAsync();

                        quoteList = JsonConvert.DeserializeObject<List<Quote>>(apiResponse);

                        return quoteList;
                    }

                }
            }
        }
        catch (Exception ex)
        {
            var tmpVal = ex.Message;
        }
        return quoteList;
    }
}
