@page "/archives"

@using AdminBlazor.Data
@using Facilitate.Libraries.Models;

@attribute [StreamRendering(true)]
@rendermode InteractiveServer
@inject QuoteService QuoteService

<PageTitle>Archives</PageTitle>
<h1>@updateStatus Archives <span id="update-status" class="@StatusClass">@RefreshStatus</span></h1>

@if (quotes == null)
{
    <p><em>Loading...</em></p>
}
else
{
            <div>
                Click column headers to sort. Type and hit enter in any empty cell to search that column.
                <br/><br/>
            </div>

            <DxGrid 
                Data="@quotes" 
                PageSize="10" 
                PagerPosition="GridPagerPosition.Bottom" 
                ShowGroupPanel="true"
                AutoExpandAllGroupRows="true"
                ShowFilterRow="true"
                CssClass="mw-1100"

                TextWrapEnabled="false"
                PagerNavigationMode="PagerNavigationMode.InputBox"
                PageSizeSelectorVisible="true"
                PageSizeSelectorAllRowsItemVisible="true"
                KeyboardNavigationEnabled="true">
                <Columns>
                    <DxGridDataColumn Caption="Date" FieldName="timestamp" DisplayFormat="D" SortIndex="0" SortOrder="GridColumnSortOrder.Descending" AllowSort="true" />
                    <DxGridDataColumn Caption="First" FieldName="firstName" />
                    <DxGridDataColumn Caption="Last" FieldName="lastName" />
                    <DxGridDataColumn Caption="Email" FieldName="email" />
                    <DxGridDataColumn Caption="Phone" FieldName="phone" />
                    <DxGridDataColumn Caption="Street" FieldName="street" />
                    <DxGridDataColumn Caption="City" FieldName="city" />
                    <DxGridDataColumn Caption="State" FieldName="state" />
                    <DxGridDataColumn Caption="Zip" FieldName="zip" />
                </Columns>
            </DxGrid>
}

<div class="@StatusContainerClass">
    <button class="@ButtonClass" @onclick="ToggleRefresh">@ButtonText</button>
    <button class="btn btn-primary" disabled="@CreateLeadDisabled" @onclick="CreateLead">Create 1 Archive</button>
    <button class="btn btn-primary" disabled="@CreateLeadsDisabled" @onclick="CreateLeads">Create @itemsToCreate Archives</button>
    <button class="btn btn-primary" disabled="@DeleteLeadsDisabled" @onclick="DeleteLeads">Delete @updateStatus Archives</button>
</div>

@code {

    [Parameter]
    public string RefreshStatus { get; set; } = "";

    [Parameter]
    public string StatusContainerClass { get; set; } = "container-action-buttons-hide";

    [Parameter]
    public string StatusClass { get; set; } = "message-normal";

    [Parameter]
    public string ButtonText { get; set; } = "Pause Refresh";

    [Parameter]
    public string ButtonClass { get; set; } = "btn btn-outline-primary btn-refresh-active";

    [Parameter]
    public bool CreateLeadDisabled { get; set; } = true;

    [Parameter]
    public bool CreateLeadsDisabled { get; set; } = true;

    [Parameter]
    public bool DeleteLeadsDisabled { get; set; } = true;

    public virtual void ToggleRefresh()
    {
        if (ButtonText == "Pause Refresh")
        {
            CreateLeadDisabled = false;
            CreateLeadsDisabled = false;
            DeleteLeadsDisabled = false;

            ButtonText = "Resume Refresh";
            ButtonClass = "btn btn-outline-primary btn-refresh-inactive";
            StatusClass = "message-warning";
            RefreshStatus = " Auto refresh paused...";

            _timer?.Dispose();
        }
        else
        {
            CreateLeadDisabled = true;
            CreateLeadsDisabled = true;
            DeleteLeadsDisabled = true;

            StatusClass = "message-normal";
            RefreshStatus = "";
            ButtonText = "Pause Refresh";
            ButtonClass = "btn btn-outline-primary btn-refresh-active";

            RefreshTimer();
        }
    }

    private IEnumerable<Quote>? quotes;

    public int itemsToCreate = 100;
    public string updateStatus = "Fetching ";

    public Timer _timer;

    public Archives()
    {
        RefreshTimer();
    }

    public void Dispose()
    {
        _timer?.Dispose();           // because you need it here
    }

    private void RefreshTimer()
    {
        _timer = new Timer(new TimerCallback(_ =>
        {
            quotes = QuoteService.GetQuotes("Archive");
            updateStatus = quotes.Count().ToString("N0");
            StatusContainerClass = "container-action-buttons-show";

            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }), null, 1000, 1000);
    }

    private void CreateLeads()
    {
        for (var i = 0; i < itemsToCreate; i++)
        {
            updateStatus = "Creating ";
            CreateLead();
        }
    }

    private void DeleteLeads()
    {
        updateStatus = "Deleting...";
    }

    #region Create 1 Lead
    private void CreateLead()
    {
        updateStatus = "Creating ";

        List<String> nameGenders = new List<string>();
        nameGenders.Add("male");
        nameGenders.Add("female");

        Quote quote = new Quote();
        quote.status = "Archive";

        Utils utils = new Utils();

        var randomStreetNumber = utils.GetRandomStreetNumber();
        var randomStreetName = utils.GetRandomStreetName();

        var randomState = utils.GetRandomState();
        var stateName = randomState[0];
        var stateId = randomState[1];

        var randomCity = utils.GetRandomCity(MongoDB.Bson.ObjectId.Parse("52ade0932b0b6d13f88c4e8d"));
        var randomZipCode = utils.GetRandomZipCode().ToString();

        quote.address = randomStreetNumber + " " + randomStreetName + ", " + randomCity + ", " + stateName + " " + randomZipCode;
        quote.fullAddress = quote.address;
        quote.street = randomStreetNumber + " " + randomStreetName;
        quote.city = randomCity;
        quote.state = stateName;
        quote.zip = randomZipCode;

        Random rnd = new Random();
        int randomInt = rnd.Next(0, 1);

        quote.firstName = utils.GetRandomFirstName(nameGenders[randomInt]);
        quote.lastName = utils.GetRandomLastName();

        quote.email = quote.firstName.ToLower() + "@" + quote.lastName.ToLower() + ".com";
        quote.phone = "(" + utils.GetRandomAreaCode() + ") " + utils.GetRandomHomePhoneNumber();
        quote.market = quote.city + ", " + quote.state;
        quote.externalUrl = "https://app.roofle.com/dashboard";
        quote.timestamp = DateTime.Now.ToString();

        randomInt = rnd.Next(1, 3);
        quote.numberOfStructures = randomInt;
        quote.numberOfIncludedStructures = quote.numberOfStructures;

        randomInt = rnd.Next(1150, 5200);
        quote.totalSquareFeet = randomInt;
        quote.mainRoofTotalSquareFeet = randomInt;
        quote.totalInitialSquareFeet = randomInt;

        quote.sessionId = "nH9YvHwoBldl2ZkpQSWrX";

        // Add Product Info
        Product product = new Product();
        product.name = "Certainteed Landmark";
        product.id = 1;

        PriceInfo _priceInfo = new PriceInfo();
        _priceInfo.priceType = "BasicFinancing";

        randomInt = rnd.Next(15069, 15069);
        _priceInfo.total = randomInt;

        randomInt = rnd.Next(401, 401);
        _priceInfo.pricePerSquare = randomInt;

        randomInt = rnd.Next(250, 400);
        _priceInfo.monthly = randomInt;

        randomInt = rnd.Next(8, 26);
        _priceInfo.apr = randomInt;

        randomInt = rnd.Next(180, 180);
        _priceInfo.months = randomInt;

        product.priceInfo = _priceInfo;

        PriceRange _priceRange = new PriceRange();
        randomInt = rnd.Next(1150, 5200);
        _priceRange.totalMin = randomInt;

        randomInt = rnd.Next(16575, 16575);
        _priceRange.totalMax = randomInt;

        randomInt = rnd.Next(300, 300);
        _priceRange.monthlyMin = randomInt;

        randomInt = rnd.Next(367, 367);
        _priceRange.monthlyMax = randomInt;

        product.priceRange = _priceRange;

        product.wasteFactorMainRoof = 1.2;

        quote.products = null;
        quote.products = new List<Product>();
        quote.products.Add(product);

        randomInt = rnd.Next(0, 1);
        var repName = utils.GetRandomFirstName(nameGenders[randomInt]) + " " + utils.GetRandomLastName();

        quote.repLead = repName;
        quote.repEmail = repName.Replace(" ", ".").ToLower() + "@facilitate.org";

        randomInt = rnd.Next(5000, 9999);
        quote.leadId = randomInt;

        // Add Structure Info
        Structure structure = new Structure();
        structure.name = "Main Roof";
        structure.slope = "medium";
        structure.isIncluded = true;
        structure.squareFeet = quote.totalSquareFeet;
        structure.initialSquareFeet = quote.totalSquareFeet;
        structure.roofComplexity = "Simple";

        quote.structures = null;
        quote.structures = new List<Structure>();
        quote.structures.Add(structure);

        var results = string.Empty;

        try
        {
            QuoteService.CreateQuote(quote);
            results = "POSTED";
        }
        catch (Exception ex)
        {
            results = ex.Message;
        }
        finally
        {

        }
    }
    #endregion
}