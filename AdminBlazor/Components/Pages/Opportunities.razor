@page "/opportunities"

@using AdminBlazor.Data
@using DevExpress.Data
@using DevExpress.Data.Linq
@using Facilitate.Libraries.Models;
@using MongoDB.Bson;

@using Json.Net;

@attribute [StreamRendering(true)]
@rendermode InteractiveServer
@inject WebServices WebServices

@inject NavigationManager NavigationManager

<PageTitle>Opportunities</PageTitle>
<h1>@updateStatus Opportunities <span id="update-status" class="@StatusClass">@RefreshStatus</span></h1>

<script>
  window.getIpAddress = () => {
    return fetch('https://jsonip.com/')
      .then((response) => response.json())
      .then((data) => {
        return data.ip
      })
  }
</script>

@if (quotes == null)
{
@*     <p><em>Loading...</em></p> *@
}
else
{
        <div>
            Select row to expand details. Click column headers to sort. Type and hit enter in any empty cell to search that column. 
            <br/><br/>
            If you have grouped columns below, drag and drop the column back into the grid header to restore. 
            <br/><br/>
        </div>

        <DxGrid 
            @ref="QuoteGrid"
            Data="@quotes" 
            KeyFieldName="_id"

            PageSize="10" 
            PagerPosition="GridPagerPosition.Bottom" 
            ShowGroupPanel="true"
            AutoExpandAllGroupRows="true"
            ShowFilterRow="true"
            CssClass="mw-1100"

            RowClick="OnRowClick"

            AllowSelectRowByClick="true"
            SelectionMode="GridSelectionMode.Single"

            @bind-SelectedDataItem="@SelectedQuoteItem"

            TextWrapEnabled="true"
            PagerNavigationMode="PagerNavigationMode.InputBox"
            PageSizeSelectorVisible="true"
            PageSizeSelectorAllRowsItemVisible="false"
            KeyboardNavigationEnabled="true">
            <Columns>
                <DxGridDataColumn Caption="Date" FieldName="timestamp" DisplayFormat="MM/dd/yyyy hh:mm:ss tt" SortIndex="0" SortOrder="GridColumnSortOrder.Descending" AllowSort="true" />
                    <DxGridDataColumn Caption="First" FieldName="firstName" />
                    <DxGridDataColumn Caption="Last" FieldName="lastName" />
                    <DxGridDataColumn Caption="Street" FieldName="street" />
                    <DxGridDataColumn Caption="City" FieldName="city" />
                    <DxGridDataColumn Caption="State" FieldName="state" />
                    <DxGridDataColumn Caption="Zip" FieldName="zip" />
                <DxGridDataColumn Caption="Manager" TextAlignment="GridTextAlignment.Left" FieldName="projectManager.Name" />
            </Columns>

            <DetailRowTemplate>
            @{
                var _quote = (Quote)context.DataItem;

                var _emailTabLabel = "Email " + @_quote.firstName + " Documents";

                roofsCount = _quote.structures.Count;
                if(roofsCount <= 1)
                    roofsCountLabel = roofsCount.ToString() + " Roof Quoted";
                else
                    roofsCountLabel = roofsCount.ToString() + " Roofs Quoted";

                productsCount = _quote.products.Count;
                if(productsCount <= 1)
                    productsCountLabel = productsCount.ToString() + " Product Quoted";
                else
                    productsCountLabel = productsCount.ToString() + " Products Quoted";

                attachmentsCount = _quote.attachments.Count;
                notesCount = _quote.notes.Count;
                eventsCount = _quote.events.Count;

                <h6>Homeowner</h6>
                <div class="row">
                    <div class="col">
                        <label>Name</label>
                        <span>@_quote.firstName @_quote.lastName</span>
                    </div>
                    <div class="col">
                        <label>Email</label>
                        <a href="mailto:@_quote.email">
                            <span>@_quote.email</span>
                        </a>
                    </div>
                    <div class="col">
                        <label>Phone</label>
                        <span>@_quote.phone</span>
                    </div>
                </div>

                <div class="row">
                    <div class="col">
                        <label>Address</label>
                        <a href="https://www.google.com/maps/search/@_quote.street @_quote.city, @_quote.state @_quote.zip" target="_blank">
                            @_quote.street @_quote.city, @_quote.state @_quote.zip
                        </a>
                    </div>
                    <div class="col">
                        <label>IP</label>
                        <a href="https://whatismyipaddress.com/ip/@SubmissionUserIP" target="_blank">
                            <span>Location</span>
                        </a>
                    </div>
                    <div class="col"></div>
                </div>

                <div class="table-spacer" />

                <h6>Project Manager</h6>
                <div id="project-manager" class="row">
                    <div class="col">
                        <label>Name</label>
                        <span>@_quote.projectManager.Name</span>
                    </div>
                    <div class="col">
                        <label>Phone</label>
                        <span>@_quote.projectManager.Phone</span>
                    </div>
                    <div class="col">
                        <label>Email</label>
                        <a href="mailto:@_quote.projectManager.Email" target="_blank">
                            <span>@_quote.projectManager.Email</span>
                        </a>
                    </div>
                </div>

                <div class="table-spacer" />

                <DxTabs CssClass="tabs-container">

                    <DxTabPage Id="Panel-Project-Manager" CssClass="tab-container" Text="@roofsCountLabel">

                        <div class="container">

                            <div class="row">
                                <div class="col">
                                    <label>Total Sqft</label>
                                    <span><b>@_quote.totalSquareFeet.ToString("N0")</b></span>
                                </div>
                                <div class="col">
                                    <label>Included Roofs</label>
                                    <span><b>@_quote.numberOfIncludedStructures</b></span>
                                </div>
                                <div class="col">
                                </div>
                            </div>

                            <div class="row item-details-container">
                                @{
                                    currentItemIndex = 0;

                                    for (var i = 0; i < @_quote.structures.Count; i++)
                                    {
                                        currentItemIndex = i + 1;

                                        <b>Roof @currentItemIndex</b>
                                        <div class="row">
                                            <div class="col">
                                                <label>Name</label>
                                                <span>@_quote.structures[i].name</span>
                                            </div>
                                            <div class="col">
                                                <label>Complexity</label>
                                                <span>@_quote.structures[i].roofComplexity</span>
                                            </div>
                                            <div class="col">
                                                <label>Slope</label>
                                                <span>@_quote.structures[i].slope</span>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </DxTabPage>

                    <DxTabPage Id="Panel-Products" Text="@productsCountLabel">

                        <div class="container">
                            @{
                                for (var i = 0; i < @_quote.products.Count; i++)
                                {
                                    currentItemIndex = i + 1;

                                    var priceLabel = @_quote.products[i].priceInfo.priceType;
                                    if (priceLabel == "BasicFinancing")
                                        priceLabel = "Basic";
                                    else
                                        priceLabel = @_quote.products[i].priceInfo.priceType;

                                    <b>Product @currentItemIndex</b>

                                    <div class="row">
                                        <div class="col">
                                            <label>Name</label>
                                            <span>@_quote.products[i].name</span>
                                        </div>
                                        <div class="col">
                                            <label>Waste Factor</label>
                                            <span>@_quote.products[i].wasteFactorMainRoof</span>
                                        </div>
                                        <div class="col">
                                            <label>Price Type</label>
                                            <span>@priceLabel</span>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col">
                                            <label>Total Quote</label>
                                            <span>$@_quote.products[i].priceInfo.total</span>
                                        </div>
                                        <div class="col">
                                            <label>Per Square</label>
                                            <span>$@_quote.products[i].priceInfo.pricePerSquare</span>
                                        </div>
                                        <div class="col">
                                            <label>Monthly</label>
                                            <span>$@_quote.products[i].priceInfo.monthly</span>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col">
                                            <label>APR</label>
                                            <span>@_quote.products[i].priceInfo.apr%</span>
                                        </div>
                                        <div class="col">
                                            <label>Months</label>
                                            <span>@_quote.products[i].priceInfo.months</span>
                                        </div>
                                        <div class="col">
                                        </div>
                                    </div>
                                }
                            }
                        </div>

                    </DxTabPage>

                    <DxTabPage Id="Panel-Documents" Text="@_emailTabLabel">
                        <DxUpload Name="fileUpload1"
                                    SelectButtonText="Upload"
                                    AllowMultiFileUpload="true"
                                    UploadUrl="@GetUploadUrl("api/Upload/Upload/")"
                                    SelectedFilesChanged="@SelectedFilesChanged"
                                    MaxFileSize="15000000"
                                    AllowedFileExtensions="@(new List<string> { ".jpg", ".jpeg", ".gif", ".png", ".mpg", ".mp4" })"
                                    AcceptedFileTypes="@(new List<string> {  "image/*", "video/*"})"
                                    CssClass="@(SelectedFilesCount > 0 ? "w-100" : "add-item-button")">
                        </DxUpload>
                        <button class="btn btn-primary doc-select-button" disabled="@SendDocsDisabled" @onclick="@EmailFiles">Send Docs</button>
                    </DxTabPage>

                    <DxTabPage Id="Panel-Attachments" Text="Attachments">
                        <DxUpload Name="fileUpload2"
                                    SelectButtonText="Upload"
                                    AllowMultiFileUpload="true"
                                    UploadUrl="@GetUploadUrl("api/Upload/Upload/")"
                                    SelectedFilesChanged="@SelectedFilesChanged"
                                    MaxFileSize="15000000"
                                    AllowedFileExtensions="@(new List<string> { ".jpg", ".jpeg", ".gif", ".png", ".mpg", ".mp4" })"
                                    AcceptedFileTypes="@(new List<string> {  "image/*", "video/*"})"
                                    CssClass="@(SelectedFilesCount > 0 ? "w-100" : "add-item-button")">
                        </DxUpload>

                        @foreach (Attachment attachment in _quote.attachments)
                        {
                            if (!attachment.IsDeleted)
                            {
                                <div class="note-row">
                                    <div>
                                        <label>@attachmentsCount) @attachment.Date</label>
                                    </div>

                                    <span class="hyperlink" @onclick="() => SelectAttachmentToDelete(_quote, attachment)">Delete</span>

                                    <span class="bar-spacer">|</span>
                                    <a href="@attachment.MediaUrl" target="_blank">
                                        <span>@attachment.MediaDescription</span>
                                    </a>
                                    <span class="bar-spacer">|</span>
                                    <label>File Type</label>
                                    <span>@FileType</span>
                                    <span class="bar-spacer">|</span>
                                    <label>Author</label>
                                    <span>@Author</span>
                                </div>

                                attachmentsCount--;
                            }
                        }
                    </DxTabPage>

                    <DxTabPage Id="Panel-Notes" Text="Notes">
                        <button class="btn btn-primary doc-select-button add-item-button" @onclick="@(() => IsPopupVisibleAddNote = true)">Add Note</button>
                        @foreach (Note note in _quote.notes)
                        {
                            if (!note.IsDeleted)
                            {
                                <div class="note-row">
                                    <div>
                                        <label>@notesCount) @note.Date</label>
                                    </div>

                                    <span class="hyperlink" @onclick="() => SelectNoteToDelete(_quote, note)">Delete</span>

                                    <span class="bar-spacer">|</span>
                                    <span>@note.Details</span>

                                    <span class="bar-spacer">|</span>
                                    <label>Author</label>
                                    <span>@Author</span>
                                </div>

                                notesCount--;
                            }
                        }
                    </DxTabPage>

                    <DxTabPage Id="Panel-History" Text="History">
                        @foreach (Event _event in _quote.events)
                        {
                            <div class="note-row">
                                <div class="">
                                    <label>@eventsCount) @_event.DateTime</label>
                                </div>

                                <span class="bar-spacer">|</span>
                                <span>@_event.Details</span>

                                <span class="bar-spacer">|</span>
                                <label>Author</label>
                                <span>@Author</span>
                            </div>

                            eventsCount--;
                        }
                    </DxTabPage>

                    <DxTabPage Id="Panel-Origination" Text="Origination">
                        <table id="table-origin" class="table-detail">
                            <tbody>

                                <tr>
                                    <td>
                                        <label>Market</label>
                                        <span>@_quote.market</span>
                                    </td>
                                    <td>
                                        <label>Rep Name</label>
                                        <span>@_quote.repLead</span>
                                    </td>
                                    <td>
                                        <label>Rep Email</label>
                                        <a href="mailto:@_quote.repEmail">
                                            <span>@_quote.repEmail</span>
                                        </a>
                                    </td>
                                </tr>

                                <tr>
                                    <td>
                                        <label>RecId</label>
                                        <span>@_quote._id</span>
                                    </td>
                                    <td>
                                        <label>Referrer</label>
                                        <a href="@_quote.externalUrl" target="_blank">
                                            <span>@_quote.externalUrl</span>
                                        </a>
                                    </td>
                                    <td>
                                        <label>Session</label>
                                        <span>@_quote.sessionId</span>
                                    </td>
                                </tr>

                                <tr>
                                    <td>
                                        <label>RefId</label>
                                        <span>@_quote.leadId</span>
                                    </td>
                                    <td>
                                        <label>Created</label>
                                        <span>@_quote.timestamp</span>
                                    </td>
                                    <td>
                                    </td>

                                </tr>
                            </tbody>
                        </table>
                    </DxTabPage>

                </DxTabs>


                <div id="div-controls-container" class="quote-detail-controls-container">
                    <button class="btn btn-primary" @onclick="@(() => IsPopupVisibleMakeCustomer = true)">Make Customer</button>
                    <button class="btn btn-primary" @onclick="@(() => IsArchivePopupVisible = true)">Archive</button>
                    <button class="btn btn-primary" @onclick="CloseDetails">Close</button>
                </div>

            }
            </DetailRowTemplate>

        </DxGrid>
}

<DxPopup @bind-Visible="@IsPopupVisibleSelectAttachmentToDelete" ShowFooter="true" HeaderText="Delete File">
    <BodyContentTemplate>
        Are you sure you want to delete "@selectedAttachment.MediaDescription"?
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="Delete" Click="DeleteSelectedAttachment" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsPopupVisibleSelectAttachmentToDelete = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleSelectNoteToDelete" ShowFooter="true" HeaderText="Delete Note">
    <BodyContentTemplate>
        Are you sure you want to delete "@selectedNote.Details"?
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="Delete" Click="DeleteSelectedNote" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsPopupVisibleSelectNoteToDelete = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup
    @bind-Visible="@IsPopupVisibleMakeCustomer" ShowFooter="true" HeaderText="Make Customer">
    <BodyContentTemplate>
        If this Opportunity is fully qualified to meet Customer criteria, then click Save.
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="Save" Click="MakeCustomer" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsPopupVisibleMakeCustomer = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleAddNote" ShowFooter="true" HeaderText="Add Note">
    <BodyContentTemplate>
        <p>Please type in your notes below.</p>
        <DxMemo @bind-Text="@NoteDetails" InputId="archive-reason" CssClass="cw-320" />
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton SubmitFormOnClick="true" CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="Save" Click="AddNote" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsPopupVisibleAddNote = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsArchivePopupVisible" ShowFooter="true" HeaderText="Please type in a reason for Archival below">
    <BodyContentTemplate>
        <DxMemo @bind-Text="@NoteDetails" InputId="archive-reason" CssClass="cw-320" />
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton SubmitFormOnClick="true" CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="Archive" Click="ArchiveLead" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsArchivePopupVisible = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleHelpSendFiles" ShowFooter="true" HeaderText="Send Documents Help?">
    <BodyContentTemplate>
        <p>Send Documents details...</p>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Close" Click="@(() => IsPopupVisibleHelpSendFiles = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleHelpFileAttachments" ShowFooter="true" HeaderText="File Attachments Help?">
    <BodyContentTemplate>
        <p>File Attachments details...</p>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Close" Click="@(() => IsPopupVisibleHelpFileAttachments = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleHelpFileNotes" ShowFooter="true" HeaderText="File Notes Help?">
    <BodyContentTemplate>
        <p>File Notes details...</p>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Close" Click="@(() => IsPopupVisibleHelpFileNotes = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxLoadingPanel @bind-Visible=@LoadingPanelVisible
                PositionTarget="body"
                ApplyBackgroundShading="true"
                CssClass="w-100">
</DxLoadingPanel>

<div class="@StatusContainerClass">
    <button class="@ButtonClass" disabled="@RefreshDisabled" @onclick="ToggleRefresh">@ButtonText</button>
</div>


@code {

    public int noteCount = 0;

    public Quote selectedQuote { get; set; }
    public Attachment selectedAttachment { get; set; }
    public Note selectedNote { get; set; }

    bool LoadingPanelVisible { get; set; } = true;

    WebServices webServices = new WebServices();

    #region Private Properties

    private List<Quote>? quotes;

    int SelectedFilesCount { get; set; }

    ObjectId SelectedFileId { get; set; }

    IGrid QuoteGrid { get; set; }

    IGrid EventGrid { get; set; }

    EntityInstantFeedbackSource InstantFeedbackSource { get; set; }

    bool isBulkInsert = false;

    string FileType { get; set; } = ".pdf";
    string Author { get; set; } = "unknown";

    string NoteDetails { get; set; } = "";

    #endregion

    #region Public Properties

    [Inject] public IJSRuntime jsRuntime { get; set; }

    public Timer _timer;

    public string ClientIP = "";
    public string selectedQuoteId = "";

    public interface IQueryable : System.Collections.IEnumerable;

    public int currentItemIndex = 0;
    public int selectedIndex = 0;

    public string SubmissionUserIP { get; set; }

    public int itemsToCreate = 10;
    public string updateStatus = "Fetching ";

    public int roofsCount = 0;
    public int productsCount = 0;

    public string roofsCountLabel = "";
    public string productsCountLabel = "";

    public int attachmentsCount = 0;
    public int notesCount = 0;
    public int eventsCount = 0;

    #endregion

    #region Popup properties

    bool IsPopupVisibleAddFile { get; set; }
    bool IsPopupVisibleSelectAttachmentToDelete { get; set; }

    bool IsPopupVisibleAddNote { get; set; }
    bool IsPopupVisibleSelectNoteToDelete { get; set; }

    bool IsPopupVisibleMakeCustomer { get; set; }
    bool IsArchivePopupVisible { get; set; }

    bool IsPopupVisibleHelpSendFiles { get; set; }
    bool IsPopupVisibleHelpFileAttachments { get; set; }
    bool IsPopupVisibleHelpFileNotes { get; set; }

    #endregion

    #region Parameters

    [Parameter]
    public string DisplayFormat { get; set; }

    [Parameter]
    public List<string> AcceptedFileTypes { get; set; }

    [Parameter]
    public GridDetailRowDisplayMode DetailRowDisplayMode { get; set; }

    [Parameter]
    public string RefreshStatus { get; set; } = "";

    [Parameter]
    public string StatusContainerClass { get; set; } = "container-action-buttons-hide";

    [Parameter]
    public string StatusClass { get; set; } = "message-normal";

    [Parameter]
    public string ButtonText { get; set; } = "Pause Refresh";

    [Parameter]
    public string ButtonClass { get; set; } = "btn btn-outline-primary btn-refresh-active";

    [Parameter]
    public bool RefreshDisabled { get; set; } = false;

    [Parameter]
    public bool SendDocsDisabled { get; set; } = true;

    [Parameter]
    public bool ArchiveLeadsDisabled { get; set; } = true;

    [Parameter]
    public object SelectedQuoteItem { get; set; }

    [Parameter]
    public object SelectedEventItem { get; set; }

    [Parameter]
    public int VisibleIndex { get; set; }

    [Parameter]
    public bool ClearFilterButtonVisible { get; set; }

    #endregion

    #region Methods

    protected override void OnInitialized() { }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            RefreshTimer();
        }

        GetIpAddress();
    }

    void OnRowClick(GridRowClickEventArgs args)
    {
        selectedIndex = args.VisibleIndex;
        selectedQuote = quotes[selectedIndex];

        var selectedDetailExpanded = QuoteGrid.IsDetailRowExpanded(selectedIndex);
        if (selectedDetailExpanded)
        {
            QuoteGrid.CollapseDetailRow(selectedIndex);

            PauseRefresh(false);

            RefreshDisabled = false;
        }
        else
        {
            QuoteGrid.CollapseAllDetailRows();
            QuoteGrid.ExpandDetailRow(selectedIndex);

            PauseRefresh(true);
        }
    }

    public async Task<string> GetIpAddress()
    {
        try
        {
            SubmissionUserIP = await jsRuntime.InvokeAsync<string>("getIpAddress").ConfigureAwait(true);

            return SubmissionUserIP;
        }
        catch (Exception e)
        {
            //If your request was blocked by CORS or some extension like uBlock Origin then you will get an exception.
            return string.Empty;
        }
    }

    protected void SelectedFilesChanged(IEnumerable<UploadFileInfo> files)
    {
        SelectedFilesCount = files.ToList().Count;
        InvokeAsync(StateHasChanged);

        SendDocsDisabled = false;
    }

    protected void EmailFiles()
    {
        var tmpVal = "";
    }

    protected string GetUploadUrl(string url)
    {
        var absoluteUri = NavigationManager.ToAbsoluteUri(url).AbsoluteUri;

        return absoluteUri;
    }

    public void ArchiveLead()
    {
        selectedQuote.status = "Archive";

        QuoteGrid.CollapseDetailRow(selectedIndex);

        Note note = new Note();
        note.Summary = "Opportunity Archived";
        note.Details = @NoteDetails;

        selectedQuote.notes.Add(note);

        WebServices.UpdateQuote(selectedQuote);

        IsArchivePopupVisible = false;

        PauseRefresh(false);
    }

    public void AddNote()
    {
        QuoteGrid.CollapseDetailRow(selectedIndex);

        Note note = new Note();
        note.Summary = "Note Added";
        note.Details = @NoteDetails;

        selectedQuote.notes.Add(note);

        Event _event = new Event(0, 0);
        _event.Details = "Note (" + note.Details + ") added to Quote";

        selectedQuote.events.Add(_event);

        WebServices.UpdateQuote(selectedQuote);

        IsPopupVisibleAddNote = false;
        NoteDetails = "";

        QuoteGrid.ExpandDetailRow(selectedIndex);

        PauseRefresh(false);
    }

    public void CloseDetails()
    {
        QuoteGrid.CollapseDetailRow(selectedIndex);

        PauseRefresh(false);
    }

    public void SelectAttachmentToDelete(Quote quote, Attachment attachment)
    {
        selectedQuote = quote;
        selectedAttachment = attachment;

        IsPopupVisibleSelectAttachmentToDelete = true;

        RefreshTimer();
    }

    public void SelectNoteToDelete(Quote quote, Note note)
    {
        selectedQuote = quote;
        selectedNote = note;

        IsPopupVisibleSelectNoteToDelete = true;
    }

    public void DeleteSelectedAttachment()
    {
        selectedAttachment.IsDeleted = true;

        Event _event = new Event(0, 0);
        _event.Details = "Deleted attachment (" + selectedAttachment.MediaDescription + ") from Quote";

        selectedQuote.events.Add(_event);

        WebServices.UpdateQuote(selectedQuote);

        RefreshTimer();

        IsPopupVisibleSelectAttachmentToDelete = false;

        attachmentsCount--;
    }

    public void DeleteSelectedNote()
    {
        selectedNote.IsDeleted = true;

        Event _event = new Event(0, 0);
        _event.Details = "Deleted note (" + selectedNote.Details + ") from Quote";

        selectedQuote.events.Add(_event);

        WebServices.UpdateQuote(selectedQuote);

        RefreshTimer();

        IsPopupVisibleSelectNoteToDelete = false;

        notesCount--;
    }

    public void MakeCustomer()
    {
        selectedQuote.status = "Customer";

        QuoteGrid.CollapseDetailRow(selectedIndex);

        var projectManager = selectedQuote.projectManager;

        Event _event = new Event(0, 0);
        _event.Details = selectedQuote.firstName + " " + selectedQuote.lastName + " converted to Customer";

        selectedQuote.events.Add(_event);

        WebServices.UpdateQuote(selectedQuote);

        IsPopupVisibleMakeCustomer = false;

        PauseRefresh(false);
    }

    public virtual void PauseRefresh(bool isPaused)
    {
        RefreshDisabled = isPaused;
        ArchiveLeadsDisabled = isPaused;

        if(isPaused)
        {
            ButtonText = "Resume Refresh";
            ButtonClass = "btn btn-outline-primary btn-refresh-inactive";
            StatusClass = "message-warning";
            RefreshStatus = " Auto refresh paused...";

            _timer?.Dispose();
        }
        else
        {
            ButtonText = "Pause Refresh";
            ButtonClass = "btn btn-outline-primary btn-refresh-active";
            StatusClass = "message";
            RefreshStatus = "";

            RefreshTimer();
        }
    }

    public virtual void ToggleRefresh()
    {
        if (ButtonText == "Pause Refresh")
        {
            PauseRefresh(true);
        }
        else
        {
            PauseRefresh(false);
        }

        RefreshDisabled = false;
    }

    public void Dispose()
    {
        _timer?.Dispose();           // because you need it here
    }

    private void RefreshTimer()
    {
        LoadingPanelVisible = true;

        _timer = new Timer(new TimerCallback(_ =>
        {
            quotes = webServices.GetQuotes("Opportunity");
            updateStatus = quotes.Count().ToString("N0");
            StatusContainerClass = "container-action-buttons-show";

            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }), null, 1000, 1000);

        LoadingPanelVisible = false;
    }

    #endregion
}