@page "/opportunities"

@using AdminBlazor.Data
@using DevExpress.Data
@using DevExpress.Data.Linq
@using Facilitate.Libraries.Models;
@using MongoDB.Bson;

@using Json.Net;

@attribute [StreamRendering(true)]
@rendermode InteractiveServer
@inject WebServices WebServices

@inject NavigationManager NavigationManager

<PageTitle>Opportunities</PageTitle>
<h1>@updateStatus Opportunities <span id="update-status" class="@StatusClass">@RefreshStatus</span></h1>

<script>
  window.getIpAddress = () => {
    return fetch('https://jsonip.com/')
      .then((response) => response.json())
      .then((data) => {
        return data.ip
      })
  }
</script>

@if (quotes == null)
{
@*     <p><em>Loading...</em></p> *@
}
else
{
        <div>
            Select row to expand details. Click column headers to sort. Type and hit enter in any empty cell to search that column. 
            <br/><br/>
            If you have grouped columns below, drag and drop the column back into the grid header to restore. 
            <br/><br/>
        </div>

        <DxGrid 
            @ref="QuoteGrid"
            Data="@quotes" 
            KeyFieldName="_id"

            PageSize="10" 
            PagerPosition="GridPagerPosition.Bottom" 
            ShowGroupPanel="true"
            AutoExpandAllGroupRows="true"
            ShowFilterRow="true"
            CssClass="mw-1100"

            RowClick="OnRowClick"

            AllowSelectRowByClick="true"
            SelectionMode="GridSelectionMode.Single"

            @bind-SelectedDataItem="@SelectedQuoteItem"

            TextWrapEnabled="true"
            PagerNavigationMode="PagerNavigationMode.InputBox"
            PageSizeSelectorVisible="true"
            PageSizeSelectorAllRowsItemVisible="false"
            KeyboardNavigationEnabled="true">
            <Columns>
                <DxGridDataColumn Caption="Date" FieldName="timestamp" DisplayFormat="MM/dd/yyyy hh:mm:ss tt" SortIndex="0" SortOrder="GridColumnSortOrder.Descending" AllowSort="true" />
                    <DxGridDataColumn Caption="First" FieldName="firstName" />
                    <DxGridDataColumn Caption="Last" FieldName="lastName" />
@*                     <DxGridDataColumn Caption="Street" FieldName="street" /> *@
                    <DxGridDataColumn Caption="City" FieldName="city" />
                    <DxGridDataColumn Caption="State" FieldName="state" />
                    <DxGridDataColumn Caption="Zip" FieldName="zip" />
                <DxGridDataColumn Caption="Manager" TextAlignment="GridTextAlignment.Left" FieldName="projectManager.Name" />
            </Columns>

            <DetailRowTemplate>
            @{
                var _quote = (Quote)context.DataItem;

                var attachmentsCount = _quote.attachments.Count;
                var notesCount = _quote.notes.Count;
                var eventsCount = _quote.events.Count;

                <table class="table-detail">
                    <tbody>
                        <tr>
                            <td colspan=3>
                                <h6>Homeowner</h6>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <label>Name</label>
                                <span class="detail-item">@_quote.firstName @_quote.lastName</span>
                            </td>
                            <td>
                                <label>Email</label>
                                <a href="mailto:@_quote.email">
                                    <span class="detail-item">@_quote.email</span>
                                </a>
                            </td>
                            <td>
                                <label>Phone</label>
                                <span class="detail-item">@_quote.phone</span>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <label>Address</label>
                                <a href="https://www.google.com/maps/search/@_quote.street @_quote.city, @_quote.state @_quote.zip" target="_blank">
                                    @_quote.street @_quote.city, @_quote.state @_quote.zip
                                </a>
                            </td>
                            <td>
                                <label>IP</label>
                                <a href="https://whatismyipaddress.com/ip/@SubmissionUserIP" target="_blank">
                                    <span class="detail-item">@SubmissionUserIP</span>
                                </a>
                            </td>
                            <td></td>
                        </tr>
                    </tbody>
                </table>

                <div class="table-spacer" />

                <table class="table-detail">
                    <tbody>
                        <tr>
                            <td colspan=3>
                                <h6>Products</h6>
                            </td>
                        </tr>
                        @{
                            for (var i = 0; i < @_quote.products.Count; i++)
                            {
                                currentItem = i + 1;

                                var priceLabel = @_quote.products[i].priceInfo.priceType;
                                if (priceLabel == "BasicFinancing")
                                {
                                    priceLabel = "Basic Financing";
                                }
                                else
                                {
                                    priceLabel = @_quote.products[i].priceInfo.priceType;
                                }

                                <tr>
                                    <td>
                                        <label>Name</label>
                                        <span class="detail-item">@_quote.products[i].name</span>
                                    </td>
                                    <td>
                                        <label>Waste Factor</label>
                                        <span class="detail-item">@_quote.products[i].wasteFactorMainRoof</span>
                                    </td>
                                    <td>
                                        <label>Price Type</label>
                                        <span class="detail-item">@priceLabel</span>
                                    </td>
                                </tr>

                                <tr>
                                    <td>
                                        <label>Total Quote</label>
                                        <span class="detail-item">$@_quote.products[i].priceInfo.total.ToString("N0")</span>
                                    </td>
                                    <td>
                                        <label>Per Square</label>
                                        <span class="detail-item">$@_quote.products[i].priceInfo.pricePerSquare</span>
                                    </td>
                                    <td>
                                        <label>Monthly</label>
                                        <span class="detail-item">$@_quote.products[i].priceInfo.monthly</span>
                                    </td>
                                </tr>

                                <tr>
                                    <td>
                                        <label>APR</label>
                                        <span class="detail-item">@_quote.products[i].priceInfo.apr%</span>
                                    </td>
                                    <td>
                                        <label>Months</label>
                                        <span class="detail-item">@_quote.products[i].priceInfo.months</span>
                                    </td>
                                    <td></td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>

                <div class="table-spacer" />

                <table>
                    <tbody>
                        <tr>
                            <td colspan=3>
                                <h6>Project Details</h6>
                            </td>
                        </tr>
                    </tbody>
                </table>

                <div id="project-container">

                    <table class="">
                        <tbody>

                            <tr>
                                <td>
                                    <label>Sqft</label>
                                    <span class="detail-item">@_quote.totalSquareFeet.ToString("N0")</span>
                                </td>
                                <td>
                                    <label>Roofs</label>
                                    <span class="detail-item">@_quote.numberOfIncludedStructures</span>
                                </td>
                                <td></td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Name</label>
                                    <span class="detail-item">@_quote.structures[0].name</span>
                                </td>
                                <td>
                                    <label>Complexity</label>
                                    <span class="detail-item">@_quote.structures[0].roofComplexity</span>
                                </td>
                                <td>
                                    <label>Slope</label>
                                    <span class="detail-item">@_quote.structures[0].slope</span>
                                </td>
                            </tr>

                            <tr>
                                <td colspan=3>
                                    <table>
                                        <tbody>
                                            <tr>
                                                <td>
                                                    <label>Manager</label>
                                                    <span class="detail-item">@_quote.projectManager.Name</span>
                                                </td>
                                                <td>
                                                    <label>Phone</label>
                                                    <span class="detail-item">@_quote.projectManager.Phone</span>
                                                </td>
                                                <td>
                                                    <label>Email</label>
                                                    <a href="mailto:@_quote.projectManager.Email" target="_blank">
                                                        <span class="detail-item">@_quote.projectManager.Email</span>
                                                    </a>
                                                </td>
                                            </tr>
                                    </tbody>
                                    </table>
                                </td>
                            </tr>

                        </tbody>
                    </table>

                    <table class="project-detail-work-panel">
                        <tbody>

                            <tr>
                                <td class="table-button-container">
                                    <button class="btn btn-primary doc-select-button" disabled="@SendDocsDisabled" @onclick="@EmailFiles">Send Docs</button>
                                </td>
                                <td colspan="2" class="detail-colum">

                                    <h4>Documents <span @onclick="@(() => PopupVisibleHelpSendFiles = true)" class="link-help-info"><img src="images/icons/Help.png" class="icon-help" /></span></h4>

                                    <label class="document-label-container">
                                        Welcome letter
                                        <input type="checkbox" id="welcomeletter" name="welcomeletter" value="welcomeletter">
                                    </label>
                                    <label class="document-label-container">
                                        Engagement Agreement
                                        <input type="checkbox" id="engagementagreement" name="engagementagreement" value="engagementagreement">
                                    </label>
                                    <label class="document-label-container">
                                        and/or
                                    </label>
                                    <label>
                                        <DxUpload Name="myFile"
                                            AllowMultiFileUpload="true"
                                            UploadUrl="@GetUploadUrl("api/Upload/Upload/")"
                                            SelectedFilesChanged="@SelectedFilesChanged"
                                            MaxFileSize="15000000"
                                            AllowedFileExtensions="@(new List<string> { ".jpg", ".jpeg", ".gif", ".png", ".mpg", ".mp4" })"
                                            AcceptedFileTypes="@(new List<string> {  "image/*", "video/*"})"
                                            CssClass="@(SelectedFilesCount > 0 ? "w-100" : string.Empty)">
                                        </DxUpload>
                                    </label>
                                </td>
                            </tr>

                        </tbody>
                    </table>

                    <table class="project-detail-work-panel">
                        <tbody>

                            <tr>
                                <td class="table-button-container">
                                    <DxUpload Name="myFile"
                                        AllowMultiFileUpload="true"
                                        UploadUrl="@GetUploadUrl("api/Upload/Upload/")"
                                        SelectedFilesChanged="@SelectedFilesChanged"
                                        MaxFileSize="15000000"
                                        AllowedFileExtensions="@(new List<string> { ".jpg", ".jpeg", ".gif", ".png", ".mpg", ".mp4" })"
                                        AcceptedFileTypes="@(new List<string> {  "image/*", "video/*"})"
                                        CssClass="@(SelectedFilesCount > 0 ? "w-100" : string.Empty)">
                                    </DxUpload>
                                </td>
                                <td colspan="2" class="detail-colum">

                                    <h4>@attachmentsCount Attachments <span @onclick="@(() => PopupVisibleHelpFileAttachments = true)" class="link-help-info"><img src="images/icons/Help.png" class="icon-help" /></span></h4>

                                    @{
                                        <div class="notes-container">
                                            @foreach (Attachment attachment in _quote.attachments)
                                            {
                                                <div class="note-row">
                                                    <div class="div-date-container">
                                                        <label><b>@attachmentsCount)</b> @attachment.Date</label>
                                                    </div>

                                                    <span class="hyperlink" @onclick="() => DeleteAttachment(_quote, attachment)">Delete</span>

                                                    <span class="bar-spacer">|</span>
                                                    <a href="@attachment.MediaUrl" target="_blank">
                                                        <span class="detail-item">@attachment.MediaDescription</span>
                                                    </a>
                                                    <span class="bar-spacer">|</span>
                                                    <label>File Type</label>
                                                    <span>@FileType</span>
                                                    <span class="bar-spacer">|</span>
                                                    <label>Author</label>
                                                    <span>@Author</span>
                                                </div>

                                                attachmentsCount--;
                                            }
                                        </div>
                                    }
                                </td>
                            </tr>

                        </tbody>
                    </table>

                    <table class="project-detail-work-panel">
                        <tbody>

                            <tr>
                                <td class="table-button-container">
                                    <button class="btn btn-primary doc-select-button" @onclick="@(() => PopupVisibleAddNote = true)">Add Note</button>
                                </td>
                                <td colspan="2" class="detail-colum">

                                    <h4>@notesCount Notes <span @onclick="@(() => PopupVisibleHelpFileNotes = true)" class="link-help-info"><img src="images/icons/Help.png" class="icon-help" /></span></h4>

                                    <div class="notes-container">
                                        @foreach (Note note in _quote.notes)
                                        {
                                            <div class="note-row">
                                                <div class="div-date-container">
                                                    <label><b>@notesCount)</b> @note.Date</label>
                                                </div>

                                                <span class="hyperlink" @onclick="() => DeleteNote(_quote, note)">Delete</span>

                                                <span class="bar-spacer">|</span>
                                                <span class="detail-item">@note.Details</span>

                                                <span class="bar-spacer">|</span>
                                                <label>Author</label>
                                                <span>@Author</span>
                                            </div>

                                            notesCount--;
                                        }
                                    </div>

                                </td>
                            </tr>

                        </tbody>
                    </table>

                </div>

                <div class="table-spacer" />

                <table class="table-detail">
                    <tbody>
                        <tr>
                            <td colspan=3>
                                <h6>Origin</h6>
                            </td>
                        </tr>

                        <tr>
                            <td>
                                <label>Market</label>
                                <span class="detail-item">@_quote.market</span>
                            </td>
                            <td>
                                <label>Rep Name</label>
                                <span class="detail-item">@_quote.repLead</span>
                            </td>
                            <td>
                                <label>Rep Email</label>
                                <a href="mailto:@_quote.repEmail">
                                    <span class="detail-item">@_quote.repEmail</span>
                                </a>
                            </td>
                        </tr>

                        <tr>
                            <td>
                                <label>RecId</label>
                                <span class="detail-item">@_quote._id</span>
                            </td>
                            <td>
                                <label>Referrer</label>
                                <a href="@_quote.externalUrl" target="_blank">
                                    <span class="detail-item">@_quote.externalUrl</span>
                                </a>
                            </td>
                            <td>
                                <label>Session</label>
                                <span class="detail-item">@_quote.sessionId</span>
                            </td>
                        </tr>

                        <tr>
                            <td>
                                <label>RoofleId</label>
                                <span class="detail-item">@_quote.leadId</span>
                            </td>
                            <td>
                            </td>
                            <td>
                            </td>

                        </tr>
                    </tbody>
                </table>

                <div class="table-spacer" />

                <table class="table-detail">
                    <tbody>
                        <tr>
                            <td colspan="3">
                                <h6>@eventsCount History Events</h6>
                                <br />
                            </td>
                        </tr>

                        <tr>
                        <td>
                            <div class="notes-container">
                                @foreach (Event _event in _quote.events)
                                {
                                    <div class="note-row">
                                        <div class="">
                                            <label><b>@eventsCount)</b> @_event.Date</label>
                                        </div>

                                        <span class="bar-spacer">|</span>
                                        <span class="detail-item">@_event.Details</span>

                                        <span class="bar-spacer">|</span>
                                        <label>Author</label>
                                        <span>@Author</span>
                                    </div>

                                    eventsCount--;
                                }
                            </div>
                        </td>
                        </tr>

                    </tbody>
                </table>

                <div class="table-spacer" />

                <div class="quote-detail-controls-container">
                    <button class="btn btn-primary" @onclick="@(() => PopupVisibleMakeCustomer = true)">Make Customer</button>
                    <button class="btn btn-primary" @onclick="@(() => PopupVisibleArchive = true)">Archive</button>
                    <button class="btn btn-primary" @onclick="CloseDetails">Close</button>
                </div>

            }
            </DetailRowTemplate>

        </DxGrid>
}

<DxPopup @bind-Visible="@PopupVisibleDeleteFile" ShowFooter="true" HeaderText="Delete File">
    <BodyContentTemplate>
        Are you sure you want to delete FileId: (@SelectedFileId)?
    </BodyContentTemplate>
    <FooterContentTemplate>
@*         <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="Delete" Click="DeleteFile" /> *@
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => PopupVisibleDeleteFile = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@PopupVisibleDeleteNote" ShowFooter="true" HeaderText="Delete Note">
    <BodyContentTemplate>
        Are you sure you want to delete NoteId: (@SelectedFileId)?
    </BodyContentTemplate>
    <FooterContentTemplate>
@*         <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="Delete" Click="DeleteNote" /> *@
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => PopupVisibleDeleteNote = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup
    @bind-Visible="@PopupVisibleMakeCustomer" ShowFooter="true" HeaderText="Make Customer">
    <BodyContentTemplate>
        If this Opportunity is fully qualified to meet Customer criteria, then click Save.
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="Save" Click="MakeCustomer" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => PopupVisibleMakeCustomer = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@PopupVisibleAddNote" ShowFooter="true" HeaderText="Add Note">
    <BodyContentTemplate>
        <p>Please type in your notes below.</p>
        <DxMemo @bind-Text="@NoteDetails" InputId="archive-reason" CssClass="cw-320" />
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton SubmitFormOnClick="true" CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="Save" Click="AddNote" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => PopupVisibleAddNote = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@PopupVisibleArchive" ShowFooter="true" HeaderText="Please type in a reason for Archival below">
    <BodyContentTemplate>
        <DxMemo @bind-Text="@NoteDetails" InputId="archive-reason" CssClass="cw-320" />
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton SubmitFormOnClick="true" CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="Archive" Click="ArchiveLead" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => PopupVisibleArchive = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@PopupVisibleHelpSendFiles" ShowFooter="true" HeaderText="Send Documents Help?">
    <BodyContentTemplate>
        <p>Send Documents details...</p>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Close" Click="@(() => PopupVisibleHelpSendFiles = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@PopupVisibleHelpFileAttachments" ShowFooter="true" HeaderText="File Attachments Help?">
    <BodyContentTemplate>
        <p>File Attachments details...</p>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Close" Click="@(() => PopupVisibleHelpFileAttachments = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@PopupVisibleHelpFileNotes" ShowFooter="true" HeaderText="File Notes Help?">
    <BodyContentTemplate>
        <p>File Notes details...</p>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Close" Click="@(() => PopupVisibleHelpFileNotes = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxLoadingPanel @bind-Visible=@LoadingPanelVisible
                PositionTarget="body"
                ApplyBackgroundShading="true"
                CssClass="w-100">
</DxLoadingPanel>

<div class="@StatusContainerClass">
    <button class="@ButtonClass" disabled="@RefreshDisabled" @onclick="ToggleRefresh">@ButtonText</button>
</div>


@code {

    public int noteCount = 0;

    public void EnableRefreshAndCreateControls(bool bEnable)
    {
        if (bEnable)
        {
            RefreshDisabled = false;
            ArchiveLeadsDisabled = false;
        }
        else
        {
            RefreshDisabled = true;
            CreateLeadDisabled = true;
            CreateLeadsDisabled = true;
            ArchiveLeadsDisabled = true;
        }
    }

    bool LoadingPanelVisible { get; set; } = true;

    WebServices webServices = new WebServices();

    #region Private Properties

        private List<Quote>? quotes;

        int SelectedFilesCount { get; set; }

        ObjectId SelectedFileId { get; set; }

        IGrid QuoteGrid { get; set; }

        IGrid EventGrid { get; set; }

        EntityInstantFeedbackSource InstantFeedbackSource { get; set; }

        bool isBulkInsert = false;

        string FileType { get; set; } = ".pdf";
        string Author { get; set; } = "unknown";

        string NoteDetails { get; set; } = "";

    #endregion

    #region Public Properties

        [Inject] public IJSRuntime jsRuntime { get; set; }

        public Timer _timer;

        public string ClientIP = "";
        public string selectedQuoteId = "";

        public interface IQueryable : System.Collections.IEnumerable;

        public int currentItem = 0;
        public int selectedIndex = 0;

        public string SubmissionUserIP { get; set; }

        public int itemsToCreate = 10;
        public string updateStatus = "Fetching ";

    #endregion

    #region Popup properties

        bool PopupVisibleAddFile { get; set; }
        bool PopupVisibleDeleteFile { get; set; }

        bool PopupVisibleAddNote { get; set; }
        bool PopupVisibleDeleteNote { get; set; }

        bool PopupVisibleMakeCustomer { get; set; }
        bool PopupVisibleArchive { get; set; }

        bool PopupVisibleHelpSendFiles { get; set; }
        bool PopupVisibleHelpFileAttachments { get; set; }
        bool PopupVisibleHelpFileNotes { get; set; }

    #endregion

    #region Parameters

        [Parameter]
        public string DisplayFormat { get; set; }

        [Parameter]
        public List<string> AcceptedFileTypes { get; set; }

        [Parameter]
        public GridDetailRowDisplayMode DetailRowDisplayMode { get; set; }

        [Parameter]
        public string RefreshStatus { get; set; } = "";

        [Parameter]
        public string StatusContainerClass { get; set; } = "container-action-buttons-hide";

        [Parameter]
        public string StatusClass { get; set; } = "message-normal";

        [Parameter]
        public string ButtonText { get; set; } = "Pause Refresh";

        [Parameter]
        public string ButtonClass { get; set; } = "btn btn-outline-primary btn-refresh-active";

        [Parameter]
        public bool RefreshDisabled { get; set; } = false;

        [Parameter]
        public bool CreateLeadDisabled { get; set; } = true;

        [Parameter]
        public bool SendDocsDisabled { get; set; } = false;

        [Parameter]
        public bool CreateLeadsDisabled { get; set; } = true;

        [Parameter]
        public bool ArchiveLeadsDisabled { get; set; } = true;

        [Parameter]
        public object SelectedQuoteItem { get; set; }

        [Parameter]
        public object SelectedEventItem { get; set; }

        [Parameter]
        public int VisibleIndex { get; set; }

        [Parameter]
        public bool ClearFilterButtonVisible { get; set; }

    #endregion

    #region Methods

        protected override void OnInitialized() { }

        protected override void OnAfterRender(bool firstRender)
        {
            if (firstRender)
            {
                RefreshTimer();
            }

            GetIpAddress();
        }

        void OnRowClick(GridRowClickEventArgs args)
        {
            selectedIndex = args.VisibleIndex;
            selectedQuoteId = quotes[selectedIndex]._id;

            var selectedDetailExpanded = QuoteGrid.IsDetailRowExpanded(selectedIndex);
            if (selectedDetailExpanded)
            {
                QuoteGrid.CollapseDetailRow(selectedIndex);
                //EnableRefreshAndCreateControls(true);
            }
            else
            {
                QuoteGrid.ExpandDetailRow(selectedIndex);
                ToggleRefresh();

                EnableRefreshAndCreateControls(false);
            }
        }

        public async Task<string> GetIpAddress()
        {
            try
            {
                SubmissionUserIP = await jsRuntime.InvokeAsync<string>("getIpAddress").ConfigureAwait(true);

                return SubmissionUserIP;
            }
            catch (Exception e)
            {
                //If your request was blocked by CORS or some extension like uBlock Origin then you will get an exception.
                return string.Empty;
            }
        }

        protected void SelectedFilesChanged(IEnumerable<UploadFileInfo> files)
        {
            SelectedFilesCount = files.ToList().Count;
            InvokeAsync(StateHasChanged);
        }

        protected void EmailFiles()
        {
            var tmpVal = "";
        }

        protected string GetUploadUrl(string url)
        {
            return NavigationManager.ToAbsoluteUri(url).AbsoluteUri;
        }

        public void ArchiveLead()
        {
            QuoteGrid.CollapseDetailRow(selectedIndex);

            Note note = new Note();
            note.Summary = "Opportunity Archived";
            note.Details = @NoteDetails;

            Quote quote = quotes[selectedIndex];
            quote.notes.Add(note);

            WebServices.DeleteQuote(selectedQuoteId);

            PopupVisibleArchive = false;

            ToggleRefresh();
        }

        public void AddNote()
        {
            QuoteGrid.CollapseDetailRow(selectedIndex);

            Note note = new Note();
            note.Summary = "Note Added";
            note.Details = @NoteDetails;

            Quote quote = quotes[selectedIndex];
            quote.notes.Add(note);

            Event _event = new Event(0, 0);
            _event.Details = "Note (" + note.Details + ") added to Quote";

            quote.status = "Opportunity";
            quote.events.Add(_event);

            WebServices.UpdateQuote(quotes[selectedIndex]);

            PopupVisibleAddNote = false;
            NoteDetails = "";

            ToggleRefresh();

            QuoteGrid.ExpandDetailRow(selectedIndex);

            EnableRefreshAndCreateControls(true);
        }

        public void CloseDetails()
        {
            QuoteGrid.CollapseDetailRow(selectedIndex);
            ToggleRefresh();
            EnableRefreshAndCreateControls(true);
        }

        public void DeleteAttachment(Quote quote, Attachment attachment)
        {
            quote.attachments.Remove(attachment);

            Event _event = new Event(0, 0);
            _event.Details = "Deleted attachment (" + attachment.MediaDescription + ") from to Quote";

            quote.events.Add(_event);

            WebServices.UpdateQuote(quote);

            // PopupVisibleDeleteNote = false;

        RefreshTimer();
        }

        public void DeleteNote(Quote quote, Note note)
        {
            quote.notes.Remove(note);

            Event _event = new Event(0, 0);
            _event.Details = "Deleted note (" + note.Details + ") from Quote";

            quote.events.Add(_event);

            WebServices.UpdateQuote(quote);

            PopupVisibleDeleteNote = false;

        RefreshTimer();
        }

        public void MakeCustomer()
        {
            QuoteGrid.CollapseDetailRow(selectedIndex);

            Quote quote = quotes[selectedIndex];
            quote.status = "Customer";

            var projectManager = quote.projectManager;

            Event _event = new Event(0, 0);
            _event.Details = "Opportunity converted to Customer";

            quote.events.Add(_event);

            WebServices.UpdateQuote(quotes[selectedIndex]);

            PopupVisibleMakeCustomer = false;

            ToggleRefresh();

            EnableRefreshAndCreateControls(true);
        }

        public virtual void PauseRefresh()
        {
            CreateLeadDisabled = false;
            CreateLeadsDisabled = false;
            ArchiveLeadsDisabled = false;

            ButtonText = "Resume Refresh";
            ButtonClass = "btn btn-outline-primary btn-refresh-inactive";
            StatusClass = "message-warning";
            RefreshStatus = " Auto refresh paused...";

            _timer?.Dispose();
        }

        public virtual void ToggleRefresh()
        {
            if (ButtonText == "Pause Refresh")
            {
                CreateLeadDisabled = false;
                CreateLeadsDisabled = false;
                ArchiveLeadsDisabled = false;

                ButtonText = "Resume Refresh";
                ButtonClass = "btn btn-outline-primary btn-refresh-inactive";
                StatusClass = "message-warning";
                RefreshStatus = " Auto refresh paused...";

                _timer?.Dispose();
            }
            else
            {
                CreateLeadDisabled = true;
                CreateLeadsDisabled = true;
                ArchiveLeadsDisabled = true;

                StatusClass = "message-normal";
                RefreshStatus = "";
                ButtonText = "Pause Refresh";
                ButtonClass = "btn btn-outline-primary btn-refresh-active";

                RefreshTimer();
            }
        }

        public void Dispose()
        {
            _timer?.Dispose();           // because you need it here
        }

    private void RefreshTimer()
    {
        LoadingPanelVisible = true;

        _timer = new Timer(new TimerCallback(_ =>
        {
            quotes = webServices.GetQuotes("Opportunity");
            updateStatus = quotes.Count().ToString("N0");
            StatusContainerClass = "container-action-buttons-show";

            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }), null, 1000, 1000);

        LoadingPanelVisible = false;
    }

    #endregion
}