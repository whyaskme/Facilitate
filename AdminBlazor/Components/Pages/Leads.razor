@page "/leads"

@using AdminBlazor.Data
@using DevExpress.Data
@using DevExpress.Data.Linq
@using Facilitate.Libraries.Models
@using MongoDB.Bson

@using Microsoft.AspNetCore.Mvc

@using Json.Net

@attribute [StreamRendering(true)]
@rendermode InteractiveServer
@inject WebServices WebServices

<PageTitle>Leads</PageTitle>
<h1>@updateStatus Leads <span id="update-status" class="@StatusClass">@RefreshStatus</span></h1>

<script>
  window.getIpAddress = () => {
    return fetch('https://jsonip.com/')
      .then((response) => response.json())
      .then((data) => {
        return data.ip
      })
  }
</script>

@if (quotes == null)
{
@*     <p><em>Loading...</em></p> *@
}
else
{
        <div>
            Select row to expand details. Click column headers to sort. Type and hit enter in any empty cell to search that column. 
            <br/><br/>
            If you have grouped columns below, drag and drop the column back into the grid header to restore. 
            <br/><br/>
        </div>

        <DxGrid @ref="QuoteGrid"
            Data="@quotes" 
            KeyFieldName="_id"

            PageSize="10" 
            PagerPosition="GridPagerPosition.Bottom" 
            ShowGroupPanel="true"
            AutoExpandAllGroupRows="true"
            ShowFilterRow="true"
            CssClass="mw-1100"

            RowClick="OnRowClick"

            AllowSelectRowByClick="true"
            SelectionMode="GridSelectionMode.Single"

            @bind-SelectedDataItem="@SelectedDataItem"

            TextWrapEnabled="true"
            PagerNavigationMode="PagerNavigationMode.InputBox"
            PageSizeSelectorVisible="true"
            PageSizeSelectorAllRowsItemVisible="false"
            KeyboardNavigationEnabled="true">
            <Columns>
                <DxGridDataColumn Caption="Date" FieldName="timestamp" DisplayFormat="MM/dd/yyyy hh:mm:ss tt" SortIndex="0" SortOrder="GridColumnSortOrder.Descending" AllowSort="true" />
                <DxGridDataColumn Caption="First" FieldName="firstName" />
                <DxGridDataColumn Caption="Last" FieldName="lastName" />
                <DxGridDataColumn Caption="Street" FieldName="street" />
                <DxGridDataColumn Caption="City" FieldName="city" />
                <DxGridDataColumn Caption="State" FieldName="state" />
                <DxGridDataColumn Caption="Zip" FieldName="zip" />
                @* <DxGridDataColumn Caption="SqFt" TextAlignment="GridTextAlignment.Left" FieldName="totalSquareFeet" /> *@
            </Columns>

            <DetailRowTemplate>
            @{
                var _quote = (Quote)context.DataItem;

                notesCount = _quote.notes.Count;
                eventsCount = _quote.events.Count;

                <table class="table-detail">
                <tbody>
                    <tr>
                        <td colspan=3>
                            <h6>Homeowner</h6>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Name</label>
                            <span class="detail-item">@_quote.firstName @_quote.lastName</span>
                        </td>
                        <td>
                            <label>Email</label>
                            <a href="mailto:@_quote.email">
                                <span class="detail-item">@_quote.email</span>
                            </a>
                        </td>
                        <td>
                            <label>Phone</label>
                            <span class="detail-item">@_quote.phone</span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Address</label>
                            <a href="https://www.google.com/maps/search/@_quote.street @_quote.city, @_quote.state @_quote.zip" target="_blank">
                                @_quote.street @_quote.city, @_quote.state @_quote.zip
                            </a>
                        </td>
                        <td>
                            <label>IP</label>
                            <a href="https://whatismyipaddress.com/ip/@SubmissionUserIP" target="_blank">
                                <span class="detail-item">Location</span>
                            </a>
                        </td>
                        <td></td>
                    </tr>
                </tbody>
                </table>

                <div class="table-spacer" />

                <table class="table-detail">
                <tbody>
                    <tr>
                        <td colspan=3>
                            <h6>Project</h6>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Sqft</label>
                            <span class="detail-item">@_quote.totalSquareFeet.ToString("N0")</span>
                        </td>
                        <td>
                            <label>Roofs</label>
                            <span class="detail-item">@_quote.numberOfIncludedStructures</span>
                        </td>
                        <td></td>
                    </tr>
                    <tr>
                        <td>
                            <label>Name</label>
                            <span class="detail-item">@_quote.structures[0].name</span>
                        </td>
                        <td>
                            <label>Complexity</label>
                            <span class="detail-item">@_quote.structures[0].roofComplexity</span>
                        </td>
                        <td>
                            <label>Slope</label>
                            <span class="detail-item">@_quote.structures[0].slope</span>
                        </td>
                    </tr>
                </tbody>
                </table>

                <div class="table-spacer" />

                <table class="table-detail">
                <tbody>
                    <tr>
                        <td colspan=3>
                            <h6>Products</h6>
                        </td>
                    </tr>
                        @{
                            for (var i = 0; i < @_quote.products.Count; i++)
                            {
                                currentItem = i + 1;

                                var priceLabel = @_quote.products[i].priceInfo.priceType;
                                if (priceLabel == "BasicFinancing")
                                {
                                    priceLabel = "Basic Financing";
                                }
                                else
                                {
                                    priceLabel = @_quote.products[i].priceInfo.priceType;
                                }

                                <tr>
                                    <td>
                                        <label>Name</label>
                                        <span class="detail-item">@_quote.products[i].name</span>
                                    </td>
                                    <td>
                                        <label>Waste Factor</label>
                                        <span class="detail-item">@_quote.products[i].wasteFactorMainRoof</span>
                                    </td>
                                    <td>
                                        <label>Price Type</label>
                                        <span class="detail-item">@priceLabel</span>                               
                                    </td>
                                </tr>

                                <tr>
                                    <td>
                                        <label>Total Quote</label>
                                        <span class="detail-item">$@_quote.products[i].priceInfo.total.ToString("N0")</span>
                                    </td>
                                    <td>
                                        <label>Per Square</label>
                                        <span class="detail-item">$@_quote.products[i].priceInfo.pricePerSquare</span>
                                    </td>
                                    <td>
                                        <label>Monthly</label>
                                        <span class="detail-item">$@_quote.products[i].priceInfo.monthly</span>
                                    </td>
                                </tr>

                                <tr>
                                    <td>
                                        <label>APR</label>
                                        <span class="detail-item">@_quote.products[i].priceInfo.apr%</span>
                                    </td>
                                    <td>
                                        <label>Months</label>
                                        <span class="detail-item">@_quote.products[i].priceInfo.months</span>
                                    </td>
                                    <td></td>
                                </tr>
                            }
                        }
                </tbody>
                </table>

                <div class="table-spacer" />

                <div id="panel-notes" class="project-detail-work-panel">
                    <h6>@notesCount Notes </h6>

                    <button class="btn btn-primary doc-select-button add-item-button" @onclick="@(() => IsPopupVisibleAddNote = true)">Add Note</button>

                    <div class="item-detail-container">
                        @foreach (Note note in _quote.notes)
                        {
                            if (!note.IsDeleted)
                            {
                                <div class="note-row">
                                    <div>
                                        <label><b>@notesCount)</b> @note.Date</label>
                                    </div>

                                    <span class="hyperlink" @onclick="() => SelectNoteToDelete(_quote, note)">Delete</span>

                                    <span class="bar-spacer">|</span>
                                    <span class="detail-item">@note.Details</span>

                                    <span class="bar-spacer">|</span>
                                    <label>Author</label>
                                    <span>@Author</span>
                                </div>

                                notesCount--;
                            }
                        }
                    </div>

                </div>

                <div id="panel-events" class="project-detail-work-panel">
                    <h6>@eventsCount History Events</h6>
                    <div class="item-detail-container">
                        @foreach (Event _event in _quote.events)
                        {
                            <div class="note-row">
                                <div class="">
                                    <label><b>@eventsCount)</b> @_event.DateTime</label>
                                </div>

                                <span class="bar-spacer">|</span>
                                <span class="detail-item">@_event.Details</span>

                                <span class="bar-spacer">|</span>
                                <label>Author</label>
                                <span>@Author</span>
                            </div>

                            eventsCount--;
                        }
                    </div>
                </div>

                <div id="panel-origin" class="project-detail-work-panel">
                    <table id="table-origin" class="table-detail">
                        <tbody>

                            <tr>
                                <td>
                                    <label>Market</label>
                                    <span class="detail-item">@_quote.market</span>
                                </td>
                                <td>
                                    <label>Rep Name</label>
                                    <span class="detail-item">@_quote.repLead</span>
                                </td>
                                <td>
                                    <label>Rep Email</label>
                                    <a href="mailto:@_quote.repEmail">
                                        <span class="detail-item">@_quote.repEmail</span>
                                    </a>
                                </td>
                            </tr>

                            <tr>
                                <td>
                                    <label>RecId</label>
                                    <span class="detail-item">@_quote._id</span>
                                </td>
                                <td>
                                    <label>Referrer</label>
                                    <a href="@_quote.externalUrl" target="_blank">
                                        <span class="detail-item">@_quote.externalUrl</span>
                                    </a>
                                </td>
                                <td>
                                    <label>Session</label>
                                    <span class="detail-item">@_quote.sessionId</span>
                                </td>
                            </tr>

                            <tr>
                                <td>
                                    <label>RefId</label>
                                    <span class="detail-item">@_quote.leadId</span>
                                </td>
                                <td>
                                    <label>Created</label>
                                    <span class="detail-item">@_quote.timestamp</span>
                                </td>
                                <td>
                                </td>

                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="quote-detail-controls-container">
                    <button class="btn btn-primary" @onclick="@(() => IsAssignPopupVisible = true)">Assign</button>
                    <button class="btn btn-primary" @onclick="@(() => IsArchivePopupVisible = true)">Archive</button>
                    <button class="btn btn-primary" @onclick="CloseDetails">Close</button>
                </div>

            }
            </DetailRowTemplate>

        </DxGrid>
}

<div class="@StatusContainerClass">
    <button class="@ButtonClass" disabled="@RefreshDisabled" @onclick="ToggleRefresh">@ButtonText</button>
    <button class="btn btn-primary" disabled="@CreateLeadDisabled" @onclick="CreateLead">Create 1 Lead</button>
    <button class="btn btn-primary" disabled="@CreateLeadsDisabled" @onclick="CreateLeads">Create @itemsToCreate Leads</button>
</div>

<DxPopup @bind-Visible="@IsPopupVisibleAddNote" ShowFooter="true" HeaderText="Add Note">
    <BodyContentTemplate>
        <p>Please type in your notes below.</p>
        <DxMemo @bind-Text="@NoteDetails" InputId="archive-reason" CssClass="cw-320" />
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton SubmitFormOnClick="true" CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="Save" Click="AddNote" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsPopupVisibleAddNote = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxLoadingPanel @bind-Visible=@LoadingPanelVisible
                PositionTarget="body"
                ApplyBackgroundShading="true"
                CssClass="w-100">
</DxLoadingPanel>

<DxPopup
    @bind-Visible="@IsAssignPopupVisible"
    ShowFooter="true"
         HeaderText="Please select a Project Manager for assignment">
    <BodyContentTemplate>
        <div>
            <DxListBox 
                Data="@ProjectManagers" 
                @bind-Values="@Values"
                SelectedItemsChanged="@((IEnumerable<User> values) => SelectedProjectManagerChanged(values))"
                SelectionMode="ListBoxSelectionMode.Single"
                ShowCheckboxes="true">
                <Columns>
                    <DxListEditorColumn FieldName="Profile.FirstName" Caption="First" />
                    <DxListEditorColumn FieldName="Profile.LastName" Caption="Last" />
                    <DxListEditorColumn FieldName="Email" Caption="Email" />
                    <DxListEditorColumn FieldName="_id" Visible="false" Caption="Id" />
                </Columns>
            </DxListBox>
        </div>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="Save" Click="AssignLead" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsAssignPopupVisible = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup
    @bind-Visible="@IsArchivePopupVisible"
    ShowFooter="true"
         HeaderText="Please type in a reason for Archival below">
    <BodyContentTemplate>
        <DxMemo @bind-Text="@NoteDetails" InputId="archive-reason" CssClass="cw-320" />
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton SubmitFormOnClick="true" CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="Archive" Click="ArchiveLead" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsArchivePopupVisible = false)" />
    </FooterContentTemplate>
</DxPopup>


@code {

    public int attachmentsCount = 0;
    public int notesCount = 0;
    public int eventsCount = 0;

    public Note selectedNote { get; set; }



    public void SelectNoteToDelete(Quote quote, Note note)
    {
        selectedQuote = quote;
        selectedNote = note;

        IsPopupVisibleSelectNoteToDelete = true;
    }

    public Quote selectedQuote { get; set; }

    bool LoadingPanelVisible { get; set; } = true;

    string Author { get; set; } = "Unknown";

    WebServices webServices = new WebServices();

    IEnumerable<string> Values { get; set; }

    IEnumerable<User> SelectedProjectManager { get; set; }

    [Parameter]
    public EventCallback<IEnumerable<User>> SelectedItemsChanged { get; set; }

    void SelectedProjectManagerChanged(IEnumerable<User> selectedProjectManager)
    {
        SelectedProjectManager = selectedProjectManager;
    }
    bool IsPopupVisibleAddNote { get; set; }

    bool IsPopupVisibleSelectNoteToDelete { get; set; }
    AdminBlazor.Data.MemberService memberService = new AdminBlazor.Data.MemberService();

    public List<User>? ProjectManagers;

    string NoteDetails { get; set; } = "";

    public void ArchiveLead()
    {
        selectedQuote.status = "Archive";

        QuoteGrid.CollapseDetailRow(selectedIndex);

        Note note = new Note();
        note.Summary = selectedQuote.firstName + " " + selectedQuote.lastName + " moved to Archives";
        note.Details = @NoteDetails;

        selectedQuote.notes.Add(note);

        Event _event = new Event(0, 0);
        _event.Details = selectedQuote.firstName + " " + selectedQuote.lastName + " moved to Archives";

        selectedQuote.events.Add(_event);

        WebServices.UpdateQuote(selectedQuote);

        IsArchivePopupVisible = false;

        PauseRefresh(false);
    }

    public void AddNote()
    {
        QuoteGrid.CollapseDetailRow(selectedIndex);

        Note note = new Note();
        note.Summary = "Note Added";
        note.Details = @NoteDetails;

        selectedQuote.notes.Add(note);

        Event _event = new Event(0, 0);
        _event.Details = "Note (" + note.Details + ") added to Quote";

        selectedQuote.events.Add(_event);

        WebServices.UpdateQuote(selectedQuote);

        IsPopupVisibleAddNote = false;
        NoteDetails = "";

        QuoteGrid.ExpandDetailRow(selectedIndex);

        PauseRefresh(false);
    }

    [Parameter]
    public bool SubmitFormOnClick { get; set; }

    bool IsAssignPopupVisible { get; set; }
    bool IsArchivePopupVisible { get; set; }

    [Inject] public IJSRuntime jsRuntime { get; set; }

    [Parameter]
    public string DisplayFormat { get; set; }

    public string ClientIP = "";
    public string selectedQuoteId = "";

    public async Task<string> GetIpAddress()
    {
        try
        {
            SubmissionUserIP = await jsRuntime.InvokeAsync<string>("getIpAddress").ConfigureAwait(true);

            return SubmissionUserIP;
        }
        catch (Exception e)
        {
            //If your request was blocked by CORS or some extension like uBlock Origin then you will get an exception.
            return string.Empty;
        }
    }

    [Parameter]
    public GridDetailRowDisplayMode DetailRowDisplayMode { get; set; }

    [Parameter]
    public string RefreshStatus { get; set; } = "";

    [Parameter]
    public string StatusContainerClass { get; set; } = "container-action-buttons-hide";

    [Parameter]
    public string StatusClass { get; set; } = "message-normal";

    [Parameter]
    public string ButtonText { get; set; } = "Pause Refresh";

    [Parameter]
    public string ButtonClass { get; set; } = "btn btn-outline-primary btn-refresh-active";

    [Parameter]
    public bool RefreshDisabled { get; set; } = false;

    [Parameter]
    public bool CreateLeadDisabled { get; set; } = true;

    [Parameter]
    public bool CreateLeadsDisabled { get; set; } = true;

    [Parameter]
    public bool ArchiveLeadsDisabled { get; set; } = true;

    [Parameter]
    public object SelectedDataItem { get; set; }

    [Parameter]
    public int VisibleIndex { get; set; }

    [Parameter]
    public bool ClearFilterButtonVisible { get; set; }

    IGrid QuoteGrid { get; set; }
    EntityInstantFeedbackSource InstantFeedbackSource { get; set; }

    public interface IQueryable : System.Collections.IEnumerable;

    public int currentItem = 0;
    public int selectedIndex = 0;

    public string SubmissionUserIP { get; set; }

    protected override void OnInitialized(){}

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ProjectManagers = memberService.GetMembers(Constants.UserRoles.ProjectManager);
            RefreshTimer();
        }

        GetIpAddress();
    }

    public virtual void PauseRefresh(bool isPaused)
    {
        RefreshDisabled = isPaused;

        CreateLeadDisabled = isPaused;
        CreateLeadsDisabled = isPaused;

        if (isPaused)
        {
            RefreshDisabled = false;

            CreateLeadDisabled = false;
            CreateLeadsDisabled = false;

            ButtonText = "Resume Refresh";
            ButtonClass = "btn btn-outline-primary btn-refresh-inactive";
            StatusClass = "message-warning";
            RefreshStatus = " Auto refresh paused...";

            _timer?.Dispose();
        }
        else
        {
            CreateLeadDisabled = true;
            CreateLeadsDisabled = true;

            ButtonText = "Pause Refresh";
            ButtonClass = "btn btn-outline-primary btn-refresh-active";
            StatusClass = "message";
            RefreshStatus = "";

            RefreshTimer();
        }
    }

    public virtual void ToggleRefresh()
    {
        if (ButtonText == "Pause Refresh")
        {
            PauseRefresh(true);
        }
        else
        {
            PauseRefresh(false);
        }

        RefreshDisabled = false;
    }

    void OnRowClick(GridRowClickEventArgs args)
    {
        selectedIndex = args.VisibleIndex;
        selectedQuote = quotes[selectedIndex];

        var selectedDetailExpanded = QuoteGrid.IsDetailRowExpanded(selectedIndex);
        if (selectedDetailExpanded)
        {
            QuoteGrid.CollapseDetailRow(selectedIndex);

            PauseRefresh(false);
        }
        else
        {
            QuoteGrid.CollapseAllDetailRows();
            QuoteGrid.ExpandDetailRow(selectedIndex);

            PauseRefresh(true);

            RefreshDisabled = true;
            CreateLeadDisabled = true;
            CreateLeadsDisabled = true;
        }
    }

    public void CloseDetails()
    {
        QuoteGrid.CollapseDetailRow(selectedIndex);

        PauseRefresh(false);
    }

    public void AssignLead()
    {
        LoadingPanelVisible = true;

        QuoteGrid.CollapseDetailRow(selectedIndex);

        selectedQuote.status = "Opportunity";

        Event statusChanged = new Event(0, 0);
        statusChanged.Details = selectedQuote.firstName + " " + selectedQuote.lastName + " converted to Opportunity";
        selectedQuote.events.Add(statusChanged);

        var currProjectManager = SelectedProjectManager.ToList()[0];

        var pmEmail = currProjectManager.Profile.Contact.Email[0].UserName;
        pmEmail += "@" + currProjectManager.Profile.Contact.Email[0].Domain;

        var pmPhone = "(" + currProjectManager.Profile.Contact.Phone[0].AreaCode.ToString() + ")";
        pmPhone += " " + currProjectManager.Profile.Contact.Phone[0].Exchange.ToString();
        pmPhone += "-" + currProjectManager.Profile.Contact.Phone[0].Number.ToString();

        ProjectManagerSummary pmSummary = new ProjectManagerSummary();
        pmSummary._id = currProjectManager._id;
        pmSummary.Name = currProjectManager.Profile.FirstName + " " + currProjectManager.Profile.LastName;
        pmSummary.Email = pmEmail;
        pmSummary.Phone = pmPhone;
        pmSummary.City = currProjectManager.Profile.Contact.Address[0].City;
        pmSummary.State = currProjectManager.Profile.Contact.Address[0].State;
        pmSummary.Zip = currProjectManager.Profile.Contact.Address[0].ZipCode;

        selectedQuote.projectManager = pmSummary;

        // Workflow and Subsequent Document Requirements
        Attachment workflowRequirements = new Attachment();
        workflowRequirements.MediaDescription = "Workflow and Subsequent Document Requirements";
        workflowRequirements.MediaUrl = "/docs/templates/misc/Workflow and Subsequent Document Requirements.pdf";
        selectedQuote.attachments.Add(workflowRequirements);

        Event workflowRequirementsEvent = new Event(0, 0);
        workflowRequirementsEvent.Details = workflowRequirements.MediaDescription + " sent to " + selectedQuote.email;
        selectedQuote.events.Add(workflowRequirementsEvent);

        // Facilitate Engagement Agreement
        Attachment engagementAgreement = new Attachment();
        engagementAgreement.MediaDescription = "Facilitate Engagement Agreement";
        engagementAgreement.MediaUrl = "/docs/templates/agreements/Facilitate Engagement Agreement.docx";
        selectedQuote.attachments.Add(engagementAgreement);

        Event engagementAgreementEvent = new Event(0, 0);
        engagementAgreementEvent.Details = engagementAgreement.MediaDescription + " sent to " + selectedQuote.email;
        selectedQuote.events.Add(engagementAgreementEvent);

        // Welcome Letter
        Attachment welcomeLetter = new Attachment();
        welcomeLetter.MediaDescription = "Welcome to Facilitate.org";
        welcomeLetter.MediaUrl = "/docs/templates/boilerplate/Welcome to Facilitate.docx";
        selectedQuote.attachments.Add(welcomeLetter);

        Event welcomeLetterEvent = new Event(0, 0);
        welcomeLetterEvent.Details = welcomeLetter.MediaDescription + " sent to " + selectedQuote.email;
        selectedQuote.events.Add(welcomeLetterEvent);

        // Assignment event
        var projectManager = selectedQuote.projectManager;
        Event assignmentEvent = new Event(0, 0);
        assignmentEvent.Details = "Lead assigned to Project Manager Id: " + projectManager._id + " (" + projectManager.Name + "), moved to Opportunities and emailed to: " + projectManager.Email;
        selectedQuote.events.Add(assignmentEvent);

        WebServices.UpdateQuote(selectedQuote);

        //LoadingPanelVisible = false;

        IsAssignPopupVisible = false;

        PauseRefresh(false);
    }

    private List<Quote>? quotes;

    public int itemsToCreate = 100;
    public string updateStatus = "Fetching ";

    public Timer _timer;

    public void Dispose()
    {
        _timer?.Dispose();           // because you need it here
    }

    private void RefreshTimer()
    {
        LoadingPanelVisible = true;

        _timer = new Timer(new TimerCallback(_ =>
        {
            quotes = webServices.GetQuotes("New");
            updateStatus = quotes.Count().ToString("N0");
            StatusContainerClass = "container-action-buttons-show";

            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }), null, 1000, 1000);

        LoadingPanelVisible = false; 
    }

    private void CreateLeads()
    {
        Quote quote = new Quote();

        for (var i = 0; i < itemsToCreate; i++)
        {
            updateStatus = "Creating ";
            CreateLead();
        }

        var results = string.Empty;

        try
        {
            WebServices.CreateQuote(quote);
            results = "POSTED";
        }
        catch (Exception ex)
        {
            results = ex.Message;
        }
        finally
        {
            PauseRefresh(false);
        }

        PauseRefresh(false);
    }

    private void ArchiveLeads()
    {
        updateStatus = "Deleting...";
    }

    #region Create 1 Lead
    private void CreateLead()
    {
        updateStatus = "Creating ";

        List<String> nameGenders = new List<string>();
        nameGenders.Add("male");
        nameGenders.Add("female");

        Quote quote = new Quote();
        quote.status = "New";

        quote.ipAddress = SubmissionUserIP;

        Utils utils = new Utils();

        var randomStreetNumber = utils.GetRandomStreetNumber();
        var randomStreetName = utils.GetRandomStreetName();

        var randomState = utils.GetRandomState();
        var stateName = randomState[0];
        var stateAbbr = randomState[1];
        var stateId = randomState[2];

        var randomCity = utils.GetRandomCity(MongoDB.Bson.ObjectId.Parse(stateId));

        string cityId = randomCity[0];
        string cityName = randomCity[1];
        string cityCountyId = randomCity[2];
        string cityTimeZoneId = randomCity[3];

        var randomZipCode = utils.GetRandomZipCode(MongoDB.Bson.ObjectId.Parse(cityId)).ToString();

        quote.address = randomStreetNumber + " " + randomStreetName + ", " + cityName + ", " + stateAbbr + " " + randomZipCode;
        quote.fullAddress = quote.address;
        quote.street = randomStreetNumber + " " + randomStreetName;
        quote.city = cityName;
        quote.state = stateAbbr;
        quote.zip = randomZipCode;

        Random rnd = new Random();
        int randomInt = rnd.Next(0, 1);

        quote.firstName = utils.GetRandomFirstName(nameGenders[randomInt]);
        quote.lastName = utils.GetRandomLastName();

        quote.email = quote.firstName.ToLower() + "@" + quote.lastName.ToLower() + ".com";
        quote.phone = "(" + utils.GetRandomAreaCode() + ") " + utils.GetRandomHomePhoneNumber();
        quote.market = quote.city + ", " + quote.state;
        quote.externalUrl = "https://app.roofle.com/dashboard";

        randomInt = rnd.Next(1, 3);
        quote.numberOfStructures = randomInt;
        quote.numberOfIncludedStructures = quote.numberOfStructures;

        randomInt = rnd.Next(1150, 5200);
        quote.totalSquareFeet = randomInt;
        quote.mainRoofTotalSquareFeet = randomInt;
        quote.totalInitialSquareFeet = randomInt;

        quote.sessionId = "nH9YvHwoBldl2ZkpQSWrX";

        // Add Product Info
        Product product = new Product();
        product.name = "Certainteed Landmark";
        product.id = 1;

        PriceInfo _priceInfo = new PriceInfo();
        _priceInfo.priceType = "BasicFinancing";

        randomInt = rnd.Next(15069, 15069);
        _priceInfo.total = randomInt;

        randomInt = rnd.Next(401, 401);
        _priceInfo.pricePerSquare = randomInt;

        randomInt = rnd.Next(250, 400);
        _priceInfo.monthly = randomInt;

        randomInt = rnd.Next(8, 26);
        _priceInfo.apr = randomInt;

        randomInt = rnd.Next(180, 180);
        _priceInfo.months = randomInt;

        product.priceInfo = _priceInfo;

        PriceRange _priceRange = new PriceRange();
        randomInt = rnd.Next(1150, 5200);
        _priceRange.totalMin = randomInt;

        randomInt = rnd.Next(16575, 16575);
        _priceRange.totalMax = randomInt;

        randomInt = rnd.Next(300, 300);
        _priceRange.monthlyMin = randomInt;

        randomInt = rnd.Next(367, 367);
        _priceRange.monthlyMax = randomInt;

        product.priceRange = _priceRange;

        product.wasteFactorMainRoof = 1.2;

        quote.products = null;
        quote.products = new List<Product>();
        quote.products.Add(product);

        randomInt = rnd.Next(0, 1);
        var repName = utils.GetRandomFirstName(nameGenders[randomInt]) + " " + utils.GetRandomLastName();

        quote.repLead = repName;
        quote.repEmail = repName.Replace(" ", ".").ToLower() + "@facilitate.org";

        randomInt = rnd.Next(5000, 9999);
        quote.leadId = randomInt;

        // Add Structure Info
        Structure structure = new Structure();
        structure.name = "Main Roof";
        structure.slope = "medium";
        structure.isIncluded = true;
        structure.squareFeet = quote.totalSquareFeet;
        structure.initialSquareFeet = quote.totalSquareFeet;
        structure.roofComplexity = "Simple";

        quote.structures = null;
        quote.structures = new List<Structure>();
        quote.structures.Add(structure);

        var deviceType = "Desktop";
        var latitude = 0;
        var longitude = 0;

        Event _event = new Event(0,0);
        _event.Name = "New Quote";
        _event.DateTime = DateTime.UtcNow;
        _event.Reference.ReferenceId = ObjectId.Parse(quote._id);
        _event.Reference.ReferenceType = 0;
        _event.Details = "New quote referred by Roofle";

        Location location = new Location(ObjectId.Parse(quote._id), deviceType, ClientIP, latitude, longitude);
        _event.Location = location;

        quote.events.Add(_event);

        var results = string.Empty;

        try
        {
            WebServices.CreateQuote(quote);
            results = "POSTED";
        }
        catch (Exception ex)
        {
            results = ex.Message;
        }
        finally
        {
            PauseRefresh(false);
        }
    }
    #endregion
}