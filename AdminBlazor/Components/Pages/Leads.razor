@page "/leads"

@using AdminBlazor.Data
@using Facilitate.Libraries.Models;

@attribute [StreamRendering(true)]
@rendermode InteractiveServer
@inject QuoteService QuoteService

<PageTitle>Leads</PageTitle>
<h1>@updateStatus Leads</h1>

@if (quotes == null)
{
    <p><em>Loading...</em></p>
}
else
{
        <DxGrid Data="@quotes" PageSize="5" PagerPosition="GridPagerPosition.Bottom" CssClass="mw-1100" >
        <Columns>
            <DxGridDataColumn Caption="#" FieldName="" Width="50px" TextAlignment="GridTextAlignment.Left" />
            <DxGridDataColumn Caption="View" FieldName="" Width="50px" TextAlignment="GridTextAlignment.Left" />
            <DxGridDataColumn Caption="Date" FieldName="timestamp" DisplayFormat="D" SortIndex="0" AllowSort="true" />
            <DxGridDataColumn Caption="First" FieldName="firstName" />
            <DxGridDataColumn Caption="Last" FieldName="lastName" />
            <DxGridDataColumn Caption="Email" FieldName="email" />
            <DxGridDataColumn Caption="Phone" FieldName="phone" />
            <DxGridDataColumn Caption="Street" FieldName="street" />
            <DxGridDataColumn Caption="City" FieldName="city" />
            <DxGridDataColumn Caption="State" FieldName="state" />
            <DxGridDataColumn Caption="Zip" FieldName="zip" />
        </Columns>
    </DxGrid>
}

<br /><br />
<hr />

<button class="btn btn-primary" @onclick="CreateLead">Create 1 Lead</button>
<button class="btn btn-primary" @onclick="CreateLeads">Create 50 Leads</button>
<button class="btn btn-primary" @onclick="DeleteLeads">Delete Leads</button>

@code {

    public string updateStatus = "Fetching...";

    public Leads()
    {
        var timer = new Timer(new TimerCallback(_ =>
        {
            quotes = QuoteService.GetQuotes();
            updateStatus = quotes.Count().ToString();

            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }), null, 1000, 1000);
    }

    private IEnumerable<Quote>? quotes;

    #region Create 1 Lead
    private void CreateLead()
    {
        updateStatus = "Creating ";

        Quote quote = new Quote();

        Utils utils = new Utils();

        quote.address = "2155 Old Highway 8, New Brighton, Minnesota 55112";
        quote.fullAddress = "2155 Old Highway 8, New Brighton, Minnesota 55112";
        quote.street = "2155 Old Highway 8";
        quote.city = "New Brighton";
        quote.state = "Minnesota";
        quote.zip = "55112";

        quote.firstName = utils.GetRandomFirstName("female");

        quote.lastName = "Owner";
        quote.email = "help@roofle.com";
        quote.phone = "(612) 255-8200";
        quote.market = "Minneapolis-St. Paul, MN";
        quote.externalUrl = "https://app.roofle.com/dashboard";
        quote.timestamp = DateTime.Now.ToLongDateString();
        quote.numberOfStructures = 1;
        quote.numberOfIncludedStructures = 1;
        quote.totalSquareFeet = 1369;
        quote.mainRoofTotalSquareFeet = 1369;
        quote.totalInitialSquareFeet = 1369;
        quote.sessionId = "nH9YvHwoBldl2ZkpQSWrX";

        // Add Product Info
        Facilitate.Libraries.Models.Product product = new Facilitate.Libraries.Models.Product();
        product.name = "Certainteed Landmark";
        product.id = 1;

        Facilitate.Libraries.Models.PriceInfo _priceInfo = new Facilitate.Libraries.Models.PriceInfo();
        _priceInfo.priceType = "BasicFinancing";
        _priceInfo.total = 15069.5;
        _priceInfo.pricePerSquare = 401;
        _priceInfo.monthly = 334;
        _priceInfo.apr = 26.1;
        _priceInfo.months = 180;
        product.priceInfo = _priceInfo;

        Facilitate.Libraries.Models.PriceRange _priceRange = new Facilitate.Libraries.Models.PriceRange();
        _priceRange.totalMin = 13562;
        _priceRange.totalMax = 16575;
        _priceRange.monthlyMin = 300;
        _priceRange.monthlyMax = 367;
        product.priceRange = _priceRange;

        product.wasteFactorMainRoof = 1.2;

        quote.products = null;
        quote.products = new List<Product>();
        quote.products.Add(product);

        quote.repLead = "Matt Roofer";
        quote.repEmail = "admin@facilitate.org";
        quote.leadId = 123;

        // Add Structure Info
        Structure structure = new Structure();
        structure.name = "Main Roof";
        structure.slope = "medium";
        structure.isIncluded = true;
        structure.squareFeet = 1369;
        structure.initialSquareFeet = 1369;
        structure.roofComplexity = "Simple";

        quote.structures = null;
        quote.structures = new List<Structure>();
        quote.structures.Add(structure);

        var results = string.Empty;

        try
        {
            QuoteService.CreateQuote(quote);
            results = "POSTED";
        }
        catch (Exception ex)
        {
            results = ex.Message;
        }
        finally
        {

        }
    }
    #endregion

    private void CreateLeads()
    {
        for(var i = 0; i < 50; i++)
        {
            updateStatus = "Creating ";

            Quote quote = new Quote();

            quote.address = "2155 Old Highway 8, New Brighton, Minnesota 55112";
            quote.fullAddress = "2155 Old Highway 8, New Brighton, Minnesota 55112";
            quote.street = "2155 Old Highway 8";
            quote.city = "New Brighton";
            quote.state = "Minnesota";
            quote.zip = "55112";
            quote.firstName = "Home";
            quote.lastName = "Owner";
            quote.email = "help@roofle.com";
            quote.phone = "(612) 255-8200";
            quote.market = "Minneapolis-St. Paul, MN";
            quote.externalUrl = "https://app.roofle.com/dashboard";
            quote.timestamp = DateTime.Now.ToLongDateString();
            quote.numberOfStructures = 1;
            quote.numberOfIncludedStructures = 1;
            quote.totalSquareFeet = 1369;
            quote.mainRoofTotalSquareFeet = 1369;
            quote.totalInitialSquareFeet = 1369;
            quote.sessionId = "nH9YvHwoBldl2ZkpQSWrX";

            // Add Product Info
            Facilitate.Libraries.Models.Product product = new Facilitate.Libraries.Models.Product();
            product.name = "Certainteed Landmark";
            product.id = 1;

            Facilitate.Libraries.Models.PriceInfo _priceInfo = new Facilitate.Libraries.Models.PriceInfo();
            _priceInfo.priceType = "BasicFinancing";
            _priceInfo.total = 15069.5;
            _priceInfo.pricePerSquare = 401;
            _priceInfo.monthly = 334;
            _priceInfo.apr = 26.1;
            _priceInfo.months = 180;
            product.priceInfo = _priceInfo;

            Facilitate.Libraries.Models.PriceRange _priceRange = new Facilitate.Libraries.Models.PriceRange();
            _priceRange.totalMin = 13562;
            _priceRange.totalMax = 16575;
            _priceRange.monthlyMin = 300;
            _priceRange.monthlyMax = 367;
            product.priceRange = _priceRange;

            product.wasteFactorMainRoof = 1.2;

            quote.products = null;
            quote.products = new List<Product>();
            quote.products.Add(product);

            quote.repLead = "Matt Roofer";
            quote.repEmail = "admin@facilitate.org";
            quote.leadId = 123;

            // Add Structure Info
            Structure structure = new Structure();
            structure.name = "Main Roof";
            structure.slope = "medium";
            structure.isIncluded = true;
            structure.squareFeet = 1369;
            structure.initialSquareFeet = 1369;
            structure.roofComplexity = "Simple";

            quote.structures = null;
            quote.structures = new List<Structure>();
            quote.structures.Add(structure);

            var results = string.Empty;

            try
            {
                QuoteService.CreateQuote(quote);
                results = "POSTED";
            }
            catch (Exception ex)
            {
                results = ex.Message;
            }
            finally
            {

            }
        }
    }

    private void DeleteLeads()
    {
        updateStatus = "Deleting...";


        // var response = serviceClient.DeleteAsync("Quotes");

        // updateStatus = "Deleted!";
    }
}