@page "/leads"

@using AdminBlazor.Data
@using Facilitate.Libraries.Models;

@attribute [StreamRendering(true)]
@rendermode InteractiveServer
@inject QuoteService QuoteService

<PageTitle>Leads</PageTitle>
<h1>@updateStatus Leads</h1>

@if (quotes == null)
{
    <p><em>Loading...</em></p>
}
else
{
        <DxGrid Data="@quotes" PageSize="5" PagerPosition="GridPagerPosition.Bottom" CssClass="mw-1100" >
        <Columns>
            <DxGridDataColumn Caption="#" FieldName="" Width="50px" TextAlignment="GridTextAlignment.Left" />
            <DxGridDataColumn Caption="View" FieldName="" Width="50px" TextAlignment="GridTextAlignment.Left" />
            <DxGridDataColumn Caption="Date" FieldName="timestamp" DisplayFormat="D" SortIndex="0" AllowSort="true" />
            <DxGridDataColumn Caption="First" FieldName="firstName" />
            <DxGridDataColumn Caption="Last" FieldName="lastName" />
            <DxGridDataColumn Caption="Email" FieldName="email" />
            <DxGridDataColumn Caption="Phone" FieldName="phone" />
            <DxGridDataColumn Caption="Street" FieldName="street" />
            <DxGridDataColumn Caption="City" FieldName="city" />
            <DxGridDataColumn Caption="State" FieldName="state" />
            <DxGridDataColumn Caption="Zip" FieldName="zip" />
        </Columns>
    </DxGrid>
}

<br /><br />
<hr />

<button class="btn btn-primary" @onclick="CreateLead">Create 1 Lead</button>
<button class="btn btn-primary" @onclick="CreateLeads">Create 50 Leads</button>
<button class="btn btn-primary" @onclick="DeleteLeads">Delete Leads</button>

@code {

    public string updateStatus = "Fetching...";

    public Leads()
    {
        var timer = new Timer(new TimerCallback(_ =>
        {
            quotes = QuoteService.GetQuotes();
            updateStatus = quotes.Count().ToString();

            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }), null, 1000, 1000);
    }

    private IEnumerable<Quote>? quotes;

    #region Create 1 Lead
    private void CreateLead()
    {
        updateStatus = "Creating ";

        List<String> nameGenders = new List<string>();
        nameGenders.Add("male");
        nameGenders.Add("female");

        Quote quote = new Quote();

        Utils utils = new Utils();

        var randomStreetNumber = utils.GetRandomStreetNumber();
        var randomStreetName = utils.GetRandomStreetName();

        var randomState = utils.GetRandomState();
        var stateName = randomState[0];
        var stateId = randomState[1];

        var randomCity = utils.GetRandomCity(MongoDB.Bson.ObjectId.Parse("52ade0932b0b6d13f88c4e8d"));
        var randomZipCode = utils.GetRandomZipCode().ToString();

        quote.address = randomStreetNumber + " " + randomStreetName + ", " + randomCity + ", " + stateName + " " + randomZipCode;
        quote.fullAddress = quote.address;
        quote.street = randomStreetNumber + " " + randomStreetName;
        quote.city = randomCity;
        quote.state = stateName;
        quote.zip = randomZipCode;

        Random rnd = new Random();
        int randomRecordNumber = rnd.Next(0, 1);

        quote.firstName = utils.GetRandomFirstName(nameGenders[randomRecordNumber]);
        quote.lastName = utils.GetRandomLastName();

        quote.email = quote.firstName.ToLower() + "@facilitate.org";
        quote.phone = "(612) 255-8200";
        quote.market = quote.city + ", " + quote.state;
        quote.externalUrl = "https://app.roofle.com/dashboard";
        quote.timestamp = DateTime.Now.ToLongDateString();

        randomRecordNumber = rnd.Next(1, 3);
        quote.numberOfStructures = randomRecordNumber;
        quote.numberOfIncludedStructures = quote.numberOfStructures;

        randomRecordNumber = rnd.Next(1150, 5200);
        quote.totalSquareFeet = randomRecordNumber;
        quote.mainRoofTotalSquareFeet = randomRecordNumber;
        quote.totalInitialSquareFeet = randomRecordNumber;

        quote.sessionId = "nH9YvHwoBldl2ZkpQSWrX";

        // Add Product Info
        Product product = new Product();
        product.name = "Certainteed Landmark";
        product.id = 1;

        PriceInfo _priceInfo = new PriceInfo();
        _priceInfo.priceType = "BasicFinancing";
        _priceInfo.total = 15069.5;
        _priceInfo.pricePerSquare = 401;
        _priceInfo.monthly = 334;
        _priceInfo.apr = 26.1;
        _priceInfo.months = 180;
        product.priceInfo = _priceInfo;

        PriceRange _priceRange = new PriceRange();
        _priceRange.totalMin = 13562;
        _priceRange.totalMax = 16575;
        _priceRange.monthlyMin = 300;
        _priceRange.monthlyMax = 367;
        product.priceRange = _priceRange;

        product.wasteFactorMainRoof = 1.2;

        quote.products = null;
        quote.products = new List<Product>();
        quote.products.Add(product);

        quote.repLead = "Matthew Lamz";
        quote.repEmail = "admin@facilitate.org";

        randomRecordNumber = rnd.Next(5000, 9999);
        quote.leadId = randomRecordNumber;

        // Add Structure Info
        Structure structure = new Structure();
        structure.name = "Main Roof";
        structure.slope = "medium";
        structure.isIncluded = true;
        structure.squareFeet = quote.totalSquareFeet;
        structure.initialSquareFeet = quote.totalSquareFeet;
        structure.roofComplexity = "Simple";

        quote.structures = null;
        quote.structures = new List<Structure>();
        quote.structures.Add(structure);

        var results = string.Empty;

        try
        {
            QuoteService.CreateQuote(quote);
            results = "POSTED";
        }
        catch (Exception ex)
        {
            results = ex.Message;
        }
        finally
        {

        }
    }
    #endregion

    private void CreateLeads()
    {
        for(var i = 0; i < 50; i++)
        {
            updateStatus = "Creating ";
            CreateLead();
        }
    }

    private void DeleteLeads()
    {
        updateStatus = "Deleting...";


        // var response = serviceClient.DeleteAsync("Quotes");

        // updateStatus = "Deleted!";
    }
}