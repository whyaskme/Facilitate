@page "/leaddetails"

@* @page "/leaddetails/{leadId:string?}" *@

@inject NavigationManager NavManager

@rendermode InteractiveServer

@attribute [StreamRendering]

@using Facilitate.Libraries.Models;

@using System;
@using System.Net.Http;
@using System.Net.Http.Headers;
@using System.Text.Json;
@using System.Threading.Tasks;

@using Microsoft.AspNetCore.Builder;
@using Microsoft.AspNetCore.Hosting;
@using Microsoft.AspNetCore.Components.Server;
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.WebUtilities;

@using Newtonsoft.Json;
@using Newtonsoft.Json.Serialization;
@using Amazon.Auth.AccessControlPolicy;
@using Newtonsoft.Json.Linq;

@using System.Globalization;
@using System.Threading;

@using MongoDB.Driver;
@using MongoDB.Bson;
@using Libraries.Models;

<script src="javascript/Facilitate-Scripts.js"></script> 

<h1>Lead Details</h1>

<p role="status">LeadId: <span style="color: #1f6339; font-weight: bold;">@updateStatus</span></p>


<table class="table">
    <thead>
        <tr>
            <th>Status</th>
            <th>Date</th>
            <th>First</th>
            <th>Last</th>
            <th>Email</th>
            <th>Phone</th>
            <th>Street</th>
            <th>City</th>
            <th>State</th>
            <th>Zip</th>
            <th>Structs</th>
            <th>SqFt</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>New</td>
            <td>@_quote.timestamp.ToString()</td>
            <td>@_quote.firstName</td>
            <td>@_quote.lastName</td>
            <td>@_quote.email</td>
            <td>@_quote.phone</td>
            <td>@_quote.street</td>
            <td>@_quote.city</td>
            <td>@_quote.state</td>
            <td>@_quote.zip</td>
            <td>@_quote.numberOfStructures</td>
            <td>@_quote.mainRoofTotalSquareFeet</td>
        </tr>

    </tbody>
</table>

<br /><br />
<hr />
<button class="btn btn-primary" @onclick="DeleteLead">Delete Lead</button>

@code {

    public LeadDetails() { }

    [Parameter]
    public string leadId { get; set; }

    public Quote _quote;

    public int currentItemNumber = 0;
    private List<Quote>? _leads;

    public string updateStatus = "Fetching...";

    string dbName = "Facilitate";
    string collectionName = "Quote";

    string resultMsg = string.Empty;
    //string mongoUri = "mongodb+srv://facilitate:!13324BossWood@facilitate.73z1cne.mongodb.net/?retryWrites=true&w=majority&appName=Facilitate";
    string mongoUri = "mongodb://localhost:27017/?retryWrites=true&w=majority&appName=Facilitate";

    IMongoClient client;
    IMongoCollection<Quote> collection;

    public HttpClient serviceClient = new HttpClient
    {
        // BaseAddress = new Uri("https://api.facilitate.org/"),
        BaseAddress = new Uri("http://localhost/"),
        Timeout = new TimeSpan(0, 2, 0)    // Standard two minute timeout on web service calls.
    };

    protected async override void OnInitialized()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("leadId", out var leadId))
        {
            updateStatus = leadId;

            try
            {
                client = new MongoClient(mongoUri);

                collection = client.GetDatabase(dbName).GetCollection<Quote>(collectionName);

                var response = serviceClient.GetAsync("Quotes");

                var results = response.Result.Content.ReadAsStringAsync().Result;

                if (results != null)
                {
                    _leads = JsonConvert.DeserializeObject<List<Quote>>(results);

                    foreach (var lead in _leads)
                    {
                        if (lead._id == leadId)
                        {
                            lead.timestamp = DateTime.Parse(lead.timestamp, CultureInfo.InvariantCulture).ToShortDateString() + " " + DateTime.Parse(lead.timestamp, CultureInfo.InvariantCulture).ToShortTimeString();
                            _quote = lead;
                            return;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                resultMsg = ex.Message;
            }
            finally
            {
            }
        }
    }

    private void DeleteLead()
    {
        updateStatus = "Deleting...";

        // var response = serviceClient.DeleteAsync("Quotes");

        // updateStatus = "Deleted!";
    }
}
