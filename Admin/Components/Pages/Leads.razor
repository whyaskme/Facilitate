@page "/leads"
@rendermode InteractiveServer

@using Facilitate.Libraries.Models;

@using System;
@using System.Net.Http;
@using System.Net.Http.Headers;
@using System.Text.Json;
@using System.Threading.Tasks;

@using Microsoft.AspNetCore.Builder;
@using Microsoft.AspNetCore.Hosting;
@using Microsoft.AspNetCore.Components.Server;
@using Microsoft.AspNetCore.Mvc;

@using Newtonsoft.Json;
@using Newtonsoft.Json.Serialization;
@using Amazon.Auth.AccessControlPolicy;
@using Newtonsoft.Json.Linq;

<PageTitle>New Leads</PageTitle>

<h1>New Leads</h1>

<p role="status">Leads: <span style="color: #1f6339; font-weight: bold;">@updateStatus</span></p>

@if (forecasts == null)
{
        <p><em>Loading...</em></p>
}
else
{
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Temp. (C)</th>
                    <th>Temp. (F)</th>
                    <th>Summary</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var forecast in forecasts)
            {
                        <tr>
                            <td>@forecast.Date.ToShortDateString()</td>
                            <td>@forecast.TemperatureC</td>
                            <td>@forecast.TemperatureF</td>
                            <td>@forecast.Summary</td>
                        </tr>
            }
            </tbody>
        </table>
}

<button class="btn btn-primary" @onclick="DeleteLeads">Delete Leads</button>


@code {
    private WeatherForecast[]? forecasts;
    private List<Quote>? _leads;

    protected override async Task OnInitializedAsync()
    {
        //FetchLeads();

        // Simulate asynchronous loading to demonstrate streaming rendering
        // await Task.Delay(500);

        // var startDate = DateOnly.FromDateTime(DateTime.Now);
        // var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        // forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        //     {
        //         Date = startDate.AddDays(index),
        //         TemperatureC = Random.Shared.Next(-20, 55),
        //         Summary = summaries[Random.Shared.Next(summaries.Length)]
        //     }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    public HttpClient serviceClient = new HttpClient
        {
            BaseAddress = new Uri("https://api.facilitate.org/"),
            // BaseAddress = new Uri("http://localhost"),
            Timeout = new TimeSpan(0, 2, 0)    // Standard two minute timeout on web service calls.
        };

    public string updateStatus = "Fetching...";

    public Leads()
    {
        var timer = new Timer(new TimerCallback(_ =>
        {
            FetchLeads();
            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }), null, 1000, 1000);
    }

    private void FetchLeads()
    {
        updateStatus = "Fetching...";

        var response = serviceClient.GetAsync("Quotes");

        var results = response.Result.Content.ReadAsStringAsync().Result;

        _leads = JsonConvert.DeserializeObject<List<Quote>>(results);

        updateStatus = _leads.Count().ToString();

        // Simulate asynchronous loading to demonstrate streaming rendering
        //await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            }).ToArray();
    }

    private void DeleteLeads()
    {
        updateStatus = "Deleting...";

        // var response = serviceClient.DeleteAsync("Quotes");

        // updateStatus = "Deleted!";
    }
}