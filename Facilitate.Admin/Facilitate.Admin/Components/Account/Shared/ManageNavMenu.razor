@using Microsoft.AspNetCore.Identity
@using Facilitate.Libraries.Models;

@using Facilitate.Admin.Data;

@using Microsoft.AspNetCore.Identity.EntityFrameworkCore
@using Microsoft.AspNetCore.WebUtilities

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web

@using MongoDB.Bson;

@using System.Text.Json;

@using DevExpress.Blazor;
@using DevExpress.Data;
@using DevExpress.Data.Linq;

@inherits LayoutComponentBase
@layout AccountLayout

@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory
@inject HttpClient httpClient

@inject IdentityRedirectManager RedirectManager

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager

@inject IEmailSender<ApplicationUser> EmailSender
@inject RoleManager<IdentityRole> roleManager

@inject AuthenticationStateProvider GetAuthenticationStateAsync

@inject SignInManager<ApplicationUser> SignInManager

<ul class="nav nav-pills flex-column">
    <li class="nav-item">
        <NavLink class="nav-link" href="Account/Manage" Match="NavLinkMatch.All">Profile</NavLink>
    </li>
    <li class="nav-item">
        <NavLink class="nav-link" href="Account/Manage/Email">Email</NavLink>
    </li>
    <li class="nav-item">
        <NavLink class="nav-link" href="Account/Manage/ChangePassword">Password</NavLink>
    </li>
    @if (hasExternalLogins)
    {
        <li class="nav-item">
            <NavLink class="nav-link" href="Account/Manage/ExternalLogins">External logins</NavLink>
        </li>
    }
    <li class="nav-item">
        <NavLink class="nav-link" href="Account/Manage/TwoFactorAuthentication">Two-factor authentication</NavLink>
    </li>
    <li class="nav-item">
        <NavLink class="nav-link" href="Account/Manage/PersonalData">Personal data</NavLink>
    </li>
</ul>

@code {

    public ApplicationUser currentUser = new ApplicationUser();

    private void UserSignOut()
    {
        try
        {

            SignInManager.SignOutAsync();

            //NavigationManager.NavigateTo("/Account/Lockout");
        }
        catch (Exception ex)
        {
            var errMsg = ex.Message;
        }
    }

    private bool hasExternalLogins;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
            var loggedInUser = authstate.User;
            var loggedInName = loggedInUser.Identity.Name;

            if (loggedInName != null && loggedInName != "")
                currentUser = await UserManager.FindByNameAsync(loggedInName);

            if (!currentUser.IsEnabled)
            {
                UserSignOut();
            }
        }
        catch (Exception ex)
        {
            var errMsg = ex.Message;
            return;
        }

        hasExternalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).Any();
    }
}
