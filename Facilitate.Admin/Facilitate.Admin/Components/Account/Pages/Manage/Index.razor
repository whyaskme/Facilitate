@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Facilitate.Libraries.Models;

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory
@inject HttpClient httpClient

@inject IdentityRedirectManager RedirectManager

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager

@inject IEmailSender<ApplicationUser> EmailSender
@inject RoleManager<IdentityRole> roleManager

@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject ILogger<Register> Logger

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage />

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <input type="text" value="@username" class="form-control" placeholder="Please choose your username." disabled />
                <label for="username" class="form-label">Username</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number." />
                <label for="phone-number" class="form-label">Phone number</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </EditForm>
    </div>
</div>

@code {

    // public ApplicationUser currentUser = new ApplicationUser();
    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     try
    //     {
    //         if (firstRender)
    //         {
    //             var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
    //             var loggedInUser = authstate.User;
    //             var loggedInName = loggedInUser.Identity.Name;

    //             if (loggedInName != null && loggedInName != "")
    //                 currentUser = await UserManager.FindByNameAsync(loggedInName);

    //             if (!currentUser.IsEnabled)
    //             {
    //                 UserSignOut();
    //             }
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         var errMsg = ex.Message;
    //         return;
    //     }
    // }

    // private void UserSignOut()
    // {
    //     try
    //     {

    //         SignInManager.SignOutAsync();

    //         NavigationManager.NavigateTo("/Account/Lockout");
    //     }
    //     catch (Exception ex)
    //     {
    //         var errMsg = ex.Message;
    //     }
    // }

    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        Input.PhoneNumber ??= phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
            }
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }
}
