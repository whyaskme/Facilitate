 @page "/Account/Users"

@using Facilitate.Admin.Data;
@using Facilitate.Libraries.Models;

@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore
@using Microsoft.AspNetCore.WebUtilities

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web

@using MongoDB.Bson;

@using System.Text.Json;

@using DevExpress.Blazor;
@using DevExpress.Data;
@using DevExpress.Data.Linq;

@attribute [StreamRendering(true)]
@rendermode InteractiveServer
@inject WebServices WebServices

@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory
@inject HttpClient httpClient

@inject IdentityRedirectManager RedirectManager

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager

@inject IEmailSender<ApplicationUser> EmailSender
@inject RoleManager<IdentityRole> roleManager

@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject ILogger<Register> Logger

<PageTitle>Manage Users</PageTitle>

<h1>Manage Users</h1>

<div class="row">

    <DxGrid @ref="Grid"
            Data="ProjectManagers"
            PageSize="10"
            ValidationEnabled="false"
            CustomizeEditModel="Grid_CustomizeEditModel"
            EditModelSaving="Grid_EditModelSaving"
            DataItemDeleting="Grid_DataItemDeleting"
            PopupEditFormCssClass="pw-800"
            EditMode="@CurrentEditMode"
            KeyboardNavigationEnabled="true">

        <Columns>
            <DxGridCommandColumn Width="160px" />
            <DxGridDataColumn FieldName="Id" Visible="false" />
            <DxGridDataColumn FieldName="LastName" SortIndex="0" SortOrder="GridColumnSortOrder.Descending" AllowSort="true" />
            <DxGridDataColumn FieldName="FirstName" />
            <DxGridDataColumn FieldName="Phone" />
            <DxGridDataColumn FieldName="Email" />
            <DxGridDataColumn FieldName="Address1" />
            <DxGridDataColumn FieldName="Address2" />
            <DxGridDataColumn FieldName="City" />
            <DxGridDataColumn FieldName="State" />
            <DxGridDataColumn FieldName="Zip" />
        </Columns>

        <EditFormTemplate Context="EditFormContext">
            @{
                var supplier = (ApplicationUser)EditFormContext.EditModel;
            }
            <DxFormLayout CssClass="w-100">

            <DxFormLayoutItem Caption="Last Name:" ColSpanMd="6">
                    @EditFormContext.GetEditor("LastName")
            </DxFormLayoutItem>

            </DxFormLayout>

        </EditFormTemplate>
    </DxGrid>

</div>

<div><br /></div>

<StatusMessage Message="@Message" />
<EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
    <DataAnnotationsValidator />
    <h2>Create a new account.</h2>
    <ValidationSummary class="text-danger" role="alert" />

    <div class="row">

        <h6>Personal</h6>

        <div class="col-md-6 col-md-offset-2">

            <div class="form-floating mb-3">
                <InputText tabindex="1" @bind-Value="Input.FirstName" class="form-control" aria-required="true" placeholder="First Name" />
                <label for="firstName">First Name</label>
                <ValidationMessage For="() => Input.FirstName" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText tabindex="3" @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText tabindex="5" type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>

        </div>

        <div class="col-md-6 col-md-offset-2">

            <div class="form-floating mb-3">
                <InputText tabindex="2" @bind-Value="Input.LastName" class="form-control" aria-required="true" placeholder="Last Name" />
                <label for="lastName">Last Name</label>
                <ValidationMessage For="() => Input.LastName" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText type="phone" tabindex="4" @bind-Value="Input.Phone" class="form-control" aria-required="true" placeholder="(555) 555-1212)" />
                <label for="phone">Phone</label>
                <ValidationMessage For="() => Input.Phone" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText tabindex="6" type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
        </div>
    </div>

    <div class="row">

        <h6>Address</h6>

        <div class="col-md-6 col-md-offset-2">

            <div class="form-floating mb-3">
                <InputText tabindex="7" @bind-Value="Input.Address1" class="form-control" aria-required="true" placeholder="Address 1" />
                <label for="Address1">Address 1</label>
                <ValidationMessage For="() => Input.Address1" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText tabindex="9" @bind-Value="Input.City" class="form-control" aria-required="true" placeholder="City" />
                <label for="City">City</label>
                <ValidationMessage For="() => Input.City" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText tabindex="11" @bind-Value="Input.Zip" class="form-control" aria-required="true" placeholder="Zip" />
                <label for="Zip">Zip</label>
                <ValidationMessage For="() => Input.Zip" class="text-danger" />
            </div>

        </div>

        <div class="col-md-6 col-md-offset-2">

            <div class="form-floating mb-3">
                <InputText tabindex="8" @bind-Value="Input.Address2" class="form-control" aria-required="true" placeholder="Address 2" />
                <label for="Address2">Address2</label>
                <ValidationMessage For="() => Input.Address2" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText tabindex="10" @bind-Value="Input.State" class="form-control" aria-required="true" placeholder="State" />
                <label for="State">State</label>
                <ValidationMessage For="() => Input.State" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <button tabindex="12" type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
            </div>
        </div>
    </div>

</EditForm>


@code {

    IEnumerable<ApplicationUser> DataSource { get; set; }

    // IEnumerable<Country> Countries { get; set; }
    // IEnumerable<City> Cities { get; set; }

    IGrid Grid { get; set; }

    bool UsePopupEditForm { get; set; }

    GridEditMode CurrentEditMode { get { return UsePopupEditForm ? GridEditMode.PopupEditForm : GridEditMode.EditForm; } }
    TaskCompletionSource<bool> DataLoadedTcs { get; } = new(TaskCreationOptions.RunContinuationsAsynchronously);

    async Task UsePopupEditForm_CheckedChanged(bool value)
    {
        UsePopupEditForm = value;
        await Grid.CancelEditAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        // DataSource = await NwindDataService.GetSuppliersEditableAsync();
        // Countries = await WorldcitiesDataService.GetCountriesAsync();
        // Cities = await WorldcitiesDataService.GetCitiesAsync();
        DataLoadedTcs.TrySetResult(true);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await DataLoadedTcs.Task;
            await Grid.StartEditRowAsync(0);
        }
    }

    void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e)
    {
        if (e.IsNew)
        {
            // var newSupplier = (Supplier)e.EditModel;
            // newSupplier.CompanyName = "DevExpress";
            // newSupplier.ContactName = "John Doe";
        }
    }

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        var tmpVal = "";
        // if (e.IsNew)
        //     await NwindDataService.InsertSupplierAsync((Supplier)e.EditModel);
        // else
        //     await NwindDataService.UpdateSupplierAsync((Supplier)e.DataItem, (Supplier)e.EditModel);

        // await UpdateDataAsync();
    }

    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        var tmpVal = "";
        // await NwindDataService.RemoveSupplierAsync((Supplier)e.DataItem);
        // await UpdateDataAsync();
    }

    async Task UpdateDataAsync()
    {
        var tmpVal = "";
        //DataSource = await NwindDataService.GetSuppliersEditableAsync();
    }

    public void Dispose()
    {
        DataLoadedTcs.TrySetCanceled();
    }

    IEnumerable<string> Values { get; set; }

    public bool IsAssignButtonEnabled = false;

    EntityInstantFeedbackSource InstantFeedbackSource { get; set; }

    public List<ApplicationUser> ProjectManagers = new List<ApplicationUser>();
    IEnumerable<ApplicationUser> SelectedProjectManager { get; set; }

    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        ProjectManagers = SortByLastNameUsingLinq(UserManager.Users.ToList());
    }

    public List<ApplicationUser> SortByLastNameUsingLinq(List<ApplicationUser> originalList)
    {
        return originalList.OrderBy(x => x.LastName).ToList();
    }

    void SelectedProjectManagerChanged(IEnumerable<ApplicationUser> selectedProjectManager)
    {
        SelectedProjectManager = selectedProjectManager ?? throw new ArgumentNullException(nameof(selectedProjectManager));

        var tmpVal = "";
    }

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;

        var formattedPhone = Input.Phone.Replace("(", "").Replace(")", "").Replace("-", "").Replace(" ", "");

        var areaCode = formattedPhone.Substring(0, 3);
        var prefix = formattedPhone.Substring(3, 3);
        var lineNumber = formattedPhone.Substring(6, 4);

        user.Phone = "(" + areaCode + ") " + prefix + "-" + lineNumber;

        user.Address1 = Input.Address1;
        user.Address2 = Input.Address2;
        user.City = Input.City;
        user.State = Input.State;
        user.Zip = Input.Zip;

        user.ProfileImage = "/images/profiles/Facilitate Profile Logo.png";

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);

        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        var result = await UserManager.CreateAsync(user, Input.Password);
        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        // Add user to roles
        await UserManager.AddToRoleAsync(user, "System Admin");
        await UserManager.AddToRoleAsync(user, "Site Admin");
        await UserManager.AddToRoleAsync(user, "Group Admin");
        await UserManager.AddToRoleAsync(user, "Project Manager");
        await UserManager.AddToRoleAsync(user, "Vendor");
        await UserManager.AddToRoleAsync(user, "Member");

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        // if (UserManager.Options.SignIn.RequireConfirmedAccount)
        // {
        //     RedirectManager.RedirectTo(
        //         "Account/RegisterConfirmation",
        //         new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        // }

        // await SignInManager.SignInAsync(user, isPersistent: false);
        // RedirectManager.RedirectTo(ReturnUrl);

        //RedirectManager.RedirectTo("/Account/Users");

        //GetManagers();
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    public List<IdentityRole> GetUserRoles()
    {
        List<IdentityRole> roles = new List<IdentityRole>();

        try
        {
            roles = roleManager.Roles.ToList();

            var tmpVal = "";
        }
        catch (Exception ex)
        {
            throw ex;
        }

        return roles;
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "First")]
        public string FirstName { get; set; } = "";

        [Required]
        [Display(Name = "Last")]
        public string LastName { get; set; } = "";

        [Required]
        // [RegularExpression(@"^[0][1-9]([.][0-9][0-9]){4}", ErrorMessage = "Incorrect phone number !")]
        [DataType(DataType.PhoneNumber)]
        [Display(Name = "Phone")]
        public string Phone { get; set; } = "";

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [Display(Name = "Street 1")]
        public string Address1 { get; set; } = "";

        [Display(Name = "Street 2")]
        public string Address2 { get; set; } = "";

        [Required]
        [Display(Name = "City")]
        public string City { get; set; } = "";

        [Required]
        [Display(Name = "State")]
        public string State { get; set; } = "";

        [Required]
        [Display(Name = "Zip")]
        public string Zip { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
