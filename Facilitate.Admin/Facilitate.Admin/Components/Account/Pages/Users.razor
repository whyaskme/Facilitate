@page "/Account/Users"

@using Facilitate.Admin.Data;
@using Facilitate.Libraries.Models;

@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore
@using Microsoft.AspNetCore.WebUtilities

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web

@using DevExpress.Blazor;
@using DevExpress.Data;
@using DevExpress.Data.Linq;

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager

@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger

@inject RoleManager<IdentityRole> roleManager

<PageTitle>Manage Users</PageTitle>

<h1>Manage Users</h1>

<div class="row">
    <DxListBox Data="@ProjectManagers"
            @bind-Values="@Values"
            SelectedItemsChanged="@((IEnumerable<ApplicationUser> values) => SelectedProjectManagerChanged(values))"
            SelectionMode="ListBoxSelectionMode.Single">
        <Columns>
@*             <DxListEditorColumn FieldName="Id" Caption="Id" /> *@
            <DxListEditorColumn FieldName="FirstName" Caption="First" />
            <DxListEditorColumn FieldName="LastName" Caption="Last" />

            <DxListEditorColumn FieldName="Phone" Caption="Phone" />
            <DxListEditorColumn FieldName="Email" Caption="Email" />

            <DxListEditorColumn FieldName="Address1" Caption="Street 1" />
            <DxListEditorColumn FieldName="Address2" Caption="Street 2" />
            <DxListEditorColumn FieldName="City" Caption="City" />
            <DxListEditorColumn FieldName="State" Caption="State" />
            <DxListEditorColumn FieldName="Zip" Caption="Zip" />
        </Columns>
    </DxListBox>
</div>

<hr />

<StatusMessage Message="@Message" />
<EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
    <DataAnnotationsValidator />
    <h2>Create a new account.</h2>
    <ValidationSummary class="text-danger" role="alert" />

    <div class="row">
        <div class="col-md-6 col-md-offset-2">
            <div class="form-floating mb-3">
                <InputText tabindex="1" @bind-Value="Input.FirstName" class="form-control" aria-required="true" placeholder="First Name" />
                <label for="firstName">First Name</label>
                <ValidationMessage For="() => Input.FirstName" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText tabindex="3" @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText tabindex="5" type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>

        </div>

        <div class="col-md-6 col-md-offset-2">

            <div class="form-floating mb-3">
                <InputText tabindex="2" @bind-Value="Input.LastName" class="form-control" aria-required="true" placeholder="Last Name" />
                <label for="lastName">Last Name</label>
                <ValidationMessage For="() => Input.LastName" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText tabindex="4" @bind-Value="Input.Phone" class="form-control" aria-required="true" placeholder="(555) 555-1212)" />
                <label for="phone">Phone</label>
                <ValidationMessage For="() => Input.Phone" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText tabindex="6" type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
        </div>
    </div>

    <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>

</EditForm>

<div class="row">

</div>

@code {

    IEnumerable<ApplicationUser> SelectedProjectManager { get; set; }

    IEnumerable<string> Values { get; set; }

    public bool IsAssignButtonEnabled = false;

    public List<ApplicationUser> ProjectManagers = new List<ApplicationUser>();

    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        ProjectManagers = UserManager.Users.ToList();
    }

    void SelectedProjectManagerChanged(IEnumerable<ApplicationUser> selectedProjectManager)
    {
        SelectedProjectManager = selectedProjectManager ?? throw new ArgumentNullException(nameof(selectedProjectManager));

        if (SelectedProjectManager.Count() > 0)
            IsAssignButtonEnabled = true;
        else
            IsAssignButtonEnabled = false;
    }

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);

        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        var result = await UserManager.CreateAsync(user, Input.Password);
        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        // Add user to roles
        await UserManager.AddToRoleAsync(user, "System Admin");
        await UserManager.AddToRoleAsync(user, "Site Admin");
        await UserManager.AddToRoleAsync(user, "Group Admin");
        await UserManager.AddToRoleAsync(user, "Project Manager");
        await UserManager.AddToRoleAsync(user, "Vendor");
        await UserManager.AddToRoleAsync(user, "Member");

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        // if (UserManager.Options.SignIn.RequireConfirmedAccount)
        // {
        //     RedirectManager.RedirectTo(
        //         "Account/RegisterConfirmation",
        //         new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        // }

        // await SignInManager.SignInAsync(user, isPersistent: false);
        // RedirectManager.RedirectTo(ReturnUrl);

        RedirectManager.RedirectTo("/Account/Users");
        //GetManagers();
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    public List<IdentityRole> GetUserRoles()
    {
        List<IdentityRole> roles = new List<IdentityRole>();

        try
        {
            roles = roleManager.Roles.ToList();

            var tmpVal = "";
        }
        catch (Exception ex)
        {
            throw ex;
        }

        return roles;
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "First")]
        public string FirstName { get; set; } = "";

        [Required]
        [Display(Name = "Last")]
        public string LastName { get; set; } = "";

        [Required]
        [Phone]
        [Display(Name = "Phone")]
        public string Phone { get; set; } = "";

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [Display(Name = "Street 1")]
        public string Address1 { get; set; } = "";

        [Required]
        [Display(Name = "Street 2")]
        public string Address2 { get; set; } = "";

        [Required]
        [Display(Name = "City")]
        public string City { get; set; } = "";

        [Required]
        [Display(Name = "State")]
        public string State { get; set; } = "";

        [Required]
        [Display(Name = "Zip")]
        public string Zip { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
