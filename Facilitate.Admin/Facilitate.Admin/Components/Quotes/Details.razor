@page "/quotes/details"
@page "/quotes/details/{QuoteId}"
@page "/quotes/details/{QuoteId}/{Referrer}"

@using Facilitate.Admin.Components.Upload
@using Facilitate.Admin.Data;
@using Facilitate.Libraries.Models;

@using DevExpress.Blazor.Base;
@* @using DevExpress.LookAndFeel; *@
@using DevExpress.XtraEditors;
@* @using DevExpress.XtraGrid.Views.Grid; *@
@using DevExpress.Utils;

@using Microsoft.EntityFrameworkCore;

@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Http.Extensions;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Mvc.Rendering;
@using Microsoft.AspNetCore.WebUtilities;

@using System.Collections.Generic;
@using System.ComponentModel.DataAnnotations;

@using MongoDB.Bson;

@using System.Text.Json;

@using DevExpress.Blazor;
@using DevExpress.Data;
@using DevExpress.Data.Linq;
@using DevExpress.Web;

@using Microsoft.AspNetCore.Html;
@using UsingUploadEditDataGrid.Data;

@* @implements IDisposable; *@

@attribute [StreamRendering(true)]
@rendermode InteractiveServer
@inject WebServices WebServices

@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory
@inject HttpClient httpClient

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject RoleManager<IdentityRole> roleManager

@inject IJSRuntime JSRuntime

@inject AuthenticationStateProvider GetAuthenticationStateAsync

@* @inject FileUrlStorageService _fileUrlStorageService *@

@attribute [IgnoreAntiforgeryToken]

<PageTitle>Leads</PageTitle>

<AuthorizeView>
    <Authorized></Authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/Account/Login?returnurl=" + NavigationManager.Uri);
        }
    </NotAuthorized>
</AuthorizeView>

<script>
    window.getIpAddress = () => {
        return fetch('https://jsonip.com/')
            .then((response) => response.json())
            .then((data) => {
                return data.ip
            })
    }

    function getReferrer() {
        return document.referrer;
    }
</script>

@if (QuotesList == null)
{
    @*     <p><em>Loading...</em></p> *@
}
else
{
    <div class="@currentQuoteHeaderTypeCssClass">
        <button class="@currentActionButtonClass button-header-left" @onclick="ReturnPreviousPage">Return</button>
       @CurrentlySelectedQuote.status Details for @CurrentlySelectedQuote.firstName @CurrentlySelectedQuote.lastName
        <button class="@currentActionButtonClass button-header-right" @onclick="ShowRecordIDs">@RedcordIdButtonLabel</button>
    </div>

    <DxGrid @ref="QuoteGrid"
            Data="@QuotesList"
            KeyFieldName="_id"
            TextWrapEnabled="false">
        <Columns>
            <DxGridDataColumn Visible="@recordIDVisible" Width="225" Caption="Record Id" FieldName="_id" />
            <DxGridDataColumn Width="auto" Caption="Trade" FieldName="applicationType" />
            <DxGridDataColumn Width="175" Caption="Created" FieldName="timestamp" DisplayFormat="MM/dd/yyyy hh:mm tt" SortIndex="0" SortOrder="GridColumnSortOrder.Descending" AllowSort="true" />
            <DxGridDataColumn Width="175" Caption="Updated" FieldName="lastUpdated" DisplayFormat="MM/dd/yyyy hh:mm tt" />
            <DxGridDataColumn Width="auto" Caption="Street" FieldName="street" />
            <DxGridDataColumn Width="auto" Caption="City" FieldName="city" />
            <DxGridDataColumn Width="auto" Caption="State" FieldName="state" />
            <DxGridDataColumn Width="auto" Caption="Zip" FieldName="zip" />
        </Columns>

        <DetailRowTemplate>
            @{
                CurrentlySelectedQuote = (Quote)context.DataItem;

                var currentIndex = 0;

                var _emailTabLabel = "Email " + @CurrentlySelectedQuote.firstName + " Documents";

                productsCount = CurrentlySelectedQuote.products.Count;
                if (productsCount <= 1)
                    productsCountLabel = productsCount.ToString() + " Product Quoted";
                else
                    productsCountLabel = productsCount.ToString() + " Products Quoted";


                <div class="@currentQuoteContainerTypeCssClass  @currentQuoteColorCssClass">@currentQuoteContainerType (@CurrentlySelectedQuote.applicationType)</div>

                <div class="row">
                    <div class="col-md-4">
                        <label>Name</label>
                        <span class="@currentQuoteColorCssClass">@CurrentlySelectedQuote.firstName @CurrentlySelectedQuote.lastName</span>
                    </div>
                    <div class="col-md-4">
                        <label>Address</label>
                        <a href="https://www.google.com/maps/search/@CurrentlySelectedQuote.street @CurrentlySelectedQuote.city, @CurrentlySelectedQuote.state @CurrentlySelectedQuote.zip" target="_blank">
                            @CurrentlySelectedQuote.street @CurrentlySelectedQuote.city, @CurrentlySelectedQuote.state @CurrentlySelectedQuote.zip
                        </a>
                    </div>
                    <div class="col-md-4 quote-total">

                        <div class="@currentQuoteColorCssClass header-total-element">Quote:</div>

                        @{
                            if(CurrentlySelectedQuote.applicationType == "Roofing")
                            {
                                <div class="@currentQuoteColorCssClass header-total-element">@CurrentlySelectedQuote.totalSquareFeet.ToString("N0")</div>
                                <div class="@currentQuoteColorCssClass header-total-element">sqft &raquo;</div>
                            }
                        }

                        @{
                            var quoteTotal = CurrentlySelectedQuote.totalQuote.ToString("C0");

                            if(CurrentlySelectedQuote.applicationType == "Aggregate")
                            {
                                <div class="@currentQuoteColorCssClass header-total-element header-total-element-modifier">@quoteTotal</div>
                            }
                            else
                            {
                                <div class="@currentQuoteColorCssClass header-total-element">
                                    <DxTextBox Text="@quoteTotal" TextChanged="@((newValue) => OnTotalQuoteValueChanged(newValue))" CssClass="total-quote-value" />
                                </div>
                            }
                        }
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <label>Email</label>
                        <a href="mailto:@CurrentlySelectedQuote.email">
                            <span>@CurrentlySelectedQuote.email</span>
                        </a>
                    </div>
                    <div class="col-md-4">
                        <label>Ph</label>
                        <span>@CurrentlySelectedQuote.phone</span>
                    </div>
                    <div class="col-md-4"></div>
                </div>

                <div class="section-header">
                    @CurrentlySelectedQuote.applicationType Dashboard
                </div>

                <DxTabs CssClass="tabs-container">

                    <DxTabPage Id="Panel-Project-Manager" Text="Relationships">
                    @{
                        
                        <div class="row">
                            <div class="col-md-1">
                                @{
                                    if (CurrentlySelectedQuote.projectManager != null)
                                    {
                                        <button class="@currentActionButtonClass" @onclick="@(() => IsAssignPopupVisible = true)">Reassign</button>
                                    }
                                    else
                                    {
                                        <button class="@currentActionButtonClass" @onclick="@(() => IsAssignPopupVisible = true)">Assign</button>
                                    }
                                }
                            </div>
                            @{
                                if (CurrentlySelectedQuote.projectManager != null)
                                {
                                    <div class="col-md-1">
                                        <h6>Manager</h6>
                                    </div>

                                    <div class="col-md-10">
                                        <span class="">
                                            <label>Name</label>
                                            <span class="detail-item">@CurrentlySelectedQuote.projectManager.FirstName</span><span class="detail-item">@CurrentlySelectedQuote.projectManager.LastName</span>
                                        </span>
                                        <span class="">
                                            <label>Ph</label>
                                            <span class="detail-item">@CurrentlySelectedQuote.projectManager.Phone</span>
                                        </span>
                                        <span class="">
                                            <label>Email</label>
                                            <a href="mailto:@CurrentlySelectedQuote.projectManager.Email" target="_blank">
                                                <span class="detail-item">@CurrentlySelectedQuote.projectManager.Email</span>
                                            </a>
                                        </span>
                                        <span class="">
                                            <label>Market</label>
                                            <a href="https://www.google.com/maps/search/@CurrentlySelectedQuote.projectManager.City, @CurrentlySelectedQuote.projectManager.State @CurrentlySelectedQuote.projectManager.Zip" target="_blank">
                                                @CurrentlySelectedQuote.projectManager.City, @CurrentlySelectedQuote.projectManager.State
                                            </a>
                                        </span>
                                    </div>
                                }
                            }
                        </div>

                        <hr />

                        <div class="row">
                            <div class="col-md-1">
                                <button class="@currentActionButtonClass" @onclick="@(() => IsPopupVisibleAddTrade = true)">Add Trade</button>
                            </div>
                            <div class="col-md-11">
                                <h6>@RelatedQuoteSummaryList.Count() Trades</h6>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-12"></div>
                        </div>

                        <DxGrid @ref="RelatedQuoteGrid"
                                id="RelatedQuoteGrid"
                                Data="@RelatedQuoteSummaryList"
                                KeyFieldName="_id"
                                RowClick="ViewChildQuoteDetails"
                                AllowSelectRowByClick="true"
                                EditModelSaving="OnEditModelSaving"
                                DataItemDeleting="OnDataItemDeleting"
                                SelectionMode="GridSelectionMode.Single"
                                @bind-SelectedDataItem="@SelectedChildQuoteItem"
                                PageSize="10"
                                PagerPosition="GridPagerPosition.Bottom"
                                ShowGroupPanel="true"
                                AutoExpandAllGroupRows="true"
                                ShowFilterRow="true"
                                PagerNavigationMode="PagerNavigationMode.InputBox"
                                PageSizeSelectorVisible="true"
                                PageSizeSelectorAllRowsItemVisible="false"
                                KeyboardNavigationEnabled="true"
                                TextWrapEnabled="false">
                            <Columns>

                                <dxg:TableView.FormatConditions>
                                   <dxg:FormatCondition ValueRule="Equal" Value1="New" FieldName="status" PredefinedFormatName="LightRedFillWithDarkRedText" />   
                                </dxg:TableView.FormatConditions>

                                <DxGridDataColumn Visible="@recordIDVisible" Width="225" Caption="Record Id" FieldName="_id" />
                                <DxGridDataColumn Width="100" Caption="Trade" FieldName="applicationType" />
                                <DxGridDataColumn Width="100" Caption="Relationship" FieldName="relationship" />
                                <DxGridDataColumn Width="100" Caption="Status" FieldName="status" />
                                <DxGridDataColumn Width="165" Caption="Created" FieldName="timestamp" DisplayFormat="MM/dd/yyyy hh:mm tt" />
                                <DxGridDataColumn Width="165" Caption="Updated" FieldName="lastEventTimeStamp" DisplayFormat="MM/dd/yyyy hh:mm tt" />
                                <DxGridDataColumn Width="auto" Caption="Last Event" FieldName="lastEventDetails" />
                                <DxGridDataColumn Width="150" Caption="Manager" FieldName="PMFullName" UnboundType="GridUnboundColumnType.String" UnboundExpression="projectManager.FirstName + ' ' + projectManager.LastName" />
                                <DxGridDataColumn Width="100" Caption="Amount" FieldName="totalQuote" DisplayFormat="C0" />
                                <DxGridDataColumn Width="100" Caption="Qualified?" FieldName="isQualified" />
                                @{
                                    if (CurrentlySelectedQuote.applicationType == "Aggregate")
                                    {
                                        <DxGridCommandColumn Width="100px" Caption="Actions" NewButtonVisible="false" EditButtonVisible="false" DeleteButtonVisible="true" />
                                    }
                                }

                            </Columns>
                        </DxGrid>
                    }
                    </DxTabPage>

                    @{
                        if (@CurrentlySelectedQuote.status != "New" && @CurrentlySelectedQuote.status != "Opportunity")
                        {
                            <DxTabPage Id="Panel-Project-Schedule" Text="Project Schedule">
                                Scheduling component here...
                            </DxTabPage>
                        }
                    }

                    @{
                        if (CurrentlySelectedQuote.applicationType != "Aggregate")
                        {
                            <DxTabPage Id="Panel-Project-Summary" CssClass="tab-container" Text="@tradesCountLabel">

                                <div class="container">

                                    <div class="row item-details-container">
                                        <div class="col">
                                            <label>Total Quote</label>
                                            <span><b>@CurrentlySelectedQuote.totalQuote.ToString("C0")</b></span>
                                        </div>
                                        <div class="col">
                                            <label>Total Sqft</label>
                                            <span><b>@CurrentlySelectedQuote.totalSquareFeet.ToString("N0")</b></span>
                                        </div>
                                        <div class="col">
                                            <label>Included Targets</label>
                                            <span><b>@CurrentlySelectedQuote.numberOfIncludedStructures.ToString("N0")</b></span>
                                        </div>
                                        <div class="col"></div>
                                    </div>

                                    <div class="row">
                                        @{
                                            currentItemIndex = 0;

                                            for (var i = 0; i < @CurrentlySelectedQuote.structures.Count; i++)
                                            {
                                                currentItemIndex = i + 1;

                                                <b>Roof #@currentItemIndex</b>
                                                <div class="row item-details-container">
                                                    <div class="col">
                                                        <label>Included</label>
                                                        @{
                                                            if(@CurrentlySelectedQuote.structures[i].isIncluded)
                                                            {
                                                                <span>Yes</span>
                                                            }
                                                            else
                                                            {
                                                                <span class="system-warning">No</span>
                                                            }
                                                        }
                                                    </div>
                                                    <div class="col">
                                                        <label>Name</label>
                                                        <span>@CurrentlySelectedQuote.structures[i].name</span>
                                                    </div>
                                                    <div class="col">
                                                        <label>SqFt</label>
                                                        <span>@CurrentlySelectedQuote.structures[i].squareFeet.ToString("N0")</span>
                                                    </div>
                                                    <div class="col">
                                                        <label>Complexity</label>
                                                        <span>@CurrentlySelectedQuote.structures[i].roofComplexity</span>
                                                    </div>
                                                    <div class="col">
                                                        <label>Slope</label>
                                                        <span>@CurrentlySelectedQuote.structures[i].slope</span>
                                                    </div>
                                                </div>
                                            }
                                        }
                                    </div>

                                </div>
                            </DxTabPage>

                            <DxTabPage Id="Panel-Products" Text="@productsCountLabel">

                                <div class="container">
                                    @{
                                        for (var i = 0; i < @CurrentlySelectedQuote.products.Count; i++)
                                        {
                                            currentItemIndex = i + 1;

                                            var priceLabel = @CurrentlySelectedQuote.products[i].priceInfo.priceType;
                                            if (priceLabel == "BasicFinancing")
                                                priceLabel = "Basic";
                                            else
                                                priceLabel = @CurrentlySelectedQuote.products[i].priceInfo.priceType;

                                            <b>Product #@currentItemIndex</b>

                                            <div class="item-details-container">

                                                <div class="row">
                                                    <div class="col">
                                                        <label>Name</label>
                                                        <span>@CurrentlySelectedQuote.products[i].name</span>
                                                    </div>
                                                    <div class="col">
                                                        <label>Waste Factor</label>
                                                        <span>@CurrentlySelectedQuote.products[i].wasteFactorMainRoof</span>
                                                    </div>
                                                    <div class="col">
                                                        <label>Price Type</label>
                                                        <span>@priceLabel</span>
                                                    </div>
                                                </div>

                                                <div class="row">
                                                    <div class="col">
                                                        <label>Total Quote</label>
                                                        <span>@CurrentlySelectedQuote.products[i].priceInfo.total.ToString("C0")</span>
                                                    </div>
                                                    <div class="col">
                                                        <label>Per Square</label>
                                                        <span>@CurrentlySelectedQuote.products[i].priceInfo.pricePerSquare.ToString("C0")</span>
                                                    </div>
                                                    <div class="col">
                                                        <label>Monthly</label>
                                                        <span>@CurrentlySelectedQuote.products[i].priceInfo.monthly.ToString("C0")</span>
                                                    </div>
                                                </div>

                                                <div class="row">
                                                    <div class="col">
                                                        <label>APR</label>
                                                        <span>@CurrentlySelectedQuote.products[i].priceInfo.apr%</span>
                                                    </div>
                                                    <div class="col">
                                                        <label>Months</label>
                                                        <span>@CurrentlySelectedQuote.products[i].priceInfo.months</span>
                                                    </div>
                                                    <div class="col">
                                                    </div>
                                                </div>

                                            </div>
                                        }
                                    }
                                </div>

                            </DxTabPage>
                        }
                    }

                    @{
                        if (@CurrentlySelectedQuote.status != "New")
                        {
                            <DxTabPage Id="Panel-Send-Files" Text="@_emailTabLabel">

                                <DxUpload Name="ImageUpload"
                                          SelectButtonText="Select Files"
                                          AllowMultiFileUpload="true"
                                          UploadUrl="@GetUploadUrl(@uploadUrl)"
                                          ChunkSize="@chunkSize"
                                          ShowFileList="true"
                                          AllowedFileExtensions="@allowedFileExtensions"
                                          AcceptedFileTypes="@acceptableFileTypes"
                                          FileUploadError="@OnUploadError"
                                          FileUploadStarted="@OnFileUploadStarted"
                                          SelectedFilesChanged="@SelectedFilesChanged"
                                          MaxFileSize="@MaxFileSize">
                                </DxUpload>

                                <div class="alert alert-danger @(ErrorVisible? " visible" : " invisible")">@MyError</div>
                                <button class="@currentActionButtonClass" disabled="@SendDocsDisabled" @onclick="@EmailFiles">Send Docs</button>
                            </DxTabPage>

                            <DxTabPage Id="Panel-Attach-Files" Text="Attachments">

                                <div class="row">
                                    <div class="col-md-1">
                                        <DxUpload 
                                            Name="UploadAttachments"
                                            id="UploadAttachments"
                                            SelectButtonText="Upload"
                                            AllowMultiFileUpload="true"
                                            UploadUrl="@GetUploadUrl(@uploadUrl)"
                                            FileUploadError="@OnUploadError"
                                            FileUploadStarted="@OnFileUploadStarted"
                                            SelectedFilesChanged="@SelectedFilesChanged"
                                            MaxFileSize="@MaxFileSize"
                                            AllowedFileExtensions="@allowedFileExtensions"
                                            AcceptedFileTypes="@acceptableFileTypes"
                                            CssClass="@(SelectedFilesCount > 0 ? "w-100" : "add-item-button")">
                                        </DxUpload>
                                    </div>
                                    <div class="col-md-10">
                                        <span class="section-title">@AttachmentList.Count() Attachments</span>
                                    </div>
                                </div>

                                <div class="row error-details alert alert-danger @(ErrorVisible? " visible" : " invisible")">@MyError</div>

                                <DxGrid @ref="AttachmentGrid"
                                    Data="@AttachmentList"
                                    id="AttachmentGrid"
                                    KeyFieldName="_id"
                                    CssClass="AttachmentGrid"
                                    PageSize="10"
                                    PagerPosition="GridPagerPosition.Bottom"
                                    ShowGroupPanel="true"
                                    AutoExpandAllGroupRows="true"
                                    ShowFilterRow="true"
                                    PagerNavigationMode="PagerNavigationMode.InputBox"
                                    PageSizeSelectorVisible="true"
                                    PageSizeSelectorAllRowsItemVisible="false"
                                    KeyboardNavigationEnabled="true"
                                    TextWrapEnabled="false">
                                    <Columns>
                                        <DxGridDataColumn Visible="@recordIDVisible" Width="225" Caption="Record Id" FieldName="_id" />
                                        <DxGridDataColumn Width="175" Caption="DateTime" FieldName="DateTime" DisplayFormat="MM/dd/yyyy hh:mm tt" />
                                        <DxGridDataColumn Width="100" Caption="Trade" FieldName="Trade" />
                                        <DxGridDataColumn Width="150" Caption="Name" FieldName="MediaName" />
                                        <DxGridDataColumn Width="auto" Caption="Description" FieldName="MediaDescription" />
                                        <DxGridDataColumn Width="auto" Caption="Url" FieldName="MediaUrl" />
                                        <DxGridDataColumn Width="175" Caption="Author" FieldName="PMFullName" UnboundType="GridUnboundColumnType.String" UnboundExpression="Author.FirstName + ' ' + Author.LastName" />
                                    </Columns>
                                </DxGrid>

                            </DxTabPage>
                        }
                    }

                    <DxTabPage Id="Panel-Notes" Text="Notes">

                        <h6>@NoteList.Count() Notes</h6>

                        <button class="@currentActionButtonClass" @onclick="@(() => IsPopupVisibleAddNote = true)">Add Note</button>
                        <br /><br />
                        <DxGrid @ref="NoteGrid"
                                Data="@NoteList"
                                KeyFieldName="_id"
                                PageSize="10"
                                PagerPosition="GridPagerPosition.Bottom"
                                ShowGroupPanel="true"
                                AutoExpandAllGroupRows="true"
                                ShowFilterRow="true"
                                PagerNavigationMode="PagerNavigationMode.InputBox"
                                PageSizeSelectorVisible="true"
                                PageSizeSelectorAllRowsItemVisible="false"
                                KeyboardNavigationEnabled="true"
                                TextWrapEnabled="false">
                            <Columns>
                                <DxGridDataColumn Visible="@recordIDVisible" Width="225" Caption="Record Id" FieldName="_id" />
                                <DxGridDataColumn Width="175" Caption="DateTime" FieldName="DateTime" DisplayFormat="MM/dd/yyyy hh:mm tt" />
                                <DxGridDataColumn Width="150" Caption="Trade" FieldName="Trade" />
                                <DxGridDataColumn Width="auto" Caption="Details" FieldName="Details" />
                                <DxGridDataColumn Width="175" Caption="Author" FieldName="PMFullName" UnboundType="GridUnboundColumnType.String" UnboundExpression="Author.FirstName + ' ' + Author.LastName" />
                            </Columns>
                        </DxGrid>
                    </DxTabPage>

                    <DxTabPage Id="Panel-History" Text="History">

                        <h6>@EventList.Count() Events</h6>

                        <DxGrid @ref="EventGrid"
                            Data="@EventList"
                            KeyFieldName="_id"
                            PageSize="10"
                            PagerPosition="GridPagerPosition.Bottom"
                            ShowGroupPanel="true"
                            AutoExpandAllGroupRows="true"
                            ShowFilterRow="true"
                            PagerNavigationMode="PagerNavigationMode.InputBox"
                            PageSizeSelectorVisible="true"
                            PageSizeSelectorAllRowsItemVisible="false"
                            KeyboardNavigationEnabled="true"
                            TextWrapEnabled="false">
                            <Columns>
                                <DxGridDataColumn Visible="@recordIDVisible" Width="225" Caption="Record Id" FieldName="_id" />
                                <DxGridDataColumn Width="175" Caption="DateTime" FieldName="DateTime" DisplayFormat="MM/dd/yyyy hh:mm tt" />
                                <DxGridDataColumn Width="150" Caption="Trade" FieldName="Trade" />
                                <DxGridDataColumn Width="auto" Caption="Details" FieldName="Details" />
                                <DxGridDataColumn Width="175" Caption="Author" FieldName="PMFullName" UnboundType="GridUnboundColumnType.String" UnboundExpression="Author.FirstName + ' ' + Author.LastName" />
                            </Columns>
                        </DxGrid>

                    </DxTabPage>

                    <DxTabPage Id="Panel-Origination" Text="Origination">
                        <table id="table-origin" class="table-detail">
                            <tbody>

                                <tr>
                                    <td>
                                        <label>Market</label>
                                        <span>@CurrentlySelectedQuote.market</span>
                                    </td>
                                    <td>
                                        <label>Rep Name</label>
                                        <span>@CurrentlySelectedQuote.repName</span>
                                    </td>
                                    <td>
                                        <label>Rep Email</label>
                                        <a href="mailto:@CurrentlySelectedQuote.repEmail">
                                            <span>@CurrentlySelectedQuote.repEmail</span>
                                        </a>
                                    </td>
                                </tr>

                                <tr>
                                    <td>
                                        <label>RecId</label>
                                        <span>@CurrentlySelectedQuote._id</span>
                                    </td>
                                    <td>
                                        <label>Referrer</label>
                                        <a href="@CurrentlySelectedQuote.externalUrl" target="_blank">
                                            <span>@CurrentlySelectedQuote.externalUrl</span>
                                        </a>
                                    </td>
                                    <td>
                                        <label>Session</label>
                                        <span>@CurrentlySelectedQuote.sessionId</span>
                                    </td>
                                </tr>

                                <tr>
                                    <td>
                                        <label>RefId</label>
                                        <span>@CurrentlySelectedQuote.leadId</span>
                                    </td>
                                    <td>
                                        <label>Created</label>
                                        <span>@CurrentlySelectedQuote.timestamp</span>
                                    </td>
                                    <td>
                                    </td>

                                </tr>
                            </tbody>
                        </table>
                    </DxTabPage>

                </DxTabs>

                if (CurrentlySelectedQuote.status != "New")
                {
                    if (CurrentlySelectedQuote.applicationType != "Aggregate")
                    {
                        <div class="section-header">
                            10-Step Project Workflow
                        </div>

                        <DxTabs Id="tabs-Customer-Qualifications" CssClass="tabs-container">

                            <DxTabPage Id="Panel-Customer-Qualifications-Mission-Statement-Acknowledgment" CssClass="tab-container" Text="1) Mission Statement Acknowledgment">
                                Mission Statement Acknowledgment...
                            </DxTabPage>

                            <DxTabPage Enabled="false" Id="Panel-Customer-Qualifications-Needs-Analysis" Text="2) Needs Analysis">
                                Needs Analysis...
                            </DxTabPage>

                            <DxTabPage Enabled="false" Id="Panel-Customer-Qualifications-Project-Manager-Inspection-Report" Text="3) Project Manager Inspection Report">
                                Project Manager Inspection Report...
                            </DxTabPage>

                            <DxTabPage Enabled="false" Id="Panel-Customer-Qualifications-Pictometry-Measurements" Text="4) Pictometry Measurements">
                                Pictometry Measurements...
                            </DxTabPage>

                            <DxTabPage Enabled="false" Id="Panel-Customer-Qualifications-Installer-Inspection-Report" Text="5) Installer Inspection Report">
                                Installer Inspection Report...
                            </DxTabPage>

                            <DxTabPage Enabled="false" Id="Panel-Customer-Qualifications-Material-Order" Text="6) Material Order">
                                Material Order...
                            </DxTabPage>

                            <DxTabPage Enabled="false" Id="Panel-Customer-Qualifications-Labor-Order" Text="7) Labor Order">
                                Labor Order...
                            </DxTabPage>

                            <DxTabPage Enabled="false" Id="Panel-Customer-Qualifications-Total-Project-Expense-Summary" Text="8) Total Project Expense Summary">
                                Total Project Expense Summary...
                            </DxTabPage>

                            <DxTabPage Enabled="false" Id="Panel-Customer-Qualifications-Facilitate-Sample-Warranty" Text="9) Facilitate Sample Warranty">
                                Facilitate Sample Warranty...
                            </DxTabPage>

                            <DxTabPage Enabled="false" Id="Panel-Customer-Qualifications-Signed-Proposal" Text="10) Signed Proposal">
                                Signed Proposal...
                            </DxTabPage>

                        </DxTabs>
                    }
                }

                if (@CurrentlySelectedQuote.warranties.Count > 0)
                {
                    var claimsInitialized = false;

                    <div class="warranty-header">
                        Warranty Info
                    </div>

                    <DxTabs Id="tabs-Warranty-Info" CssClass="tabs-container">
                        @{
                            var claimCount = 0;
                            var claimLabel = "";

                            foreach (Warranty warranty in @CurrentlySelectedQuote.warranties)
                            {
                                switch (warranty._t)
                                {
                                    case "Assertion":
                                        <DxTabPage Id="Panel-Warranty-Assertion" CssClass="tab-container" Text="Coverage Statement">
                                            <div class="row">
                                                <div class="col">
                                                    <label>Claim #</label>
                                                    <span>@warranty._id</span>
                                                </div>
                                                <div class="col">
                                                    <label>Summary</label>
                                                    <span>@warranty._t</span>
                                                </div>
                                                <div class="col">
                                                    <label>Author</label>
                                                    <span>@warranty.Author.FirstName @warranty.Author.LastName</span>
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col">
                                                    <label>Date</label>
                                                    <span>@warranty.DateCreated</span>
                                                </div>
                                                <div class="col">
                                                    <label>Summary</label>
                                                    <span>@warranty.Summary</span>
                                                </div>
                                                <div class="col">
                                                    <label>Details</label>
                                                    <span>@warranty.Details</span>
                                                </div>
                                            </div>
                                        </DxTabPage>
                                        break;
                                    case "Claim":
                                        claimCount++;
                                        claimLabel = "Claim " + claimCount + " - Id: " + @warranty._id + "";

                                        <DxTabPage Id="Panel-Warranty-Claim" CssClass="tab-container" Text="@claimLabel">
                                            <div class="row">
                                                <div class="col">
                                                    <label>Date</label>
                                                    <span>@warranty.DateCreated</span>
                                                </div>
                                                <div class="col">
                                                    <label>Author</label>
                                                    <span>@warranty.Author.FirstName @warranty.Author.LastName</span>
                                                </div>
                                                <div class="col"></div>
                                            </div>
                                            <div class="row">
                                                <div class="col">
                                                    <label>Summary</label>
                                                    <span>@warranty.Summary</span>
                                                </div>
                                                <div class="col">
                                                    <label>Reason</label>
                                                    <span>@warranty.Details</span>
                                                </div>
                                                <div class="col"></div>
                                            </div>

                                            <hr />

                                            <div class="row">
                                                <div class="col">
                                                    <label>Completed?</label>
                                                    <span>@warranty.isCompleted</span>
                                                </div>
                                                <div class="col">
                                                    <label>Completed</label>
                                                    <span>@warranty.DateCompleted</span>
                                                </div>
                                                <div class="col">
                                                    <label>Notes</label>
                                                    <span>@warranty.CompletionDetails</span>
                                                </div>
                                            </div>

                                            <hr />

                                            <div class="row">
                                                <div class="col">&nbsp;</div>                                            
                                            </div>

                                            <div class="row">
                                                <div class="col" style="text-align: center !important;">
                                                    <button class="@currentActionButtonClass" @onclick="@(() => IsPopupVisibleCloseWarrantyClaim = true)">Close Warranty Claim</button>
                                                </div>
                                            </div>

                                            <div class="row">
                                                <div class="col">&nbsp;</div>                                            
                                            </div>
                                        </DxTabPage>
                                        break;
                                }
                            }
                        }
                    </DxTabs>
                    <br />
                }

                <div class="quote-detail-controls-container">
                @{
                    switch(CurrentlySelectedQuote.status)
                    {
                        case "New":
                            <button class="@currentActionButtonClass" @onclick="@(() => IsArchivePopupVisible = true)">Archive</button>
                            break;
                        case "Opportunity":
                            <button class="@currentActionButtonClass" @onclick="@(() => IsArchivePopupVisible = true)">Archive</button>
                            <button class="@currentActionButtonClass" @onclick="@(() => IsPopupVisibleMakeCustomer = true)">Make Customer</button>
                            break;
                        case "Customer":
                            <button class="@currentActionButtonClass" @onclick="@(() => IsPopupVisibleCompleteCustomer = true)">Complete Customer</button>
                            break;
                        case "Complete":
                            <button class="@currentActionButtonClass" @onclick="@(() => IsArchivePopupVisible = true)">Archive</button>
                            break;
                        case "Archive":
                                <button class="@currentActionButtonClass" @onclick="@(() => IsPopupVisibleMakeWarrantyClaim = true)">Make Warranty Claim</button>
                            break;
                        case "Warranty":
                                // <button class="@currentActionButtonClass" @onclick="@(() => IsPopupVisibleCloseWarrantyClaim = true)">Close Warranty Claim</button>
                            break;
                    }
                    <button class="@currentActionButtonClass" @onclick="ReturnPreviousPage">Return</button>
                }
                </div>

            }
        </DetailRowTemplate>

    </DxGrid>
}

<DxPopup @bind-Visible="@IsPopupVisibleAddTrade" ShowHeader="false" ShowFooter="true" HeaderText="Select Trade(s) to add">
    <BodyContentTemplate>
        <DxListBox Data="@TradesList"
                   @bind-Values="@TradeValues"
                   CssClass="popup-grid"
                   SelectionMode="ListBoxSelectionMode.Multiple"
                   SelectedItemsChanged="@((IEnumerable<ListItem> values) => SelectedTradesChanged(values))"
                   ShowCheckboxes="true">
            <Columns>
                <DxListEditorColumn FieldName="Value" Caption="Select Trade(s) to add" />
            </Columns>
        </DxListBox>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="@currentActionButtonClass" RenderStyle="ButtonRenderStyle.Primary" Text="Save" Click="AddTrade" />
        <DxButton CssClass="@currentActionButtonClass" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsPopupVisibleAddTrade = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleDeleteTrade" ShowFooter="true" HeaderText="Confirm trade project REMOVAL?">
    <BodyContentTemplate>
        @ConfirmRemoveMessage
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="@currentActionButtonClass" RenderStyle="ButtonRenderStyle.Primary" Text="Save" Click="DeleteTrade" />
        <DxButton CssClass="@currentActionButtonClass" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsPopupVisibleDeleteTrade = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleRestoreTrade" ShowFooter="true" HeaderText="Confirm trade project RESTORATION?">
    <BodyContentTemplate>
        @ConfirmRestoreMessage
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="@currentActionButtonClass" RenderStyle="ButtonRenderStyle.Primary" Text="Save" Click="RestoreTrade" />
        <DxButton CssClass="@currentActionButtonClass" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsPopupVisibleRestoreTrade = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleMakeWarrantyClaim" ShowFooter="true" HeaderText="Make a Warranty Claim?">
    <BodyContentTemplate>
        <p>Why are you making a Warranty Claim on this archived project?</p>
        <DxMemo @bind-Text="@NoteDetails" InputId="archive-reason" CssClass="cw-320" />
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="@currentActionButtonClass" RenderStyle="ButtonRenderStyle.Primary" Text="Save" Click="MakeWarrantyClaim" />
        <DxButton CssClass="@currentActionButtonClass" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsPopupVisibleMakeWarrantyClaim = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleCloseWarrantyClaim" ShowFooter="true" HeaderText="Close Warranty Claim?">
    <BodyContentTemplate>
        <p>Has this Warranty Claim been completed?</p>
        <DxMemo @bind-Text="@NoteDetails" InputId="archive-reason" CssClass="cw-320" />
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="@currentActionButtonClass" RenderStyle="ButtonRenderStyle.Primary" Text="Save" Click="CloseWarrantyClaim" />
        <DxButton CssClass="@currentActionButtonClass" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsPopupVisibleCloseWarrantyClaim = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleCompleteCustomer" ShowFooter="true" HeaderText="Complete Customer">
    <BodyContentTemplate>
        If this is fully qualified to Complete Customer criteria, then click Save.
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="@currentActionButtonClass" RenderStyle="ButtonRenderStyle.Primary" Text="Save" Click="CompleteCustomer" />
        <DxButton CssClass="@currentActionButtonClass" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsPopupVisibleCompleteCustomer = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleMakeCustomer" ShowFooter="true" HeaderText="Make Customer">
    <BodyContentTemplate>
        If this Opportunity is fully qualified to meet Customer criteria, then click Save.
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="@currentActionButtonClass" RenderStyle="ButtonRenderStyle.Primary" Text="Save" Click="MakeCustomer" />
        <DxButton CssClass="@currentActionButtonClass" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsPopupVisibleMakeCustomer = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsAssignPopupVisible"
         ShowFooter="true"
         HeaderText="Please select a Project Manager for assignment">
    <BodyContentTemplate>
        <DxListBox Data="@ProjectManagers"
                   @bind-Values="@QuoteValues"
                   CssClass="popup-grid"
                   SelectedItemsChanged="@((IEnumerable<ApplicationUser> values) => SelectedProjectManagerChanged(values))"
                   SelectionMode="ListBoxSelectionMode.Single"
                   ShowCheckboxes="true">
            <Columns>
                <DxListEditorColumn FieldName="LastName" Caption="Last" />
                <DxListEditorColumn FieldName="FirstName" Caption="First" />
                <DxListEditorColumn FieldName="Email" Caption="Email" />
                <DxListEditorColumn FieldName="Id" Visible="false" Caption="Id" />
            </Columns>
        </DxListBox>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="@currentActionButtonClass" Enabled="true" RenderStyle="ButtonRenderStyle.Primary" Text="Save" Click="AssignLead" />
        <DxButton CssClass="@currentActionButtonClass" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsAssignPopupVisible = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleSelectAttachmentToDelete" ShowFooter="true" HeaderText="Delete File">
    <BodyContentTemplate>
        Are you sure you want to delete "@selectedAttachment.MediaDescription"?
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="@currentActionButtonClass" RenderStyle="ButtonRenderStyle.Primary" Text="Delete" Click="DeleteSelectedAttachment" />
        <DxButton CssClass="@currentActionButtonClass" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsPopupVisibleSelectAttachmentToDelete = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleSelectNoteToDelete" ShowFooter="true" HeaderText="Delete Note">
    <BodyContentTemplate>
        Are you sure you want to delete "@selectedNote.Details"?
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="@currentActionButtonClass" RenderStyle="ButtonRenderStyle.Primary" Text="Delete" Click="DeleteSelectedNote" />
        <DxButton CssClass="@currentActionButtonClass" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsPopupVisibleSelectNoteToDelete = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleAddNote" ShowFooter="true" HeaderText="Add Note">
    <BodyContentTemplate>
        <p>Please type in your notes below.</p>
        <DxMemo @bind-Text="@NoteDetails" InputId="archive-reason" CssClass="cw-320" />
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton SubmitFormOnClick="true" CssClass="@currentActionButtonClass" RenderStyle="ButtonRenderStyle.Primary" Text="Save" Click="AddNote" />
        <DxButton CssClass="@currentActionButtonClass" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsPopupVisibleAddNote = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsArchivePopupVisible" ShowFooter="true" HeaderText="Please type in a reason for Archival below">
    <BodyContentTemplate>
        <DxMemo @bind-Text="@NoteDetails" InputId="archive-reason" CssClass="cw-320" />
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton SubmitFormOnClick="true" CssClass="@currentActionButtonClass" RenderStyle="ButtonRenderStyle.Primary" Text="Archive" Click="ArchiveQuote" />
        <DxButton CssClass="@currentActionButtonClass" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsArchivePopupVisible = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleHelpSendFiles" ShowFooter="true" HeaderText="Send Documents Help?">
    <BodyContentTemplate>
        <p>Send Documents details...</p>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="@currentActionButtonClass" RenderStyle="ButtonRenderStyle.Secondary" Text="Close" Click="@(() => IsPopupVisibleHelpSendFiles = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleHelpFileAttachments" ShowFooter="true" HeaderText="File Attachments Help?">
    <BodyContentTemplate>
        <p>File Attachments details...</p>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="@currentActionButtonClass" RenderStyle="ButtonRenderStyle.Secondary" Text="Close" Click="@(() => IsPopupVisibleHelpFileAttachments = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleHelpFileNotes" ShowFooter="true" HeaderText="File Notes Help?">
    <BodyContentTemplate>
        <p>File Notes details...</p>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="@currentActionButtonClass" RenderStyle="ButtonRenderStyle.Secondary" Text="Close" Click="@(() => IsPopupVisibleHelpFileNotes = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxLoadingPanel @bind-Visible=@LoadingPanelVisible
                PositionTarget="body"
                ApplyBackgroundShading="true"
                CssClass="w-100">
</DxLoadingPanel>

@code 
{

    public class DataGridViewRowPostPaintEventArgs : EventArgs;

    private void dgGrid_RowPostPaint(object sender, DataGridViewRowPostPaintEventArgs e)
    {
        var tmpVal = "";

        //var grid = sender as DataGridView;
        //var rowIdx = (e.RowIndex + 1).ToString();

        // var centerFormat = new StringFormat() 
        // { 
        //     // right alignment might actually make more sense for numbers
        //     Alignment = StringAlignment.Center, 
        //     LineAlignment = StringAlignment.Center
        // };

        // var headerBounds = new Rectangle(e.RowBounds.Left, e.RowBounds.Top, grid.RowHeadersWidth, e.RowBounds.Height);
        // e.Graphics.DrawString(rowIdx, this.Font, SystemBrushes.ControlText, headerBounds, centerFormat);
    }

    public bool hasChildren = false;

    public abstract class DxInputDataEditorBase<T> : DxDataEditor<T>;

    [Parameter]
    public EventCallback<string> TextChanged { get; set; }

    public void RestoreArchiveToActiveAggregate()
    {
        foreach(Relationship relationship in CurrentlySelectedQuote.relationships)
        {
            var name = relationship.Name;
            var parentId = relationship.ParentId;

            var parentQuote = WebServices.GetQuote(parentId)[0];

            var currentStatus = CurrentlySelectedQuote.status;

            CurrentlySelectedQuote.status = CurrentlySelectedQuote.statusPrevious; //parentQuote.status;

            CurrentlySelectedQuote.statusPrevious = currentStatus;
            break;
        }

        Event _event = new Event();
        _event.Author = currentUser;
        _event.Name = "Quote Restored";
        _event.Details = "Quote restored to current Aggregate (" + CurrentlySelectedQuote.status + ") status";

        CurrentlySelectedQuote.events.Add(_event);

        WebServices.UpdateQuote(CurrentlySelectedQuote);
    }

    void OnTotalQuoteValueChanged(string newValue)
    {
        Event _event = new Event();
        _event.Author = currentUser;

        var oldTotal = CurrentlySelectedQuote.totalQuote.ToString("C0");
        var newTotal = newValue.Replace("$", "");

        CurrentlySelectedQuote.totalQuote = Convert.ToDouble(newTotal);

        _event.Name = "Quote Total Modified";
        _event.Details = "Quote modified from (" + oldTotal + ") to ($" + newTotal + ")";

        CurrentlySelectedQuote.events.Add(_event);

        WebServices.UpdateQuote(CurrentlySelectedQuote);
    }

    public void RemoveSelectedChildItem(GridRowClickEventArgs args)
    {
        var selectedRow = (QuoteSummary)RelatedQuoteGrid.GetDataItem(args.VisibleIndex);
        var selectedQuoteId = selectedRow._id;
    }

    async Task OnEditModelSaving(GridEditModelSavingEventArgs args) 
    {
        var selectedQuote = args.DataItem;
    }

    async Task OnDataItemDeleting(GridDataItemDeletingEventArgs args)
    {
        QuoteSummary selectedQuote = (QuoteSummary)args.DataItem;

        quoteIdToRemove = selectedQuote._id;

        var quoteToRemove = WebServices.GetQuote(quoteIdToRemove)[0];
        quoteToRemove.status = "Archive";

        Event _event = new Event();
        _event.Author = currentUser;
        _event.Name = quoteToRemove.applicationType + " quote (" + quoteIdToRemove + ") removed from Aggregrate Parent (" + CurrentlySelectedQuote._id + ")";
        _event.Details = _event.Name;

        // Add event to child quote
        quoteToRemove.events.Add(_event);
        WebServices.UpdateQuote(quoteToRemove);

        // Add event to parent quote
        // Actually, the parent aggregate should only refkect individual child events at runtime.
        CurrentlySelectedQuote.events.Add(_event);
        WebServices.UpdateQuote(CurrentlySelectedQuote);
    }

    public bool recordIDVisible = false;

    public string quoteIdToRemove = "";
    public string quoteIdToRestore = "";

    public string ConfirmRemoveMessage { get; set; }
    public string ConfirmRestoreMessage { get; set; }

    [Parameter]
    public EventCallback<IEnumerable<ListItem>> SelectedItemsChanged { get; set; }

    [Parameter]
    public string SelectedQuoteStatus { get; set; }

    IEnumerable<ListItem> SelectedTradesToAdd = new List<ListItem>();

    List<ListItem> TradesList = new List<ListItem>();

    public void RedirectToQuoteDetails(string quoteId)
    {
        var tmpVal = SelectedQuoteStatus;

        var tmpUrl = "/quotes/details/" + quoteId + "/opportunities/";

        NavigationManager.NavigateTo(tmpUrl);
    }

    public void RemoveQuoteProject(string quoteId)
    {
        quoteIdToRemove = quoteId;

        IsPopupVisibleDeleteTrade = true;

        var quoteToRemove = WebServices.GetQuote(quoteId)[0];

        ConfirmRemoveMessage = "Are you sure you want to REMOVE this (" + quoteToRemove.applicationType + ") project?";
    }

    public void RestoreQuoteProject(string quoteId)
    {
        quoteIdToRestore = quoteId;

        IsPopupVisibleRestoreTrade = true;

        var quoteToRestore = WebServices.GetQuote(quoteIdToRestore)[0];

        ConfirmRestoreMessage = "Are you sure you want to RESTORE this (" + quoteToRestore.applicationType + ") project?";
    }

    public string uploadUrl = "/api/Upload/UploadFile";

    public int MaxFileSize = 1000000000; // 1000MB
    public int chunkSize = 20000;

    public List<string> allowedFileExtensions = new List<string> { ".jpeg", ".jpg", ".gif", ".mpg", ".mpeg", ".mp4", ".doc", ".docx", ".pdf" };
    public List<string> acceptableFileTypes = new List<string> { "audio/*", "doc/*", "image/*", "video/*" };

    bool ErrorVisible { get; set; } = false;
    string MyError { get; set; }

    public FileUrlStorageService _fileUrlStorageService;

    protected override async Task OnInitializedAsync()
    {
        _fileUrlStorageService = new FileUrlStorageService();

        uploadUrl = "/api/Upload/UploadFile";
    }

    protected string GetUploadUrl(string url)
    {
        var navUrl = NavigationManager.ToAbsoluteUri(url).AbsoluteUri;

        return navUrl;
    }

    protected void OnFileUploaded(FileUploadEventArgs args, TestModel item)
    {
        var fileUrl = _fileUrlStorageService.Get(Guid.Parse(args.FileInfo.Guid));
    }

    void OnUploadError(FileUploadErrorEventArgs e)
    {
        MyError = e.RequestInfo.ResponseText;
        ErrorVisible = true;
        InvokeAsync(StateHasChanged);
    }

    void OnFileUploadStarted(FileUploadEventArgs e) 
    {
        var MyMessage = "Upload of the " + e.FileInfo.Name + " file was started.";

        InvokeAsync(StateHasChanged);
    }

    protected void SelectedTradesChanged(IEnumerable<ListItem> trades)
    {
        SelectedTradesToAdd = trades;
    }

    protected void SelectedFilesChanged(IEnumerable<UploadFileInfo> files)
    {
        SelectedFilesCount = files.ToList().Count;
        InvokeAsync(StateHasChanged);

        foreach (UploadFileInfo file in files)
        {
            var fileGuid = file.Guid;
            var IsFileExtensionValid = allowedFileExtensions.Contains(file.Type);
            var fileIsMaxSizeValid = file.Size < MaxFileSize; // 1000MB
            var fileIsMinSizeValid = file.Size > 0;
            var fileLastModified = file.LastModified;
            var fileLoadedBtyes = file.LoadedBytes;
            // var fileRequestData = file.RequestData;
            // var fileRequestHeaders = file.RequestHeaders;
            var fileName = file.Name;
            var fileSize = file.Size;
            var fileType = file.Type;

            var tmpVal = "";
        }

        SendDocsDisabled = true;
    }

    protected void EmailFiles()
    {
        var tmpVal = "";
    }

    public void ReturnPreviousPage()
    {
        var previousPageUrl = "/quotes/" + Referrer;

        NavigationManager.NavigateTo(previousPageUrl);
    }

    public string RedcordIdButtonLabel = "Show Record Id";
    public void ShowRecordIDs()
    {
        if(recordIDVisible)
        {
            recordIDVisible = false;
            RedcordIdButtonLabel = "Show Record Id";
        }
        else
        {
            recordIDVisible = true;
            RedcordIdButtonLabel = "Hide Record Id";
        }
    }

    [Parameter]
    public string? Param { get; set; }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        string message = "";

        if (parameters.TryGetValue<string>(nameof(Param), out var value))
        {
            if (value is null)
            {
                message = "The value of 'Param' is null.";
            }
            else
            {
                message = $"The value of 'Param' is {value}.";
            }
        }

        await base.SetParametersAsync(parameters);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(QuoteGrid != null)
        {
            QuoteGrid.ExpandDetailRow(0);
            QuoteGrid.SelectAllAsync(true);

            TradesList = webServices.GetTradesList(true, CurrentlySelectedQuote.applicationType);

            // SetUIStyles(currentQuoteContainerType);
        }
    }

    bool IsPopupVisibleMakeCustomer { get; set; }

    public QuoteLeaderboard leaderboardStats = new QuoteLeaderboard();

    [Parameter]
    public string QuoteId { get; set; }

    [Parameter]
    public string Referrer { get; set; }

    public bool emailSentStatus = false;

    Utils utils = new Utils();

    async void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        TimerDispose();
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    public ApplicationUser currentUser = new ApplicationUser();
    public bool isSystemAdmin = false;
    public bool isUserAdmin = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // var ownerId = "";
        // var ownerType = "";
        // var fromAddress = "admin@facilitate.org";
        // var toAddress = "joseph.baranauskas@gmail.com";
        // var subject = "Testing Email Services";
        // var body = "This is just a test of the emergenct broadcast system. Had this been an actual emergency, you are toast!";
        // var isBodyHtml = true;

        // var emailSent = WebServices.SendEmail(ownerId, ownerType, fromAddress, toAddress, subject, body, isBodyHtml);

        if (firstRender)
        {
            try
            {
                var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
                var loggedInUser = authstate.User;
                var loggedInName = loggedInUser.Identity.Name;

                if (loggedInName != null && loggedInName != "")
                    currentUser = await UserManager.FindByNameAsync(loggedInName);

                if(currentUser.IsEnabled)
                {
                    isSystemAdmin = await UserManager.IsInRoleAsync(currentUser, "System Admin");

                    var isSiteAdmin = await UserManager.IsInRoleAsync(currentUser, "Site Admin");
                    var isGroupAdmin = await UserManager.IsInRoleAsync(currentUser, "Group Admin");

                    if (isSystemAdmin || isSiteAdmin || isGroupAdmin)
                    {
                        isUserAdmin = true;
                    }

                    List<ApplicationUser> adminUsers = new List<ApplicationUser>();
                    List<ApplicationUser> tmpUsers = UserManager.Users.ToList();
                    foreach (ApplicationUser adminUser in tmpUsers)
                    {
                        if (adminUser.IsEnabled)
                        {
                            var list = await UserManager.IsInRoleAsync(adminUser, "Project Manager");
                            adminUsers.Add(adminUser);
                        }
                    }

                    ProjectManagers = SortByLastNameUsingLinq(adminUsers);
                    TimerRefresh();

                    GetIpAddress();
                }
                else
                {
                    UserSignOut();
                }
            }
            catch (Exception ex)
            {
                var errMsg = ex.Message;
                return;
            }
        }
    }

    public void MakeCustomer()
    {
        CurrentlySelectedQuote.status = "Customer";

        var projectManager = CurrentlySelectedQuote.projectManager;

        Event _event = new Event();
        _event.Details = CurrentlySelectedQuote.firstName + " " + CurrentlySelectedQuote.lastName + " converted to Customer";
        _event.Author = currentUser;

        CurrentlySelectedQuote.events.Add(_event);

        WebServices.UpdateQuote(CurrentlySelectedQuote);

        IsPopupVisibleMakeCustomer = false;
    }

    private void UserSignOut()
    {
        try{

            SignInManager.SignOutAsync();

            NavigationManager.NavigateTo("/Account/Lockout");
        }
        catch(Exception ex)
        {
            var errMsg = ex.Message;
        }
    }

    private readonly IClaimsProvider _claimsProvider;

    public string currentQuoteContainerType = "Standalone";
    public string currentQuoteColorCssClass = "quote-color-standalone";
    public string currentQuoteHeaderTypeCssClass = "quote-header-standalone";
    public string currentQuoteContainerTypeCssClass = "quote-title-standalone";

    public string currentActionButtonClass = "action-button-standalone";

    public void SetUIStyles(string quoteContainerType)
    {
        switch (quoteContainerType.ToLower())
        {
            case "standalone":
                currentQuoteColorCssClass = "quote-color-standalone";
                currentQuoteHeaderTypeCssClass = "quote-header-standalone";
                currentQuoteContainerTypeCssClass = "quote-title-standalone";
                currentActionButtonClass = "action-button-standalone";
                break;

            case "parent":
                currentQuoteColorCssClass = "quote-color-parent";
                currentQuoteHeaderTypeCssClass = "quote-header-parent";
                currentQuoteContainerTypeCssClass = "quote-title-parent";
                currentActionButtonClass = "action-button-parent";
                break;

            case "child":
                currentQuoteColorCssClass = "quote-color-child";
                currentQuoteHeaderTypeCssClass = "quote-header-child";
                currentQuoteContainerTypeCssClass = "quote-title-child";
                currentActionButtonClass = "action-button-child";
                break;

            default:
                currentQuoteColorCssClass = "quote-color-standalone";
                currentQuoteHeaderTypeCssClass = "quote-header-standalone";
                currentQuoteContainerTypeCssClass = "quote-title-standalone";
                currentActionButtonClass = "action-button-standalone";
                break;
        }
    }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    public int currentItemIndex = 0;

    public int noteCount = 0;

    IEnumerable<string> QuoteValues { get; set; }
    IEnumerable<string> TradeValues { get; set; }

    public int tradesCount = 0;
    public int productsCount = 0;

    public string tradesCountLabel = "";
    public string productsCountLabel = "";

    public Quote CurrentlySelectedQuote { get; set; }
    public Attachment selectedAttachment { get; set; }
    public Note selectedNote { get; set; }

    bool LoadingPanelVisible { get; set; } = true;

    WebServices webServices = new WebServices();

    public bool IsAssignButtonEnabled = false;
    IEnumerable<ApplicationUser> SelectedProjectManager { get; set; }
    public List<ApplicationUser>? ProjectManagers = new List<ApplicationUser>();

    #region Private Properties

    private List<Quote>? QuotesList;
    private List<Quote>? childQuotes;

    int SelectedFilesCount { get; set; }

    ObjectId SelectedFileId { get; set; }

    IGrid QuoteGrid { get; set; }
    IGrid RelatedQuoteGrid { get; set; }
    IGrid AttachmentGrid { get; set; }
    IGrid EventGrid { get; set; }
    IGrid NoteGrid { get; set; }

    EntityInstantFeedbackSource InstantFeedbackSource { get; set; }

    string FileType { get; set; } = ".pdf";
    string Author { get; set; } = "unknown";

    string NoteDetails { get; set; } = "";

    #endregion

    #region Public Properties

    [Inject] public IJSRuntime jsRuntime { get; set; }

    public Timer _timer;

    public string ClientIP = "";

    public interface IQueryable : System.Collections.IEnumerable;

    public int currentItem = 0;
    public int selectedIndex = 0;

    public string SubmissionUserIP { get; set; }

    public string updateStatus = "Fetching ";

    #endregion

    #region Popup properties

    bool IsAssignPopupVisible { get; set; }

    bool IsPopupVisibleAddFile { get; set; }
    bool IsPopupVisibleSelectAttachmentToDelete { get; set; }

    bool IsPopupVisibleAddNote { get; set; }
    bool IsPopupVisibleSelectNoteToDelete { get; set; }

    bool IsArchivePopupVisible { get; set; }
    bool IsPopupVisibleCompleteCustomer { get; set; }
    bool IsPopupVisibleMakeWarrantyClaim { get; set; }
    bool IsPopupVisibleCloseWarrantyClaim { get; set; }

    bool IsPopupVisibleAddTrade { get; set; }
    bool IsPopupVisibleDeleteTrade { get; set; }
    bool IsPopupVisibleRestoreTrade { get; set; }

    bool IsPopupVisibleHelpSendFiles { get; set; }
    bool IsPopupVisibleHelpFileAttachments { get; set; }
    bool IsPopupVisibleHelpFileNotes { get; set; }

    #endregion

    #region Parameters

    [Parameter]
    public string DisplayFormat { get; set; }

    [Parameter]
    public List<string> AcceptedFileTypes { get; set; }

    [Parameter]
    public GridDetailRowDisplayMode DetailRowDisplayMode { get; set; }

    [Parameter]
    public string RefreshStatus { get; set; } = "";

    [Parameter]
    public string StatusContainerClass { get; set; } = "container-action-buttons-hide";

    [Parameter]
    public string StatusClass { get; set; } = "message-normal";

    [Parameter]
    public string ShowTestDataButtonText { get; set; } = "Show Test Data";

    [Parameter]
    public string RefreshButtonText { get; set; } = "Pause Refresh";

    [Parameter]
    public string RefreshButtonClass { get; set; } = "btn-refresh-active";

    [Parameter]
    public bool RefreshDisabled { get; set; } = false;

    [Parameter]
    public bool CreateLeadDisabled { get; set; } = true;

    [Parameter]
    public bool CreateLeadsDisabled { get; set; } = true;

    [Parameter]
    public bool SendDocsDisabled { get; set; } = true;

    [Parameter]
    public bool ArchiveLeadsDisabled { get; set; } = true;

    [Parameter]
    public object SelectedQuoteItem { get; set; }

    [Parameter]
    public object SelectedChildQuoteItem { get; set; }

    [Parameter]
    public object SelectedEventItem { get; set; }

    [Parameter]
    public int VisibleIndex { get; set; }

    [Parameter]
    public bool ClearFilterButtonVisible { get; set; }

    [Parameter]
    public string SelectedLeadType { get; set; } = "New";

    [Parameter]
    public string SelectedTradeType { get; set; } = "Roofing";

    #endregion

    #region Methods

    void SelectedTradesChanged(IEnumerable<ApplicationUser> selectedProjectManager)
    {
        if(selectedProjectManager.Count() > 0)
        {
            SelectedProjectManager = selectedProjectManager;

            if (SelectedProjectManager.Count() > 0)
                IsAssignButtonEnabled = true;
            else
                IsAssignButtonEnabled = false;
        }
    }

    void SelectedProjectManagerChanged(IEnumerable<ApplicationUser> selectedProjectManager)
    {
        if (selectedProjectManager.Count() > 0)
        {
            SelectedProjectManager = selectedProjectManager;

            if (SelectedProjectManager.Count() > 0)
                IsAssignButtonEnabled = true;
            else
                IsAssignButtonEnabled = false;
        }
    }

    public List<ApplicationUser> SortByLastNameUsingLinq(List<ApplicationUser> originalList)
    {
        return originalList.OrderBy(x => x.LastName).ToList();
    }

    void OnRowClick(GridRowClickEventArgs args)
    {
        var selectedQuoteId = "";
    }

    void ViewChildQuoteDetails(GridRowClickEventArgs args)
    {
        var selectedRow = (QuoteSummary)RelatedQuoteGrid.GetDataItem(args.VisibleIndex);
        var selectedQuoteId = selectedRow._id;

        var tmpUrl = "/quotes/details/" + selectedQuoteId + "/opportunities/";

        NavigationManager.NavigateTo(tmpUrl);
    }

    public void DeleteChildQuote(GridRowClickEventArgs args)
    {
        var selectedRow = (QuoteSummary)RelatedQuoteGrid.GetDataItem(args.VisibleIndex);
        var selectedQuoteId = selectedRow._id;
    }

    void OnTradeRowClick(SelectListItem args)
    {
        var tmpVal = "Here...";

    }

    public async Task<string> GetIpAddress()
    {
        try
        {
            SubmissionUserIP = await jsRuntime.InvokeAsync<string>("getIpAddress").ConfigureAwait(true);

            return SubmissionUserIP;
        }
        catch (Exception e)
        {
            //If your request was blocked by CORS or some extension like uBlock Origin then you will get an exception.
            return string.Empty;
        }
    }

    public void AssignLead()
    {
        // Only change status when assigning the first time.
        if (CurrentlySelectedQuote.status == "New")
        {
            CurrentlySelectedQuote.statusPrevious = CurrentlySelectedQuote.status;
            CurrentlySelectedQuote.status = "Opportunity";

            SendWelcomePackage();

            Event statusChanged = new Event();
            statusChanged.Details = CurrentlySelectedQuote.firstName + " " + CurrentlySelectedQuote.lastName + " converted to Opportunity";
            statusChanged.Author = currentUser;
            CurrentlySelectedQuote.events.Add(statusChanged);
        }

        CurrentlySelectedQuote.projectManager = SelectedProjectManager.ToList()[0];

        var projectManager = CurrentlySelectedQuote.projectManager;

        // Assignment event
        Event assignmentEvent = new Event();
        assignmentEvent.Name = "Assignment";
        assignmentEvent.Details = CurrentlySelectedQuote.applicationType + " Project assigned to Manager (" + projectManager.FirstName + " " + projectManager.LastName + ") and emailed to: (" + projectManager.Email + ")";
        assignmentEvent.Author = currentUser;

        // Email PM and Client here...

        CurrentlySelectedQuote.events.Add(assignmentEvent);

        WebServices.UpdateQuote(CurrentlySelectedQuote);

        IsAssignPopupVisible = false;
        IsAssignButtonEnabled = false;
    }

    public void SendWelcomePackage()
    {
        var sysUser = new ApplicationUser();
        sysUser.FirstName = "System";

        if (CurrentlySelectedQuote.attachments.Count == 0)
        {
            // Workflow and Subsequent Document Requirements
            Attachment workflowRequirements = new Attachment();
            workflowRequirements.MediaName = "Client Intro Package";
            workflowRequirements.MediaDescription = "Workflow and Subsequent Document Requirements";
            workflowRequirements.MediaUrl = "/docs/templates/misc/Workflow and Subsequent Document Requirements.pdf";
            workflowRequirements.Author = currentUser;
            CurrentlySelectedQuote.attachments.Add(workflowRequirements);

            Event workflowRequirementsEvent = new Event();
            workflowRequirementsEvent.Details = workflowRequirements.MediaDescription + " sent to " + CurrentlySelectedQuote.email;
            workflowRequirementsEvent.Author = currentUser;
            CurrentlySelectedQuote.events.Add(workflowRequirementsEvent);

            // Facilitate Engagement Agreement
            Attachment engagementAgreement = new Attachment();
            engagementAgreement.MediaName = "Client Intro Package";
            engagementAgreement.MediaDescription = "Facilitate Engagement Agreement";
            engagementAgreement.MediaUrl = "/docs/templates/agreements/Facilitate Engagement Agreement.docx";
            engagementAgreement.Author = currentUser;
            CurrentlySelectedQuote.attachments.Add(engagementAgreement);

            Event engagementAgreementEvent = new Event();
            engagementAgreementEvent.Details = engagementAgreement.MediaDescription + " sent to " + CurrentlySelectedQuote.email;
            engagementAgreementEvent.Author = currentUser;
            CurrentlySelectedQuote.events.Add(engagementAgreementEvent);

            // Welcome Letter
            Attachment welcomeLetter = new Attachment();
            welcomeLetter.MediaName = "Client Intro Package";
            welcomeLetter.MediaDescription = "Welcome to Facilitate.org";
            welcomeLetter.MediaUrl = "/docs/templates/boilerplate/Welcome to Facilitate.docx";
            welcomeLetter.Author = currentUser;
            CurrentlySelectedQuote.attachments.Add(welcomeLetter);

            Event welcomeLetterEvent = new Event();
            welcomeLetterEvent.Details = welcomeLetter.MediaDescription + " sent to " + CurrentlySelectedQuote.email;
            welcomeLetterEvent.Author = currentUser;
            CurrentlySelectedQuote.events.Add(welcomeLetterEvent);
        }
    }

    public void ArchiveQuoteOld()
    {
        CurrentlySelectedQuote.status = "Archive";

        Note note = new Note();
        note.Summary = CurrentlySelectedQuote.firstName + " " + CurrentlySelectedQuote.lastName + " moved to Archives";
        note.Details = @NoteDetails;
        note.Author = currentUser;

        CurrentlySelectedQuote.notes.Add(note);

        Event _event = new Event();
        _event.Details = CurrentlySelectedQuote.firstName + " " + CurrentlySelectedQuote.lastName + " moved to Archives";
        _event.Author = currentUser;
        CurrentlySelectedQuote.events.Add(_event);

        WebServices.UpdateQuote(CurrentlySelectedQuote);

        IsArchivePopupVisible = false;
        NoteDetails = "";
    }

    public void ArchiveQuote()
    {
        try
        {
            var currentQuoteId = CurrentlySelectedQuote._id;
            var currentQuote = WebServices.GetQuote(currentQuoteId)[0];

            if (NoteDetails != "" || NoteDetails != null)
            {
                Note note = new Note();
                note.Summary = currentQuote.applicationType + " (" + currentQuote._id + ") moved to Archives";
                note.Details = NoteDetails;
                note.Author = currentUser;

                currentQuote.notes.Add(note);
            }

            Event _event = new Event();
            _event.Details = currentQuote.applicationType + " (" + currentQuote._id + ") moved to Archives";
            _event.Author = currentUser;
            currentQuote.events.Add(_event);

            Quote relatedQuote = null;

            if (currentQuote.applicationType == "Aggregate")
            {
                foreach (Relationship relationship in currentQuote.relationships)
                {
                    var relatedQuoteId = relationship.ParentId;

                    if (relatedQuoteId != null && relatedQuoteId != "")
                    {
                        var tmpVal = relatedQuoteId;

                        var tmpQuote = WebServices.GetQuote(relatedQuoteId)[0];

                        tmpQuote.statusPrevious = tmpQuote.status;
                        tmpQuote.status = "Archive";

                        // _event.DateTime = DateTime.UtcNow;
                        // _event.Name = "Aggregate Project Archived";
                        // _event.Details = "Child quote " + " relatedQuote.applicationType + " moved to Archives";
                        // _event.Author = currentUser;
                        // relatedQuote.events.Add(_event);

                        WebServices.UpdateQuote(tmpQuote);
                    }
                }
            }

            currentQuote.statusPrevious = currentQuote.status;
            currentQuote.status = "Archive";

            WebServices.UpdateQuote(currentQuote);

            // WebServices.UpdateQuote(currentQuote);

            IsArchivePopupVisible = false;
            NoteDetails = "";
        }
        catch(Exception ex)
        {
            var errMsg = ex.Message;
        }
    }

    public void AddNote()
    {
        Note note = new Note();
        note.Summary = "Note Added";
        note.Details = @NoteDetails;
        note.Author = currentUser;

        CurrentlySelectedQuote.notes.Add(note);

        Event _event = new Event();
        _event.Details = "Note (" + note.Details + ") added to Quote";
        _event.Author = currentUser;

        CurrentlySelectedQuote.events.Add(_event);

        IsPopupVisibleAddNote = false;
        NoteDetails = "";

        WebServices.UpdateQuote(CurrentlySelectedQuote);
    }

    public void CloseDetails()
    {
    }

    public void SelectAttachmentToDelete(Quote quote, Attachment attachment)
    {
        CurrentlySelectedQuote = quote;
        selectedAttachment = attachment;

        IsPopupVisibleSelectAttachmentToDelete = true;
    }

    public void SelectNoteToDelete(Quote quote, Note note)
    {
        CurrentlySelectedQuote = quote;
        selectedNote = note;

        IsPopupVisibleSelectNoteToDelete = true;
    }

    public void DeleteSelectedAttachment()
    {
        selectedAttachment.IsDeleted = true;

        Event _event = new Event();
        _event.Details = "Deleted attachment (" + selectedAttachment.MediaDescription + ") from Quote";
        _event.Author = currentUser;

        CurrentlySelectedQuote.events.Add(_event);

        WebServices.UpdateQuote(CurrentlySelectedQuote);

        IsPopupVisibleSelectAttachmentToDelete = false;
    }

    public void DeleteSelectedNote()
    {
        selectedNote.IsDeleted = true;

        Event _event = new Event();
        _event.Details = "Deleted note (" + selectedNote.Details + ") from Quote";
        _event.Author = currentUser;

        CurrentlySelectedQuote.events.Add(_event);

        WebServices.UpdateQuote(CurrentlySelectedQuote);

        IsPopupVisibleSelectNoteToDelete = false;
    }

    public bool isAggregate = false;
    public Quote originalQuoteCopy = null;
    public Quote parentQuote = null;
    public List<Quote> newQuoteListQueue = new List<Quote>();

    public void AddTrade()
    {
        var originalQuoteId = CurrentlySelectedQuote._id;

        if (CurrentlySelectedQuote.applicationType == "Aggregate")
        {
            isAggregate = true;
        }

        // Create Parent quote from a copy of original quote
        parentQuote = new Quote(CurrentlySelectedQuote);

        // Master inherits id from the original. That way email links will continue working once converted to an aggregate
        // parentQuote._id = ObjectId.GenerateNewId().ToString();
        parentQuote.applicationType = "Aggregate";
        parentQuote.totalQuote = 0;
        parentQuote.notes = new List<Note>();
        parentQuote.attachments = new List<Attachment>();
        parentQuote.events = new List<Event>();
        parentQuote.Groups = new List<ObjectId>();
        parentQuote.products = new List<Product>();
        parentQuote.warranties = new List<Warranty>();

        // Create Parent relationship
        var parentRelationship = new Relationship();
        parentRelationship.Author = currentUser.Email;
        parentRelationship._id = parentQuote._id;
        parentRelationship.ParentId = parentQuote._id;
        parentRelationship.Type = "Parent";
        parentRelationship.Name = parentQuote.applicationType;

        // Create copy of original quote
        originalQuoteCopy = new Quote(CurrentlySelectedQuote);
        originalQuoteCopy._id = ObjectId.GenerateNewId().ToString();

        // Delete original quote
        CurrentlySelectedQuote.status = "Aggregate-Source";
        WebServices.DeleteQuote(CurrentlySelectedQuote);

        // Now add the new copy with originalId
        //originalQuoteCopy._id = originalQuoteId;
        newQuoteListQueue.Add(originalQuoteCopy);

        // Create Child relationship
        var childRelationship = new Relationship();
        childRelationship.Author = currentUser.Email;
        childRelationship._id = parentQuote._id;
        childRelationship.ParentId = parentQuote._id;
        childRelationship.Type = "Child";
        childRelationship.Name = parentQuote.applicationType;

        Event _event = new Event();
        _event.Author = currentUser;

        try
        {
            if(!isAggregate)
            {
                // Add events to new Master
                _event = new Event();
                _event.DateTime = DateTime.UtcNow;
                _event.Author = currentUser;
                _event.Name = "Aggregate project created";
                _event.Details = "Aggregate spawned from original " + originalQuoteCopy.applicationType + " quote (" + originalQuoteCopy._id + ")";

                parentQuote.events.Add(_event);

                newQuoteListQueue.Add(parentQuote);

                // Create child quotes
                foreach (var selectedTrade in SelectedTradesToAdd)
                {
                    Quote childQuote = new Quote(originalQuoteCopy);
                    childQuote.applicationType = selectedTrade.Value;

                    // Add Parent relationship to Child
                    if (childQuote.applicationType != "Aggregate")
                    {
                        // Reset new child instance product properties.
                        if (originalQuoteCopy.applicationType != selectedTrade.Value)
                        {
                            //childQuote.applicationType = "";
                            childQuote.timestamp = DateTime.UtcNow;
                            childQuote.lastUpdated = DateTime.UtcNow;
                            childQuote.totalQuote = 0;
                            childQuote.notes = new List<Note>();
                            childQuote.attachments = new List<Attachment>();
                            childQuote.events = new List<Event>();
                            childQuote.Groups = new List<ObjectId>();
                            childQuote.products = new List<Product>();
                            childQuote.warranties = new List<Warranty>();
                        }

                        // Add events to new Master
                        _event = new Event();
                        _event.DateTime = DateTime.UtcNow;
                        _event.Author = currentUser;
                        _event.Name = childQuote.applicationType + " Quote Created";
                        _event.Details = "Child (" + childQuote.applicationType + ") quote created from original " + originalQuoteCopy.applicationType + " quote (" + originalQuoteCopy._id + ")";

                        childQuote.events.Add(_event);

                        newQuoteListQueue.Add(childQuote);
                    }
                }

                parentQuote.relationships.Clear();

                foreach (Quote currentQuote in newQuoteListQueue)
                {
                    // Ensure unique ids
                    currentQuote._id = ObjectId.GenerateNewId().ToString();

                    if (currentQuote.applicationType != "Aggregate")
                    {
                        // Create Parent relationship
                        currentQuote.relationships.Add(parentRelationship);

                        // Create Child relationship
                        childRelationship = new Relationship();
                        childRelationship._id = currentQuote._id;
                        childRelationship.ParentId = parentQuote._id;
                        childRelationship.Type = "Child";
                        childRelationship.Name = currentQuote.applicationType;

                        parentQuote.relationships.Add(childRelationship);
                    }
                }
            }
            else
            {
                newQuoteListQueue.Clear();

                // Append child quotes to current Aggregate
                foreach (var selectedTrade in SelectedTradesToAdd)
                {
                    Quote childQuote = new Quote(originalQuoteCopy);
                    childQuote.applicationType = selectedTrade.Value;

                    // Reset new child instance product properties.
                    if (originalQuoteCopy.applicationType != selectedTrade.Value)
                    {
                        childQuote.totalQuote = 0;
                        childQuote.notes = new List<Note>();
                        childQuote.attachments = new List<Attachment>();
                        childQuote.events = new List<Event>();
                        childQuote.Groups = new List<ObjectId>();
                        childQuote.products = new List<Product>();
                        childQuote.warranties = new List<Warranty>();
                        childQuote.relationships = new List<Relationship>();
                    }

                    // Add events to new Child
                    _event = new Event();
                    _event.DateTime = DateTime.UtcNow;
                    _event.Author = currentUser;
                    _event.Name = "Child project Created";
                    _event.Details = "Child (" + childQuote.applicationType + ") quote created from original " + originalQuoteCopy.applicationType + " quote (" + originalQuoteCopy._id + ")";

                    // Add this event to child
                    childQuote.events.Add(_event);

                    // Add events to new Master
                    _event = new Event();
                    _event.DateTime = DateTime.UtcNow;
                    _event.Author = currentUser;
                    _event.Name = "Child project Attached";
                    _event.Details = "Child (" + childQuote.applicationType + ") attached to Aggregate " + originalQuoteCopy.applicationType + " quote (" + originalQuoteCopy._id + ")";

                    parentQuote.events.Add(_event);

                    // Add Parent relationship to Child
                    if (childQuote.applicationType != "Aggregate")
                    {
                        if(parentQuote.applicationType != "Aggregate")
                            parentQuote.relationships.Add(childRelationship);

                        newQuoteListQueue.Add(childQuote);
                    }
                }

                foreach (Quote currentQuote in newQuoteListQueue)
                {
                    // Ensure unique ids
                    currentQuote._id = ObjectId.GenerateNewId().ToString();

                    if (currentQuote.applicationType != "Aggregate")
                    {
                        // Create Child relationship
                        childRelationship = new Relationship();
                        childRelationship._id = currentQuote._id;
                        childRelationship.ParentId = parentQuote._id;
                        childRelationship.Type = "Child";
                        childRelationship.Name = currentQuote.applicationType;

                        parentQuote.relationships.Add(childRelationship);
                    }
                }
            }

            parentQuote._id = originalQuoteId;

            WebServices.UpdateQuote(parentQuote);

            SaveRelatedQuotes(newQuoteListQueue);

            IsPopupVisibleAddTrade = false;

            //TimerRefresh();

            if(!isAggregate)
            {
                // Redirect to Master details page
                RedirectToQuoteDetails(parentQuote._id);
            }
            else
            {
                // Refresh current quote
                TimerRefresh();
            }
        }
        catch(Exception ex)
        {
            var errMsg = ex.Message;
        }
    }

    public void SaveRelatedQuotes(List<Quote> newQuoteListQueue)
    {
        try
        {
            foreach (Quote currentQuote in newQuoteListQueue)
            {
                if (currentQuote.applicationType != "Aggregate")
                {
                    Quote tmpQuote = new Quote(currentQuote);

                    WebServices.CreateQuote(tmpQuote);
                }
            }
        }
        catch (Exception ex)
        {
            var errMsg = ex.Message;
        }
    }

    public void DeleteTrade()
    {
        // Get this quote, set it archive and update it
        var quoteId = quoteIdToRemove;
        var quoteToRemove = WebServices.GetQuote(quoteId)[0];

        quoteToRemove.status = "Archive";
        quoteToRemove.lastUpdated = DateTime.UtcNow;

        WebServices.UpdateQuote(quoteToRemove);

        // Parse and remove all relationships including siblings
        var tmpQuote = CurrentlySelectedQuote;

        foreach (Relationship relationship in CurrentlySelectedQuote.relationships)
        {
            // Disable removed quoteId from all siblings
            if (relationship._id == quoteId)
                relationship.IsEnabled = false;
        }

        WebServices.UpdateQuote(CurrentlySelectedQuote);

        IsPopupVisibleDeleteTrade = false;

    }

    public void RestoreTrade()
    {
        // Get this quote, set it archive and update it
        var quoteId = quoteIdToRestore;
        var quoteToRestore = WebServices.GetQuote(quoteId)[0];

        // What is the current aggregate Status and set this to that
        quoteToRestore.status = CurrentlySelectedQuote.statusPrevious;
        quoteToRestore.lastUpdated = DateTime.UtcNow;

        WebServices.UpdateQuote(quoteToRestore);

        // Parse and remove all relationships including siblings
        var tmpQuote = CurrentlySelectedQuote;

        foreach (Relationship relationship in CurrentlySelectedQuote.relationships)
        {
            // Disable removed quoteId from all siblings
            if (relationship._id == quoteId)
                relationship.IsEnabled = true;
        }

        WebServices.UpdateQuote(CurrentlySelectedQuote);

        IsPopupVisibleRestoreTrade = false;

    }

    public void MakeWarrantyClaim()
    {
        CurrentlySelectedQuote.status = "Warranty";

        var projectManager = CurrentlySelectedQuote.projectManager;

        Warranty warranty = new Warranty();
        warranty._t = "Claim";
        warranty.Summary = "Warranty Claim";
        warranty.Details = @NoteDetails;
        warranty.Author = currentUser;

        CurrentlySelectedQuote.warranties.Add(warranty);

        Note note = new Note();
        note.Summary = "Note Added (Make Warranty Claim)";
        note.Details = @NoteDetails;
        note.Author = currentUser;

        CurrentlySelectedQuote.notes.Add(note);

        Event _event = new Event();
        _event.Details = "Archive converted to Warranty Claim";
        _event.Author = currentUser;

        CurrentlySelectedQuote.events.Add(_event);

        WebServices.UpdateQuote(CurrentlySelectedQuote);

        IsPopupVisibleMakeWarrantyClaim = false;
        NoteDetails = "";
    }

    public void CloseWarrantyClaim()
    {
        List<Warranty> warranties = new List<Warranty>();

        CurrentlySelectedQuote.status = "Archive";

        try
        {
            foreach (Warranty warranty in CurrentlySelectedQuote.warranties)
            {
                if (warranty._t == "Claim")
                {
                    Warranty _warranty = new Warranty();
                    _warranty._t = warranty._t;
                    _warranty.DateCreated = warranty.DateCreated;
                    _warranty.Summary = warranty.Summary;
                    _warranty.Details = warranty.Details;
                    _warranty.Author = currentUser;

                    _warranty.isCompleted = true;
                    _warranty.DateCompleted = DateTime.UtcNow;
                    _warranty.CompletionDetails = @NoteDetails;

                    warranties.Add(_warranty);
                }
            }

            CurrentlySelectedQuote.warranties.Clear();

            CurrentlySelectedQuote.warranties.AddRange(warranties);

            var projectManager = CurrentlySelectedQuote.projectManager;

            Note note = new Note();
            note.Summary = "Note Added (Close Warranty Claim)";
            note.Details = @NoteDetails;

            CurrentlySelectedQuote.notes.Add(note);

            Event _event = new Event();
            _event.Details = "Warranty Claim moved back to Archive";
            _event.Author = currentUser;

            CurrentlySelectedQuote.events.Add(_event);

            WebServices.UpdateQuote(CurrentlySelectedQuote);

            IsPopupVisibleCloseWarrantyClaim = false;
            NoteDetails = "";
        }
        catch(Exception ex)
        {
            var errMsg = ex.Message;
        }
    }

    public void CompleteCustomer()
    {
        CurrentlySelectedQuote.status = "Complete";

        var projectManager = CurrentlySelectedQuote.projectManager;

        Event _event = new Event();
        _event.Details = CurrentlySelectedQuote.firstName + " " + CurrentlySelectedQuote.lastName + " converted to Completed Customer";
        _event.Author = currentUser;

        CurrentlySelectedQuote.events.Add(_event);

        WebServices.UpdateQuote(CurrentlySelectedQuote);

        IsPopupVisibleCompleteCustomer = false;
    }

    public void TimerDispose()
    {
        _timer?.Dispose();
        _timer = null;
    }

    public List<QuoteSummary> tmpRelatedQuoteSummaryList = new List<QuoteSummary>();
    public List<QuoteSummary> RelatedQuoteSummaryList = new List<QuoteSummary>();
    public List<Attachment> AttachmentList = new List<Attachment>();
    public List<Event> EventList = new List<Event>();
    public List<Note> NoteList = new List<Note>();

    public QuoteSummary currentParentQuoteSummary = null;

    public int parentCount = 0;

    private async Task TimerRefresh()
    {
        bool isAggregate = false;
        double aggregateTotal = 0;
        double standaloneTotal = 0;
        string authorName = "";

        bool hasParent = false;

        DateTime lastQuoteEventTimestamp = DateTime.MinValue;
        string lastQuoteEventDetails = "";

        TimerDispose();

        _timer = new Timer(new TimerCallback(_ =>
        {
            aggregateTotal = 0;
            standaloneTotal = 0;

            RelatedQuoteSummaryList = new List<QuoteSummary>();
            AttachmentList = new List<Attachment>();
            EventList = new List<Event>();
            NoteList = new List<Note>();

            QuotesList = webServices.GetQuote(QuoteId);
            if(QuotesList != null)
            {
                CurrentlySelectedQuote = QuotesList[0];

                standaloneTotal = CurrentlySelectedQuote.totalQuote;

                // Process attachments
                foreach(Attachment attachment in CurrentlySelectedQuote.attachments)
                {
                    attachment.Trade = CurrentlySelectedQuote.applicationType;
                    if (attachment.MediaName == "")
                        attachment.MediaName = "Filename?";
                }
                AttachmentList.AddRange(CurrentlySelectedQuote.attachments);

                // Process events
                foreach(Event _event in CurrentlySelectedQuote.events)
                {
                    _event.Trade = CurrentlySelectedQuote.applicationType;

                    if(_event.DateTime > lastQuoteEventTimestamp)
                    {
                        lastQuoteEventTimestamp = _event.DateTime;
                        lastQuoteEventDetails = _event.Details;
                    }
                }
                EventList.AddRange(CurrentlySelectedQuote.events);

                // Process notes
                foreach (Note note in CurrentlySelectedQuote.notes)
                {
                    note.Trade = CurrentlySelectedQuote.applicationType;
                }
                NoteList.AddRange(CurrentlySelectedQuote.notes);

                // Get child quote summaries
                tmpRelatedQuoteSummaryList = webServices.GetRelatedQuoteSummaries(CurrentlySelectedQuote);
                foreach (QuoteSummary RelatedQuoteSummary in tmpRelatedQuoteSummaryList)
                {
                    isAggregate = true;

                    if(CurrentlySelectedQuote._id != RelatedQuoteSummary._id)
                    {
                        if (RelatedQuoteSummary.relationship == "Parent")
                        {
                            if(!hasParent)
                            {
                                currentParentQuoteSummary = RelatedQuoteSummary;
                                hasParent = true;
                                parentCount = 1;
                            }

                            if(RelatedQuoteSummary.applicationType == "Aggregate")
                            {
                                RelatedQuoteSummary.relationship = "Parent";
                            }
                            else
                            {
                                // If trade != aggregate, then it is a sibling
                                RelatedQuoteSummary.relationship = "Sibling";
                            }
                            currentQuoteContainerType = "Child";
                        }
                        else
                        {
                            RelatedQuoteSummary.relationship = "Child";

                            if (CurrentlySelectedQuote.applicationType == "Aggregate")
                            {
                                currentQuoteContainerType = "Parent";
                            }
                            else
                            {
                                currentQuoteContainerType = "Child";
                            }
                        }

                        // Add to summary list   
                        if(RelatedQuoteSummary.relationship != "Parent")
                        {
                            RelatedQuoteSummaryList.Add(RelatedQuoteSummary);
                        }

                        if (RelatedQuoteSummary.status != "Archive")
                        {
                            aggregateTotal += RelatedQuoteSummary.totalQuote;
                        }
                    }

                    var childQuote = webServices.GetQuote(RelatedQuoteSummary._id)[0];
                    if(childQuote != null)
                    {
                        if (childQuote.status != "Archive")
                        {
                            // Process attachments
                            foreach (Attachment attachment in childQuote.attachments)
                            {
                                attachment.Trade = childQuote.applicationType;
                                if (attachment.MediaName == "")
                                    attachment.MediaName = "Filename?";
                            }
                            AttachmentList.AddRange(childQuote.attachments);

                            // Process events
                            foreach (Event _event in childQuote.events)
                            {
                                _event.Trade = childQuote.applicationType;

                                if(_event.DateTime > lastQuoteEventTimestamp)
                                {
                                    lastQuoteEventTimestamp = _event.DateTime;
                                    lastQuoteEventDetails = _event.Details;
                                }
                            }
                            EventList.AddRange(childQuote.events);

                            // Process notes
                            foreach (Note note in childQuote.notes)
                            {
                                note.Trade = childQuote.applicationType;
                            }
                            NoteList.AddRange(childQuote.notes);
                        }
                    }
                }

                if (CurrentlySelectedQuote.applicationType == "Aggregate")
                {
                    CurrentlySelectedQuote.totalQuote = aggregateTotal;
                }
                else
                {
                    CurrentlySelectedQuote.totalQuote = standaloneTotal;
                }

                foreach (QuoteSummary RelatedQuote in RelatedQuoteSummaryList)
                {
                    foreach(Event _event in RelatedQuote.events)
                    {
                        if(_event.DateTime > lastQuoteEventTimestamp)
                        {
                            lastQuoteEventTimestamp = _event.DateTime;
                            lastQuoteEventDetails = _event.Details;
                        }
                    }
                }

                // Add Parent to summary list   
                if(currentParentQuoteSummary!= null)
                {
                    RelatedQuoteSummaryList.Add(currentParentQuoteSummary);
                }

                // Sort collections
                // RelatedQuoteSummaryList = RelatedQuoteSummaryList.OrderBy(x => x.applicationType).ToList();
                RelatedQuoteSummaryList = RelatedQuoteSummaryList.OrderByDescending(x => x.lastEventTimeStamp).ToList();

                AttachmentList = AttachmentList.OrderByDescending(x => x.DateTime).ToList();
                EventList = EventList.OrderByDescending(x => x.DateTime).ToList();
                NoteList = NoteList.OrderByDescending(x => x.DateTime).ToList();

                SetUIStyles(currentQuoteContainerType);

                InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            }  
        }), null, 1000, 1000);

        LoadingPanelVisible = false;
    }

    private async Task<bool> IsUserEnabled()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var name = user.Identity.Name;

        if (name != null && name != "")
            currentUser = await UserManager.FindByNameAsync(name);

        return currentUser.IsEnabled;
    }

    #endregion
}