@page "/quotes/details"
@page "/quotes/details/{QuoteId}"
@page "/quotes/details/{QuoteId}/{Referrer}"

@using Facilitate.Admin.Data;
@using Facilitate.Libraries.Models;

@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Mvc.Rendering;
@using Microsoft.AspNetCore.WebUtilities;

@* @using Microsoft.AspNetCore.Http.Extensions; *@
@using Microsoft.AspNetCore.Http;

@using MongoDB.Bson;

@using System.Text.Json;

@using DevExpress.Blazor;
@using DevExpress.Data;
@using DevExpress.Data.Linq;
@using DevExpress.Web;

@using Microsoft.AspNetCore.Html;

@attribute [StreamRendering(true)]
@rendermode InteractiveServer
@inject WebServices WebServices

@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory
@inject HttpClient httpClient

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject RoleManager<IdentityRole> roleManager

@inject IJSRuntime JSRuntime

@inject AuthenticationStateProvider GetAuthenticationStateAsync

@attribute [IgnoreAntiforgeryToken]

<PageTitle>Leads</PageTitle>

<AuthorizeView>
    <Authorized></Authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/Account/Login?returnurl=" + NavigationManager.Uri);
        }
    </NotAuthorized>
</AuthorizeView>

<script>
    window.getIpAddress = () => {
        return fetch('https://jsonip.com/')
            .then((response) => response.json())
            .then((data) => {
                return data.ip
            })
    }

    function getReferrer() {
        return document.referrer;
    }
</script>

@if (quotes == null)
{
    @*     <p><em>Loading...</em></p> *@
}
else
{
    <div class="details-header">
        <button class="action-button header-return-button" @onclick="ReturnPreviousPage">Return</button>
       @selectedQuote.status Details for @selectedQuote.firstName @selectedQuote.lastName
    </div>

    <DxGrid @ref="QuoteGrid"
            Data="@quotes"
            KeyFieldName="_id"
            PageSize="1"
            ShowFilterRow="false"
            CssClass="mw-1100"
            AutoExpandAllGroupRows="true"
            RowClick="OnRowClick"
            AllowSelectRowByClick="true"
            SelectionMode="GridSelectionMode.Single"
            @bind-SelectedDataItem="@SelectedQuoteItem"
            TextWrapEnabled="false">
        <Columns>
            <DxGridDataColumn Width="225" Caption="Id" FieldName="_id" />
            <DxGridDataColumn Width="auto" Caption="Trade" FieldName="applicationType" />
            <DxGridDataColumn Width="auto" Caption="Created" FieldName="timestamp" DisplayFormat="MM/dd/yyyy hh:mm tt" SortIndex="0" SortOrder="GridColumnSortOrder.Descending" AllowSort="true" />
            <DxGridDataColumn Width="auto" Caption="Updated" FieldName="lastUpdated" DisplayFormat="MM/dd/yyyy hh:mm tt" />
            <DxGridDataColumn Width="auto" Caption="Street" FieldName="street" />
            <DxGridDataColumn Width="auto" Caption="City" FieldName="city" />
            <DxGridDataColumn Width="auto" Caption="State" FieldName="state" />
            <DxGridDataColumn Width="auto" Caption="Zip" FieldName="zip" />
@*             <DxGridDataColumn Width="65" Caption="SqFt" FieldName="totalSquareFeet" />
            <DxGridDataColumn Width="75" Caption="Quote" DisplayFormat="C0" FieldName="totalQuote" /> *@
        </Columns>

        <DetailRowTemplate>
            @{
                selectedQuote = (Quote)context.DataItem;

                var _emailTabLabel = "Email " + @selectedQuote.firstName + " Documents";

                roofsCount = selectedQuote.structures.Count;
                if (roofsCount <= 1)
                    roofsCountLabel = roofsCount.ToString() + " Roof Selected";
                else
                    roofsCountLabel = roofsCount.ToString() + " Roofs Selected";

                productsCount = selectedQuote.products.Count;
                if (productsCount <= 1)
                    productsCountLabel = productsCount.ToString() + " Product Quoted";
                else
                    productsCountLabel = productsCount.ToString() + " Products Quoted";

                attachmentsCount = selectedQuote.attachments.Count;
                notesCount = selectedQuote.notes.Count;
                eventsCount = selectedQuote.events.Count;

                <div class="row">
                    <div class="col-md-4">
                        <label>Name</label>
                        <span>@selectedQuote.firstName @selectedQuote.lastName</span>
                    </div>
                    <div class="col-md-4">
                        <label>Address</label>
                        <a href="https://www.google.com/maps/search/@selectedQuote.street @selectedQuote.city, @selectedQuote.state @selectedQuote.zip" target="_blank">
                            @selectedQuote.street @selectedQuote.city, @selectedQuote.state @selectedQuote.zip
                        </a>
                    </div>
                    <div class="col-md-4 quote-total">
                        <span class="">@selectedQuote.totalSquareFeet.ToString("N0")</span>
                        <span class="">sqft &raquo;</span>
                        <span class="">@selectedQuote.totalQuote.ToString("C0")</span>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <label>Email</label>
                        <a href="mailto:@selectedQuote.email">
                            <span>@selectedQuote.email</span>
                        </a>
                    </div>
                    <div class="col-md-4">
                        <label>Phone</label>
                        <span>@selectedQuote.phone</span>
                    </div>
                    <div class="col-md-4"></div>
                </div>

                <div class="section-header">
                    Project Dashboard
                </div>

                <DxTabs CssClass="tabs-container">

                    <DxTabPage Id="Panel-Project-Manager" Text="Project Management">
                    @{
                        if (isSystemAdmin)
                        {
                            <button class="action-button" @onclick="@(() => IsAssignPopupVisible = true)">Manager Assignment</button>
                            <br /><br />
                        }

                        if (selectedQuote.projectManager != null)
                        {
                            <div class="row">
                                <div class="col">
                                    <label>Project Manager</label>
                                    <span class="detail-item">@selectedQuote.projectManager.FirstName</span><span class="detail-item">@selectedQuote.projectManager.LastName</span>
                                </div>

                                <div class="col">
                                    <label>Phone</label>
                                    <span class="detail-item">@selectedQuote.projectManager.Phone</span>
                                </div>
                                <div class="col">
                                    <label>Email</label>
                                    <a href="mailto:@selectedQuote.projectManager.Email" target="_blank">
                                        <span class="detail-item">@selectedQuote.projectManager.Email</span>
                                    </a>
                                </div>
                                <div class="col">
                                    <label>Market</label>
                                    <a href="https://www.google.com/maps/search/@selectedQuote.projectManager.City, @selectedQuote.projectManager.State @selectedQuote.projectManager.Zip" target="_blank">
                                        @selectedQuote.projectManager.City, @selectedQuote.projectManager.State
                                    </a>
                                </div>
                            </div>
                        }
                    }
                    </DxTabPage>

                    @{
                        if (@selectedQuote.status != "New" && @selectedQuote.status != "Opportunity")
                        {
                            <DxTabPage Id="Panel-Project-Schedule" Text="Project Schedule">
                                Scheduling component here...
                            </DxTabPage>
                        }
                    }

                    <DxTabPage Id="Panel-Project-Summary" CssClass="tab-container" Text="@roofsCountLabel">

                        <div class="container">

                            <div class="row item-details-container">
                                <div class="col">
                                    <label>Total Quote</label>
                                    <span><b>@selectedQuote.totalQuote.ToString("C0")</b></span>
                                </div>
                                <div class="col">
                                    <label>Total Sqft</label>
                                    <span><b>@selectedQuote.totalSquareFeet.ToString("N0")</b></span>
                                </div>
                                <div class="col">
                                    <label>Included Roofs</label>
                                    <span><b>@selectedQuote.numberOfIncludedStructures.ToString("N0")</b></span>
                                </div>
                                <div class="col">
                                </div>
                            </div>

                            <div class="row">
                                @{
                                    currentItemIndex = 0;

                                    for (var i = 0; i < @selectedQuote.structures.Count; i++)
                                    {
                                        currentItemIndex = i + 1;

                                        <b>Roof #@currentItemIndex</b>
                                        <div class="row item-details-container">
                                            <div class="col">
                                                <label>Included</label>
                                                @{
                                                    if(@selectedQuote.structures[i].isIncluded)
                                                    {
                                                        <span>Yes</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="system-warning">No</span>
                                                    }
                                                }
                                            </div>
                                            <div class="col">
                                                <label>Name</label>
                                                <span>@selectedQuote.structures[i].name</span>
                                            </div>
                                            <div class="col">
                                                <label>SqFt</label>
                                                <span>@selectedQuote.structures[i].squareFeet.ToString("N0")</span>
                                            </div>
                                            <div class="col">
                                                <label>Complexity</label>
                                                <span>@selectedQuote.structures[i].roofComplexity</span>
                                            </div>
                                            <div class="col">
                                                <label>Slope</label>
                                                <span>@selectedQuote.structures[i].slope</span>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </DxTabPage>

                    <DxTabPage Id="Panel-Products" Text="@productsCountLabel">

                        <div class="container">
                            @{
                                for (var i = 0; i < @selectedQuote.products.Count; i++)
                                {
                                    currentItemIndex = i + 1;

                                    var priceLabel = @selectedQuote.products[i].priceInfo.priceType;
                                    if (priceLabel == "BasicFinancing")
                                        priceLabel = "Basic";
                                    else
                                        priceLabel = @selectedQuote.products[i].priceInfo.priceType;

                                    <b>Product #@currentItemIndex</b>

                                    <div class="item-details-container">

                                        <div class="row">
                                            <div class="col">
                                                <label>Name</label>
                                                <span>@selectedQuote.products[i].name</span>
                                            </div>
                                            <div class="col">
                                                <label>Waste Factor</label>
                                                <span>@selectedQuote.products[i].wasteFactorMainRoof</span>
                                            </div>
                                            <div class="col">
                                                <label>Price Type</label>
                                                <span>@priceLabel</span>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col">
                                                <label>Total Quote</label>
                                                <span>@selectedQuote.products[i].priceInfo.total.ToString("C0")</span>
                                            </div>
                                            <div class="col">
                                                <label>Per Square</label>
                                                <span>@selectedQuote.products[i].priceInfo.pricePerSquare.ToString("C0")</span>
                                            </div>
                                            <div class="col">
                                                <label>Monthly</label>
                                                <span>@selectedQuote.products[i].priceInfo.monthly.ToString("C0")</span>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col">
                                                <label>APR</label>
                                                <span>@selectedQuote.products[i].priceInfo.apr%</span>
                                            </div>
                                            <div class="col">
                                                <label>Months</label>
                                                <span>@selectedQuote.products[i].priceInfo.months</span>
                                            </div>
                                            <div class="col">
                                            </div>
                                        </div>

                                    </div>
                                }
                            }
                        </div>

                    </DxTabPage>

                    @{
                        if (@selectedQuote.status != "New")
                        {
                            <DxTabPage Id="Panel-Send-Files" Text="@_emailTabLabel">
                                <DxUpload Name="fileUpload1"
                                          SelectButtonText="Upload"
                                          AllowMultiFileUpload="true"
                                          UploadUrl="@GetUploadUrl("https://localhost:7235/api/fileservices")"
                                          FileUploadStarted="@OnFileUploadStarted"
                                          SelectedFilesChanged="@SelectedFilesChanged"
                                          MaxFileSize="@MaxFileSize"
                                          AllowedFileExtensions="@allowedFileExtensions"
                                          AcceptedFileTypes="@acceptableFileTypes"
                                          CssClass="@(SelectedFilesCount > 0 ? "w-100" : "add-item-button")">
                                </DxUpload>

                                <button class="action-button" disabled="@SendDocsDisabled" @onclick="@EmailFiles">Send Docs</button>
                            </DxTabPage>

                            <DxTabPage Id="Panel-Attach-Files" Text="Attachments">
                                <DxUpload Name="fileUpload2"
                                          SelectButtonText="Upload"
                                          AllowMultiFileUpload="true"
                                          UploadUrl="@GetUploadUrl("https://localhost:7235/api/fileservices")"
                                          FileUploadStarted="@OnFileUploadStarted"
                                          SelectedFilesChanged="@SelectedFilesChanged"
                                          MaxFileSize="@MaxFileSize"
                                          AllowedFileExtensions="@allowedFileExtensions"
                                          AcceptedFileTypes="@acceptableFileTypes"
                                          CssClass="@(SelectedFilesCount > 0 ? "w-100" : "add-item-button")">
                                </DxUpload>

                                @foreach (Attachment attachment in selectedQuote.attachments)
                                {
                                    if (!attachment.IsDeleted)
                                    {
                                        <div class="note-row">
                                            <div>
                                                <label>@attachmentsCount) @attachment.Date</label>
                                            </div>

                                            <span class="hyperlink-warning" @onclick="() => SelectAttachmentToDelete(selectedQuote, attachment)">Delete</span>

                                            <span class="bar-spacer">|</span>
                                            <a href="@attachment.MediaUrl" target="_blank">
                                                <span>@attachment.MediaDescription</span>
                                            </a>
                                            <span class="bar-spacer">|</span>
                                            <label>File Type</label>
                                            <span>@FileType</span>
                                            <span class="bar-spacer">|</span>
                                            <label>Source</label>
                                            <span>@attachment.Author.FirstName @attachment.Author.LastName</span>
                                        </div>

                                        attachmentsCount--;
                                    }
                                }
                            </DxTabPage>

                            <DxTabPage Id="Panel-Notes" Text="Notes">
                                <button class="action-button" @onclick="@(() => IsPopupVisibleAddNote = true)">Add Note</button>
                                @foreach (Note note in selectedQuote.notes)
                                {
                                    if (!note.IsDeleted)
                                    {
                                        <div class="note-row">
                                            <div>
                                                <label>@notesCount) @note.Date</label>
                                            </div>

                                            <span class="hyperlink-warning" @onclick="() => SelectNoteToDelete(selectedQuote, note)">Delete</span>

                                            <span class="bar-spacer">|</span>
                                            <span>@note.Details</span>

                                            <span class="bar-spacer">|</span>
                                            <label>Source</label>
                                            <span>@note.Author.FirstName @note.Author.LastName</span>
                                        </div>

                                        notesCount--;
                                    }
                                }
                            </DxTabPage>

                            <DxTabPage Id="Panel-History" Text="History">
                                @foreach (Event _event in selectedQuote.events)
                                {
                                    <div class="note-row">
                                        <div class="">
                                            <label>@eventsCount) @_event.DateTime</label>
                                        </div>

                                        <span class="bar-spacer">|</span>
                                        <span>@_event.Details</span>

                                        <span class="bar-spacer">|</span>
                                        <label>Source</label>
                                        <span>@_event.Author.FirstName @_event.Author.LastName</span>
                                    </div>

                                    eventsCount--;
                                }
                            </DxTabPage>
                        }
                    }

                    <DxTabPage Id="Panel-Origination" Text="Origination">
                        <table id="table-origin" class="table-detail">
                            <tbody>

                                <tr>
                                    <td>
                                        <label>Market</label>
                                        <span>@selectedQuote.market</span>
                                    </td>
                                    <td>
                                        <label>Rep Name</label>
                                        <span>@selectedQuote.repName</span>
                                    </td>
                                    <td>
                                        <label>Rep Email</label>
                                        <a href="mailto:@selectedQuote.repEmail">
                                            <span>@selectedQuote.repEmail</span>
                                        </a>
                                    </td>
                                </tr>

                                <tr>
                                    <td>
                                        <label>RecId</label>
                                        <span>@selectedQuote._id</span>
                                    </td>
                                    <td>
                                        <label>Referrer</label>
                                        <a href="@selectedQuote.externalUrl" target="_blank">
                                            <span>@selectedQuote.externalUrl</span>
                                        </a>
                                    </td>
                                    <td>
                                        <label>Session</label>
                                        <span>@selectedQuote.sessionId</span>
                                    </td>
                                </tr>

                                <tr>
                                    <td>
                                        <label>RefId</label>
                                        <span>@selectedQuote.leadId</span>
                                    </td>
                                    <td>
                                        <label>Created</label>
                                        <span>@selectedQuote.timestamp</span>
                                    </td>
                                    <td>
                                    </td>

                                </tr>
                            </tbody>
                        </table>
                    </DxTabPage>

                </DxTabs>

                if (selectedQuote.status != "New")
                {
                    <div class="section-header">
                        10-Step Project Workflow
                    </div>

                    <DxTabs Id="tabs-Customer-Qualifications" CssClass="tabs-container">

                        <DxTabPage Id="Panel-Customer-Qualifications-Mission-Statement-Acknowledgment" CssClass="tab-container" Text="1) Mission Statement Acknowledgment">
                            Mission Statement Acknowledgment...
                        </DxTabPage>

                        <DxTabPage Enabled="false" Id="Panel-Customer-Qualifications-Needs-Analysis" Text="2) Needs Analysis">
                            Needs Analysis...
                        </DxTabPage>

                        <DxTabPage Enabled="false" Id="Panel-Customer-Qualifications-Project-Manager-Inspection-Report" Text="3) Project Manager Inspection Report">
                            Project Manager Inspection Report...
                        </DxTabPage>

                        <DxTabPage Enabled="false" Id="Panel-Customer-Qualifications-Pictometry-Measurements" Text="4) Pictometry Measurements">
                            Pictometry Measurements...
                        </DxTabPage>

                        <DxTabPage Enabled="false" Id="Panel-Customer-Qualifications-Installer-Inspection-Report" Text="5) Installer Inspection Report">
                            Installer Inspection Report...
                        </DxTabPage>

                        <DxTabPage Enabled="false" Id="Panel-Customer-Qualifications-Material-Order" Text="6) Material Order">
                            Material Order...
                        </DxTabPage>

                        <DxTabPage Enabled="false" Id="Panel-Customer-Qualifications-Labor-Order" Text="7) Labor Order">
                            Labor Order...
                        </DxTabPage>

                        <DxTabPage Enabled="false" Id="Panel-Customer-Qualifications-Total-Project-Expense-Summary" Text="8) Total Project Expense Summary">
                            Total Project Expense Summary...
                        </DxTabPage>

                        <DxTabPage Enabled="false" Id="Panel-Customer-Qualifications-Facilitate-Sample-Warranty" Text="9) Facilitate Sample Warranty">
                            Facilitate Sample Warranty...
                        </DxTabPage>

                        <DxTabPage Enabled="false" Id="Panel-Customer-Qualifications-Signed-Proposal" Text="10) Signed Proposal">
                            Signed Proposal...
                        </DxTabPage>

                    </DxTabs>
                }

                if (@selectedQuote.warranties.Count > 0)
                {
                    var claimsInitialized = false;

                    <div class="warranty-header">
                        Warranty Info
                    </div>

                    <DxTabs Id="tabs-Warranty-Info" CssClass="tabs-container">
                        @{
                            var claimCount = 0;
                            var claimLabel = "";

                            foreach (Warranty warranty in @selectedQuote.warranties)
                            {
                                switch (warranty._t)
                                {
                                    case "Assertion":
                                        <DxTabPage Id="Panel-Warranty-Assertion" CssClass="tab-container" Text="Coverage Statement">
                                            <div class="row">
                                                <div class="col">
                                                    <label>Claim #</label>
                                                    <span>@warranty._id</span>
                                                </div>
                                                <div class="col">
                                                    <label>Summary</label>
                                                    <span>@warranty._t</span>
                                                </div>
                                                <div class="col">
                                                    <label>Author</label>
                                                    <span>@warranty.Author.FirstName @warranty.Author.LastName</span>
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col">
                                                    <label>Date</label>
                                                    <span>@warranty.DateCreated</span>
                                                </div>
                                                <div class="col">
                                                    <label>Summary</label>
                                                    <span>@warranty.Summary</span>
                                                </div>
                                                <div class="col">
                                                    <label>Details</label>
                                                    <span>@warranty.Details</span>
                                                </div>
                                            </div>
                                        </DxTabPage>
                                        break;
                                    case "Claim":
                                        claimCount++;
                                        claimLabel = "Claim " + claimCount + " - Id: " + @warranty._id + "";

                                        <DxTabPage Id="Panel-Warranty-Claim" CssClass="tab-container" Text="@claimLabel">
                                            <div class="row">
                                                <div class="col">
                                                    <label>Date</label>
                                                    <span>@warranty.DateCreated</span>
                                                </div>
                                                <div class="col">
                                                    <label>Author</label>
                                                    <span>@warranty.Author.FirstName @warranty.Author.LastName</span>
                                                </div>
                                                <div class="col"></div>
                                            </div>
                                            <div class="row">
                                                <div class="col">
                                                    <label>Summary</label>
                                                    <span>@warranty.Summary</span>
                                                </div>
                                                <div class="col">
                                                    <label>Reason</label>
                                                    <span>@warranty.Details</span>
                                                </div>
                                                <div class="col"></div>
                                            </div>

                                            <hr />

                                            <div class="row">
                                                <div class="col">
                                                    <label>Completed?</label>
                                                    <span>@warranty.isCompleted</span>
                                                </div>
                                                <div class="col">
                                                    <label>Completed</label>
                                                    <span>@warranty.DateCompleted</span>
                                                </div>
                                                <div class="col">
                                                    <label>Notes</label>
                                                    <span>@warranty.CompletionDetails</span>
                                                </div>
                                            </div>

                                            <hr />

                                            <div class="row">
                                                <div class="col">&nbsp;</div>                                            
                                            </div>

                                            <div class="row">
                                                <div class="col" style="text-align: center !important;">
                                                    <button class="action-button" @onclick="@(() => IsPopupVisibleCloseWarrantyClaim = true)">Close Warranty Claim</button>
                                                </div>
                                            </div>

                                            <div class="row">
                                                <div class="col">&nbsp;</div>                                            
                                            </div>
                                        </DxTabPage>
                                        break;
                                }
                            }
                        }
                    </DxTabs>
                    <br />
                }

                <div class="quote-detail-controls-container">
                @{
                    switch(selectedQuote.status)
                    {
                        case "New":
                            <button class="action-button" @onclick="@(() => IsArchivePopupVisible = true)">Archive</button>
                            break;
                        case "Opportunity":
                                <button class="action-button" @onclick="@(() => IsArchivePopupVisible = true)">Archive</button>
                            <button class="action-button" @onclick="@(() => IsPopupVisibleMakeCustomer = true)">Make Customer</button>
                            break;
                        case "Customer":
                            <button class="action-button" @onclick="@(() => IsPopupVisibleCompleteCustomer = true)">Complete Customer</button>
                            break;
                        case "Complete":
                            <button class="action-button" @onclick="@(() => IsArchivePopupVisible = true)">Archive</button>
                            break;
                        case "Archive":
                            <button class="action-button" @onclick="@(() => IsPopupVisibleMakeWarrantyClaim = true)">Make Warranty Claim</button>
                            break;
                        case "Warranty":
                            // <button class="action-button" @onclick="@(() => IsPopupVisibleCloseWarrantyClaim = true)">Close Warranty Claim</button>
                            break;
                    }
                    <button class="action-button" @onclick="ReturnPreviousPage">Return</button>
                }
                </div>

            }
        </DetailRowTemplate>

    </DxGrid>
}

<DxPopup @bind-Visible="@IsPopupVisibleMakeWarrantyClaim" ShowFooter="true" HeaderText="Make a Warranty Claim?">
    <BodyContentTemplate>
        <p>Why are you making a Warranty Claim on this archived project?</p>
        <DxMemo @bind-Text="@NoteDetails" InputId="archive-reason" CssClass="cw-320" />
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="Save" Click="MakeWarrantyClaim" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsPopupVisibleMakeWarrantyClaim = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleCloseWarrantyClaim" ShowFooter="true" HeaderText="Close Warranty Claim?">
    <BodyContentTemplate>
        <p>Has this Warranty Claim been completed?</p>
        <DxMemo @bind-Text="@NoteDetails" InputId="archive-reason" CssClass="cw-320" />
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="Save" Click="CloseWarrantyClaim" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsPopupVisibleCloseWarrantyClaim = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleCompleteCustomer" ShowFooter="true" HeaderText="Complete Customer">
    <BodyContentTemplate>
        If this is fully qualified to Complete Customer criteria, then click Save.
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="Save" Click="CompleteCustomer" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsPopupVisibleCompleteCustomer = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleMakeCustomer" ShowFooter="true" HeaderText="Make Customer">
    <BodyContentTemplate>
        If this Opportunity is fully qualified to meet Customer criteria, then click Save.
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="Save" Click="MakeCustomer" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsPopupVisibleMakeCustomer = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsAssignPopupVisible"
         ShowFooter="true"
         HeaderText="Please select a Project Manager for assignment">
    <BodyContentTemplate>
        <DxListBox Data="@ProjectManagers"
                   @bind-Values="@Values"
                   CssClass="popup-grid"
                   SelectedItemsChanged="@((IEnumerable<ApplicationUser> values) => SelectedProjectManagerChanged(values))"
                   SelectionMode="ListBoxSelectionMode.Single"
                   ShowCheckboxes="true">
            <Columns>
                <DxListEditorColumn FieldName="LastName" Caption="Last" />
                <DxListEditorColumn FieldName="FirstName" Caption="First" />
                <DxListEditorColumn FieldName="Email" Caption="Email" />
                <DxListEditorColumn FieldName="Id" Visible="false" Caption="Id" />
            </Columns>
        </DxListBox>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" Enabled="true" RenderStyle="ButtonRenderStyle.Primary" Text="Save" Click="AssignLead" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsAssignPopupVisible = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleSelectAttachmentToDelete" ShowFooter="true" HeaderText="Delete File">
    <BodyContentTemplate>
        Are you sure you want to delete "@selectedAttachment.MediaDescription"?
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="Delete" Click="DeleteSelectedAttachment" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsPopupVisibleSelectAttachmentToDelete = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleSelectNoteToDelete" ShowFooter="true" HeaderText="Delete Note">
    <BodyContentTemplate>
        Are you sure you want to delete "@selectedNote.Details"?
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="Delete" Click="DeleteSelectedNote" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsPopupVisibleSelectNoteToDelete = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleAddNote" ShowFooter="true" HeaderText="Add Note">
    <BodyContentTemplate>
        <p>Please type in your notes below.</p>
        <DxMemo @bind-Text="@NoteDetails" InputId="archive-reason" CssClass="cw-320" />
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton SubmitFormOnClick="true" CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="Save" Click="AddNote" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsPopupVisibleAddNote = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsArchivePopupVisible" ShowFooter="true" HeaderText="Please type in a reason for Archival below">
    <BodyContentTemplate>
        <DxMemo @bind-Text="@NoteDetails" InputId="archive-reason" CssClass="cw-320" />
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton SubmitFormOnClick="true" CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="Archive" Click="ArchiveLead" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsArchivePopupVisible = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleHelpSendFiles" ShowFooter="true" HeaderText="Send Documents Help?">
    <BodyContentTemplate>
        <p>Send Documents details...</p>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Close" Click="@(() => IsPopupVisibleHelpSendFiles = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleHelpFileAttachments" ShowFooter="true" HeaderText="File Attachments Help?">
    <BodyContentTemplate>
        <p>File Attachments details...</p>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Close" Click="@(() => IsPopupVisibleHelpFileAttachments = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleHelpFileNotes" ShowFooter="true" HeaderText="File Notes Help?">
    <BodyContentTemplate>
        <p>File Notes details...</p>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Close" Click="@(() => IsPopupVisibleHelpFileNotes = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxLoadingPanel @bind-Visible=@LoadingPanelVisible
                PositionTarget="body"
                ApplyBackgroundShading="true"
                CssClass="w-100">
</DxLoadingPanel>

@code {

    public List<string> allowedFileExtensions = new List<string> { ".jpeg", ".jpg", ".gif", ".mpg", ".mp4" };
    public List<string> acceptableFileTypes = new List<string> { "image/*", "video/*" };
    public int MaxFileSize = 15000000;

    void OnFileUploadStarted(FileUploadEventArgs e) 
    {
        var MyMessage = "Upload of the " + e.FileInfo.Name + " file was started.";

        InvokeAsync(StateHasChanged);
    }

    protected void SelectedFilesChanged(IEnumerable<UploadFileInfo> files)
    {
        SelectedFilesCount = files.ToList().Count;
        InvokeAsync(StateHasChanged);

        foreach (UploadFileInfo file in files)
        {
            var fileGuid = file.Guid;
            var IsFileExtensionValid = allowedFileExtensions.Contains(file.Type);
            var fileIsMaxSizeValid = file.Size < MaxFileSize; // 1000MB
            var fileIsMinSizeValid = file.Size > 0;
            var fileLastModified = file.LastModified;
            var fileLoadedBtyes = file.LoadedBytes;
            // var fileRequestData = file.RequestData;
            // var fileRequestHeaders = file.RequestHeaders;
            var fileName = file.Name;
            var fileSize = file.Size;
            var fileType = file.Type;

            var tmpVal = "";
        }

        SendDocsDisabled = false;
    }

    protected void EmailFiles()
    {
        var tmpVal = "";
    }

    protected string GetUploadUrl(string url)
    {
        var absoluteUri = NavigationManager.ToAbsoluteUri(url).AbsoluteUri;

        return absoluteUri;
    }

    protected override async Task OnInitializedAsync()
    {
    }

    public void ReturnPreviousPage()
    {
        var previousPageUrl = "/quotes/" + Referrer;

        NavigationManager.NavigateTo(previousPageUrl);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(QuoteGrid != null)
        {
            QuoteGrid.ExpandDetailRow(0);
            QuoteGrid.SelectAllAsync(true);
        }
    }

    bool IsPopupVisibleMakeCustomer { get; set; }

    public QuoteLeaderboard leaderboardStats = new QuoteLeaderboard();

    [Parameter]
    public string QuoteId { get; set; }

    [Parameter]
    public string Referrer { get; set; }

    public bool emailSentStatus = false;

    Utils utils = new Utils();

    async void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        TimerDispose();
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    public ApplicationUser currentUser = new ApplicationUser();
    public bool isSystemAdmin = false;
    public bool isUserAdmin = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // var ownerId = "";
        // var ownerType = "";
        // var fromAddress = "admin@facilitate.org";
        // var toAddress = "joseph.baranauskas@gmail.com";
        // var subject = "Testing Email Services";
        // var body = "This is just a test of the emergenct broadcast system. Had this been an actual emergency, you are toast!";
        // var isBodyHtml = true;

        // var emailSent = WebServices.SendEmail(ownerId, ownerType, fromAddress, toAddress, subject, body, isBodyHtml);

        if (firstRender)
        {
            try
            {
                var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
                var loggedInUser = authstate.User;
                var loggedInName = loggedInUser.Identity.Name;

                if (loggedInName != null && loggedInName != "")
                    currentUser = await UserManager.FindByNameAsync(loggedInName);

                if(currentUser.IsEnabled)
                {
                    isSystemAdmin = await UserManager.IsInRoleAsync(currentUser, "System Admin");

                    var isSiteAdmin = await UserManager.IsInRoleAsync(currentUser, "Site Admin");
                    var isGroupAdmin = await UserManager.IsInRoleAsync(currentUser, "Group Admin");

                    if (isSystemAdmin || isSiteAdmin || isGroupAdmin)
                    {
                        isUserAdmin = true;
                    }

                    List<ApplicationUser> adminUsers = new List<ApplicationUser>();
                    List<ApplicationUser> tmpUsers = UserManager.Users.ToList();
                    foreach (ApplicationUser adminUser in tmpUsers)
                    {
                        if (adminUser.IsEnabled)
                        {
                            var list = await UserManager.IsInRoleAsync(adminUser, "Project Manager");
                            adminUsers.Add(adminUser);
                        }
                    }

                    ProjectManagers = SortByLastNameUsingLinq(adminUsers);
                    TimerRefresh();

                    GetIpAddress();
                }
                else
                {
                    UserSignOut();
                }
            }
            catch (Exception ex)
            {
                var errMsg = ex.Message;
                return;
            }
        }
    }

    public void MakeCustomer()
    {
        selectedQuote.status = "Customer";

        var projectManager = selectedQuote.projectManager;

        Event _event = new Event();
        _event.Details = selectedQuote.firstName + " " + selectedQuote.lastName + " converted to Customer";
        _event.Author = currentUser;

        selectedQuote.events.Add(_event);

        WebServices.UpdateQuote(selectedQuote);

        IsPopupVisibleMakeCustomer = false;
    }

    private void UserSignOut()
    {
        try{

            SignInManager.SignOutAsync();

            NavigationManager.NavigateTo("/Account/Lockout");
        }
        catch(Exception ex)
        {
            var errMsg = ex.Message;
        }
    }

    private readonly IClaimsProvider _claimsProvider;

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    public int currentItemIndex = 0;

    public int noteCount = 0;

    IEnumerable<string> Values { get; set; }

    public int roofsCount = 0;
    public int productsCount = 0;

    public string roofsCountLabel = "";
    public string productsCountLabel = "";

    public Quote selectedQuote { get; set; }
    public Attachment selectedAttachment { get; set; }
    public Note selectedNote { get; set; }

    bool LoadingPanelVisible { get; set; } = true;

    WebServices webServices = new WebServices();

    public bool IsAssignButtonEnabled = false;
    IEnumerable<ApplicationUser> SelectedProjectManager { get; set; }
    public List<ApplicationUser>? ProjectManagers = new List<ApplicationUser>();

    #region Private Properties

    private List<Quote>? quotes;

    int SelectedFilesCount { get; set; }

    ObjectId SelectedFileId { get; set; }

    IGrid QuoteGrid { get; set; }

    IGrid EventGrid { get; set; }

    EntityInstantFeedbackSource InstantFeedbackSource { get; set; }

    bool isBulkInsert = false;

    string FileType { get; set; } = ".pdf";
    string Author { get; set; } = "unknown";

    string NoteDetails { get; set; } = "";

    #endregion

    #region Public Properties

    [Inject] public IJSRuntime jsRuntime { get; set; }

    public Timer _timer;

    public string ClientIP = "";
    public string selectedQuoteId = "";

    public interface IQueryable : System.Collections.IEnumerable;

    public int currentItem = 0;
    public int selectedIndex = 0;

    public string SubmissionUserIP { get; set; }

    public int itemsToCreate = 100;
    public string updateStatus = "Fetching ";

    public int attachmentsCount = 0;
    public int notesCount = 0;
    public int eventsCount = 0;

    #endregion

    #region Popup properties

    bool IsAssignPopupVisible { get; set; }

    bool IsPopupVisibleAddFile { get; set; }
    bool IsPopupVisibleSelectAttachmentToDelete { get; set; }

    bool IsPopupVisibleAddNote { get; set; }
    bool IsPopupVisibleSelectNoteToDelete { get; set; }

    bool IsArchivePopupVisible { get; set; }
    bool IsPopupVisibleCompleteCustomer { get; set; }
    bool IsPopupVisibleMakeWarrantyClaim { get; set; }
    bool IsPopupVisibleCloseWarrantyClaim { get; set; }

    bool IsPopupVisibleHelpSendFiles { get; set; }
    bool IsPopupVisibleHelpFileAttachments { get; set; }
    bool IsPopupVisibleHelpFileNotes { get; set; }

    #endregion

    #region Parameters

    [Parameter]
    public string DisplayFormat { get; set; }

    [Parameter]
    public List<string> AcceptedFileTypes { get; set; }

    [Parameter]
    public GridDetailRowDisplayMode DetailRowDisplayMode { get; set; }

    [Parameter]
    public string RefreshStatus { get; set; } = "";

    [Parameter]
    public string StatusContainerClass { get; set; } = "container-action-buttons-hide";

    [Parameter]
    public string StatusClass { get; set; } = "message-normal";

    [Parameter]
    public string ShowTestDataButtonText { get; set; } = "Show Test Data";

    [Parameter]
    public string RefreshButtonText { get; set; } = "Pause Refresh";

    [Parameter]
    public string RefreshButtonClass { get; set; } = "btn-refresh-active";

    [Parameter]
    public bool RefreshDisabled { get; set; } = false;

    [Parameter]
    public bool CreateLeadDisabled { get; set; } = true;

    [Parameter]
    public bool CreateLeadsDisabled { get; set; } = true;

    [Parameter]
    public bool SendDocsDisabled { get; set; } = true;

    [Parameter]
    public bool ArchiveLeadsDisabled { get; set; } = true;

    [Parameter]
    public object SelectedQuoteItem { get; set; }

    [Parameter]
    public object SelectedEventItem { get; set; }

    [Parameter]
    public int VisibleIndex { get; set; }

    [Parameter]
    public bool ClearFilterButtonVisible { get; set; }

    [Parameter]
    public string SelectedLeadType { get; set; } = "New";

    [Parameter]
    public string SelectedTradeType { get; set; } = "Roofing";

    #endregion

    #region Methods

    void SelectedProjectManagerChanged(IEnumerable<ApplicationUser> selectedProjectManager)
    {
        if(selectedProjectManager.Count() > 0)
        {
            SelectedProjectManager = selectedProjectManager;

            if (SelectedProjectManager.Count() > 0)
                IsAssignButtonEnabled = true;
            else
                IsAssignButtonEnabled = false;
        }
    }

    public List<ApplicationUser> SortByLastNameUsingLinq(List<ApplicationUser> originalList)
    {
        return originalList.OrderBy(x => x.LastName).ToList();
    }

    void OnRowClick(GridRowClickEventArgs args)
    {
    }

    public async Task<string> GetIpAddress()
    {
        try
        {
            SubmissionUserIP = await jsRuntime.InvokeAsync<string>("getIpAddress").ConfigureAwait(true);

            return SubmissionUserIP;
        }
        catch (Exception e)
        {
            //If your request was blocked by CORS or some extension like uBlock Origin then you will get an exception.
            return string.Empty;
        }
    }

    public void AssignLead()
    {
        var sysUser = new ApplicationUser();
        sysUser.FirstName = "System";

        // Only change status when assigning the first time.
        if (selectedQuote.status == "New")
        {
            selectedQuote.status = "Opportunity";

            if (selectedQuote.attachments.Count == 0)
            {
                // Workflow and Subsequent Document Requirements
                Attachment workflowRequirements = new Attachment();
                workflowRequirements.MediaDescription = "Workflow and Subsequent Document Requirements";
                workflowRequirements.MediaUrl = "/docs/templates/misc/Workflow and Subsequent Document Requirements.pdf";
                workflowRequirements.Author = sysUser;
                selectedQuote.attachments.Add(workflowRequirements);

                Event workflowRequirementsEvent = new Event();
                workflowRequirementsEvent.Details = workflowRequirements.MediaDescription + " sent to " + selectedQuote.email;
                workflowRequirementsEvent.Author = sysUser;
                selectedQuote.events.Add(workflowRequirementsEvent);

                // Facilitate Engagement Agreement
                Attachment engagementAgreement = new Attachment();
                engagementAgreement.MediaDescription = "Facilitate Engagement Agreement";
                engagementAgreement.MediaUrl = "/docs/templates/agreements/Facilitate Engagement Agreement.docx";
                engagementAgreement.Author = sysUser;
                selectedQuote.attachments.Add(engagementAgreement);

                Event engagementAgreementEvent = new Event();
                engagementAgreementEvent.Details = engagementAgreement.MediaDescription + " sent to " + selectedQuote.email;
                engagementAgreementEvent.Author = sysUser;
                selectedQuote.events.Add(engagementAgreementEvent);

                // Welcome Letter
                Attachment welcomeLetter = new Attachment();
                welcomeLetter.MediaDescription = "Welcome to Facilitate.org";
                welcomeLetter.MediaUrl = "/docs/templates/boilerplate/Welcome to Facilitate.docx";
                welcomeLetter.Author = sysUser;
                selectedQuote.attachments.Add(welcomeLetter);

                Event welcomeLetterEvent = new Event();
                welcomeLetterEvent.Details = welcomeLetter.MediaDescription + " sent to " + selectedQuote.email;
                welcomeLetterEvent.Author = sysUser;
                selectedQuote.events.Add(welcomeLetterEvent);
            }

            Event statusChanged = new Event();
            statusChanged.Details = selectedQuote.firstName + " " + selectedQuote.lastName + " converted to Opportunity";
            statusChanged.Author = currentUser;
            selectedQuote.events.Add(statusChanged);
        }

        selectedQuote.projectManager = SelectedProjectManager.ToList()[0];

        var projectManager = selectedQuote.projectManager;

        // Assignment event
        Event assignmentEvent = new Event();
        assignmentEvent.Name = "Assignment";
        assignmentEvent.Details = "Lead assigned to Project Manager (" + projectManager.FirstName + " " + projectManager.LastName + "), moved to Opportunities and emailed to: " + projectManager.Email;
        assignmentEvent.Author = currentUser;

        // Email PM and Client here...

        selectedQuote.events.Add(assignmentEvent);

        WebServices.UpdateQuote(selectedQuote);

        IsAssignPopupVisible = false;
        IsAssignButtonEnabled = false;
    }

    public void ArchiveLead()
    {
        selectedQuote.status = "Archive";

        Note note = new Note();
        note.Summary = selectedQuote.firstName + " " + selectedQuote.lastName + " moved to Archives";
        note.Details = @NoteDetails;
        note.Author = currentUser;

        selectedQuote.notes.Add(note);

        Event _event = new Event();
        _event.Details = selectedQuote.firstName + " " + selectedQuote.lastName + " moved to Archives";
        _event.Author = currentUser;
        selectedQuote.events.Add(_event);

        WebServices.UpdateQuote(selectedQuote);

        IsArchivePopupVisible = false;
        NoteDetails = "";
    }

    public void AddNote()
    {
        Note note = new Note();
        note.Summary = "Note Added";
        note.Details = @NoteDetails;
        note.Author = currentUser;

        selectedQuote.notes.Add(note);

        Event _event = new Event();
        _event.Details = "Note (" + note.Details + ") added to Quote";
        _event.Author = currentUser;

        selectedQuote.events.Add(_event);

        IsPopupVisibleAddNote = false;
        NoteDetails = "";

        WebServices.UpdateQuote(selectedQuote);
    }

    public void CloseDetails()
    {
    }

    public void SelectAttachmentToDelete(Quote quote, Attachment attachment)
    {
        selectedQuote = quote;
        selectedAttachment = attachment;

        IsPopupVisibleSelectAttachmentToDelete = true;
    }

    public void SelectNoteToDelete(Quote quote, Note note)
    {
        selectedQuote = quote;
        selectedNote = note;

        IsPopupVisibleSelectNoteToDelete = true;
    }

    public void DeleteSelectedAttachment()
    {
        selectedAttachment.IsDeleted = true;

        Event _event = new Event();
        _event.Details = "Deleted attachment (" + selectedAttachment.MediaDescription + ") from Quote";
        _event.Author = currentUser;

        selectedQuote.events.Add(_event);

        WebServices.UpdateQuote(selectedQuote);

        IsPopupVisibleSelectAttachmentToDelete = false;

        attachmentsCount--;
    }

    public void DeleteSelectedNote()
    {
        selectedNote.IsDeleted = true;

        Event _event = new Event();
        _event.Details = "Deleted note (" + selectedNote.Details + ") from Quote";
        _event.Author = currentUser;

        selectedQuote.events.Add(_event);

        WebServices.UpdateQuote(selectedQuote);

        IsPopupVisibleSelectNoteToDelete = false;

        notesCount--;
    }

    public void MakeWarrantyClaim()
    {
        selectedQuote.status = "Warranty";

        var projectManager = selectedQuote.projectManager;

        Warranty warranty = new Warranty();
        warranty._t = "Claim";
        warranty.Summary = "Warranty Claim";
        warranty.Details = @NoteDetails;
        warranty.Author = currentUser;

        selectedQuote.warranties.Add(warranty);

        Note note = new Note();
        note.Summary = "Note Added (Make Warranty Claim)";
        note.Details = @NoteDetails;
        note.Author = currentUser;

        selectedQuote.notes.Add(note);

        Event _event = new Event();
        _event.Details = "Archive converted to Warranty Claim";
        _event.Author = currentUser;

        selectedQuote.events.Add(_event);

        WebServices.UpdateQuote(selectedQuote);

        IsPopupVisibleMakeWarrantyClaim = false;
        NoteDetails = "";
    }

    public void CloseWarrantyClaim()
    {
        List<Warranty> warranties = new List<Warranty>();

        selectedQuote.status = "Archive";

        try
        {
            foreach (Warranty warranty in selectedQuote.warranties)
            {
                if (warranty._t == "Claim")
                {
                    Warranty _warranty = new Warranty();
                    _warranty._t = warranty._t;
                    _warranty.DateCreated = warranty.DateCreated;
                    _warranty.Summary = warranty.Summary;
                    _warranty.Details = warranty.Details;
                    _warranty.Author = currentUser;

                    _warranty.isCompleted = true;
                    _warranty.DateCompleted = DateTime.UtcNow;
                    _warranty.CompletionDetails = @NoteDetails;

                    warranties.Add(_warranty);
                }
            }

            selectedQuote.warranties.Clear();

            selectedQuote.warranties.AddRange(warranties);

            var projectManager = selectedQuote.projectManager;

            Note note = new Note();
            note.Summary = "Note Added (Close Warranty Claim)";
            note.Details = @NoteDetails;

            selectedQuote.notes.Add(note);

            Event _event = new Event();
            _event.Details = "Warranty Claim moved back to Archive";
            _event.Author = currentUser;

            selectedQuote.events.Add(_event);

            WebServices.UpdateQuote(selectedQuote);

            IsPopupVisibleCloseWarrantyClaim = false;
            NoteDetails = "";
        }
        catch(Exception ex)
        {
            var errMsg = ex.Message;
        }
    }

    public void CompleteCustomer()
    {
        selectedQuote.status = "Complete";

        var projectManager = selectedQuote.projectManager;

        Event _event = new Event();
        _event.Details = selectedQuote.firstName + " " + selectedQuote.lastName + " converted to Completed Customer";
        _event.Author = currentUser;

        selectedQuote.events.Add(_event);

        WebServices.UpdateQuote(selectedQuote);

        IsPopupVisibleCompleteCustomer = false;
    }

    public void TimerDispose()
    {
        _timer?.Dispose();
        _timer = null;
    }

    private async Task TimerRefresh()
    {
        TimerDispose();

        _timer = new Timer(new TimerCallback(_ =>
        {
            var ShowTestData = true;

            quotes = webServices.GetQuote(QuoteId);

            if(quotes != null)
                selectedQuote = quotes[0];

            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }), null, 1000, 1000);

        LoadingPanelVisible = false;
    }

    private async Task<bool> IsUserEnabled()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var name = user.Identity.Name;

        if (name != null && name != "")
            currentUser = await UserManager.FindByNameAsync(name);

        return currentUser.IsEnabled;
    }

    #endregion
}