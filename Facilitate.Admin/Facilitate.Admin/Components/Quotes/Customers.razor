@page "/quotes/customers"

@using Facilitate.Admin.Data;
@using Facilitate.Libraries.Models;

@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore
@using Microsoft.AspNetCore.WebUtilities

@using MongoDB.Bson;

@using System.Text.Json;

@using DevExpress.Blazor;
@using DevExpress.Data;
@using DevExpress.Data.Linq;

@attribute [StreamRendering(true)]
@rendermode InteractiveServer
@inject WebServices WebServices

@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory
@inject HttpClient httpClient

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject RoleManager<IdentityRole> roleManager

@inject AuthenticationStateProvider GetAuthenticationStateAsync

<PageTitle>Customers</PageTitle>

<AuthorizeView>
    <Authorized></Authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/Account/Login?returnurl=" + NavigationManager.Uri);
        }
    </NotAuthorized>
</AuthorizeView>

<script>
    window.getIpAddress = () => {
        return fetch('https://jsonip.com/')
            .then((response) => response.json())
            .then((data) => {
                return data.ip
            })
    }
</script>

@if (quotes == null)
{
    @*     <p><em>Loading...</em></p> *@
}
else
{
    <div class="quotes-leaderboard-page-header">
        <div class="col-md-3 stat-element">
            <span class="stat-value"><b>@leaderboardStats.TotalQuoteCount.ToString("N0") Quotes</b></span>
            <span class="stat-divider">|</span>
            <span class="stat-value">@leaderboardStats.TotalQuoteValue.ToString("C0")</span>
            <span class="stat-divider">|</span>
            <span class="stat-value">@leaderboardStats.TotalQuoteSqFt.ToString("N0")sqft</span>
            <span class="stat-divider">|</span>
        </div>

        <AuthorizeView Roles="System Admin,Site Admin,Group Admin">
            <Authorized>
                <div class="col-md-1 stat-element">
                    <a href="/quotes/leads">Leads</a>
                    <span class="stat-value"><b>@leaderboardStats.LeadCount.ToString("N0")</b></span>
                </div>
            </Authorized>
            <NotAuthorized></NotAuthorized>
        </AuthorizeView>

        <div class="col-md-1 stat-element">
            <a href="/quotes/opportunities">Opportunities</a>
            <span class="stat-value"><b>@leaderboardStats.OpportunityCount.ToString("N0")</b></span>
        </div>
        <div class="col-md-1 stat-element">
            <a href="/quotes/customers">Customers</a>
            <span class="stat-value"><b>@leaderboardStats.CustomerCount.ToString("N0")</b></span>
        </div>

        <div class="col-md-1 stat-element">
            <a href="/quotes/completed">Completions</a>
            <span class="stat-value"><b>@leaderboardStats.CompletionCount.ToString("N0")</b></span>
        </div>

        <div class="col-md-1 stat-element">
            <a href="/quotes/archives">Archives</a>
            <span class="stat-value"><b>@leaderboardStats.ArchiveCount.ToString("N0")</b></span>
        </div>

        <div class="col-md-1 stat-element">
            <a href="/quotes/warranties">Warranties</a>
            <span class="stat-value"><b>@leaderboardStats.WarrantyCount.ToString("N0")</b></span>
        </div>
    </div>

    <div class="div-filters">

        @{
            if (isSystemAdmin)
            {
                <div class="div-filter">
                    <DxButton CssClass="action-button" Click="ShowHideTestData">@ShowTestDataButtonText</DxButton>
                </div>
            }
        }

        <div class="div-filter">
            <DxButton CssClass="action-button" Click="ToggleRefresh">@RefreshButtonText</DxButton>
        </div>

        <div class="div-filter">

            <div id="dropdown-customization-target-container-trades">
                <DxButton CssClass="action-button" Id="btnTrades" Click="() => IsTradesListOpen = !IsTradesListOpen">@TradesFilterLabel</DxButton>
            </div>
            <DxDropDown
                @bind-IsOpen="@IsTradesListOpen"
                MinWidth="max(20vw, 100px)"
                PositionMode="DropDownPositionMode.Bottom"
                        PositionTarget="#dropdown-customization-target-container-trades"
                RestrictionTarget="#Navigation-DropDown-Customization"
                CloseMode="DropDownCloseMode.Close"
                PreventCloseOnPositionTargetClick="true"
                HeaderVisible="false"
                HeaderText="Trades"
                FooterVisible="false"
               >
                <BodyContentTemplate>
                        <DxListBox Data="@TradesList"
                                   id="ddlTradesList"
                                   @bind-Values="@TradeTypeValues"
                                   SelectedItemsChanged="@((IEnumerable<ListItem> values) => FilterTradeType(values))"
                                   SelectionMode="ListBoxSelectionMode.Single">
                        </DxListBox>
                    <SampleEditForm/>
                </BodyContentTemplate>
                <FooterContentTemplate>
                    <DxButton CssClass="popup-button my-1 ms-2" Text="OK" Click="@context.CloseCallback"/>
                    <DxButton CssClass="popup-button my-1 ms-2" Text="Cancel" Click="@context.CloseCallback"/>
                </FooterContentTemplate>
            </DxDropDown>
        </div>

        <div class="div-filter">
            <div id="dropdown-customization-target-container">
                <DxButton CssClass="action-button" Id="btnLeadTypes" Click="() => IsLeadTypeListOpen = !IsLeadTypeListOpen">@LeadTypeFilterLabel</DxButton>
            </div>
            <DxDropDown
                @bind-IsOpen="@IsLeadTypeListOpen"
                MinWidth="max(20vw, 100px)"
                PositionMode="DropDownPositionMode.Bottom"
                PositionTarget="#dropdown-customization-target-container"
                RestrictionTarget="#Navigation-DropDown-Customization"
                CloseMode="DropDownCloseMode.Close"
                PreventCloseOnPositionTargetClick="true"
                HeaderVisible="false"
                HeaderText="Available Lead Types"
                FooterVisible="false"
               >
                <BodyContentTemplate>
                        <DxListBox Data="@LeadTypeList"
                                   id="ddlLeadTypeList"
                                   @bind-Values="@LeadTypeValues"
                                   SelectedItemsChanged="@((IEnumerable<ListItem> values) => FilterLeadTypes(values))"
                                   SelectionMode="ListBoxSelectionMode.Single">
                        </DxListBox>
                    <SampleEditForm/>
                </BodyContentTemplate>
                <FooterContentTemplate>
                    <DxButton CssClass="popup-button my-1 ms-2" Text="OK" Click="@context.CloseCallback"/>
                    <DxButton CssClass="popup-button my-1 ms-2" Text="Cancel" Click="@context.CloseCallback"/>
                </FooterContentTemplate>
            </DxDropDown>
        </div>

    </div>

    <div class="quote-stats-header">
        <span class="quote-stats-count">@updateStatus Customers</span>
        <span class="quote-stats-value">@leaderboardStats.CustomerValue.ToString("C0")</span>
        <span class="quote-stats-sqft">@leaderboardStats.CustomerSqFt.ToString("N0")sqft</span>
    </div>
    <div class="quote-stats-hints">
        Select row to view details. Click column headers to sort. Type and hit enter in any empty cell to search that column. If you have grouped columns below, drag and drop the column back into the grid header to restore.
    </div>

    <DxGrid @ref="QuoteGrid"
            Data="@quotes"
            KeyFieldName="_id"
            PageSize="10"
            PagerPosition="GridPagerPosition.Bottom"
            ShowGroupPanel="true"
            AutoExpandAllGroupRows="true"
            ShowFilterRow="true"
            CssClass="mw-1100"
            RowClick="OnRowClick"
            AllowSelectRowByClick="true"
            SelectionMode="GridSelectionMode.Single"
            @bind-SelectedDataItem="@SelectedQuoteItem"
            TextWrapEnabled="false"
            PagerNavigationMode="PagerNavigationMode.InputBox"
            PageSizeSelectorVisible="true"
            PageSizeSelectorAllRowsItemVisible="false"
            KeyboardNavigationEnabled="true">
        <Columns>
            <DxGridDataColumn Visible="false" Width="200" Caption="Id" FieldName="_id" />
            <DxGridDataColumn Width="85" Caption="Trade" FieldName="applicationType" />
            <DxGridDataColumn Width="150" Caption="Created" FieldName="timestamp" DisplayFormat="MM/dd/yyyy hh:mm tt" SortIndex="0" SortOrder="GridColumnSortOrder.Descending" AllowSort="true" />
            <DxGridDataColumn Width="150" Caption="Updated" FieldName="lastUpdated" DisplayFormat="MM/dd/yyyy hh:mm tt" />
            <DxGridDataColumn Width="100" Caption="First" FieldName="firstName" />
            <DxGridDataColumn Width="125" Caption="Last" FieldName="lastName" />
            <DxGridDataColumn Width="200" Caption="Email" FieldName="email" />
            <DxGridDataColumn Width="auto" Caption="Street" FieldName="street" />
            <DxGridDataColumn Width="125" Caption="City" FieldName="city" />
            <DxGridDataColumn Width="50" Caption="State" FieldName="state" />
            <DxGridDataColumn Width="65" Caption="Zip" FieldName="zip" />
            <DxGridDataColumn Width="65" Caption="SqFt" FieldName="totalSquareFeet" />
            <DxGridDataColumn Width="75" Caption="Quote" DisplayFormat="C0" FieldName="totalQuote" />
            <DxGridDataColumn Width="175" Caption="Manager" FieldName="PMFullName" UnboundType="GridUnboundColumnType.String" UnboundExpression="projectManager.FirstName + ' ' + projectManager.LastName" />
        </Columns>
    </DxGrid>
}

<DxLoadingPanel @bind-Visible=@LoadingPanelVisible
                PositionTarget="body"
                ApplyBackgroundShading="true"
                CssClass="w-100">
</DxLoadingPanel>

@code {

    public string LeadTypeFilterLabel { get; set; } = "Types (Complete Info)";

    public string TradesFilterLabel { get; set; } = "Trades (All)";

    public bool IsLeadTypeListOpen { get; set; } = false;

    public List<ListItem> LeadTypeList = new List<ListItem>();

    public bool IsTradesListOpen { get; set; } = false;

    public List<ListItem> TradesList = new List<ListItem>();

    public bool ShowTestData = true;

    public virtual void ShowHideTestData()
    {
        if (ShowTestDataButtonText == "Show Test Data")
        {
            ShowTestData = true;
            ShowTestDataButtonText = "Hide Test Data";
        }
        else
        {
            ShowTestData = false;
            ShowTestDataButtonText = "Show Test Data";
        }
    }

    async void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        TimerDispose();
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    public ApplicationUser currentUser = new ApplicationUser();
    public bool isSystemAdmin = false;
    public bool isUserAdmin = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Utils _utils = new Utils();

            try
            {
                LeadTypeList.Add(new ListItem() { Text = "Complete Info", Value = "Complete Info" });
                LeadTypeList.Add(new ListItem() { Text = "Address Only", Value = "Address Only" });
                LeadTypeList.Add(new ListItem() { Text = "Product Requested", Value = "Product Requested" });

                TradesList.Add(new ListItem() { Text = "All", Value = "All" });
                var tradeList = WebServices.GetTradesList();
                foreach (var trade in tradeList)
                {
                    TradesList.Add(new ListItem() { Text = _utils.TitleCaseString(trade), Value = _utils.TitleCaseString(trade) });
                }

                var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
                var loggedInUser = authstate.User;
                var loggedInName = loggedInUser.Identity.Name;

                if (loggedInName != null && loggedInName != "")
                    currentUser = await UserManager.FindByNameAsync(loggedInName);

                if (currentUser.IsEnabled)
                {
                    isSystemAdmin = await UserManager.IsInRoleAsync(currentUser, "System Admin");
                    var isSiteAdmin = await UserManager.IsInRoleAsync(currentUser, "Site Admin");
                    var isGroupAdmin = await UserManager.IsInRoleAsync(currentUser, "Group Admin");

                    if (isSystemAdmin || isSiteAdmin || isGroupAdmin)
                    {
                        isUserAdmin = true;
                    }

                    List<ApplicationUser> adminUsers = new List<ApplicationUser>();
                    List<ApplicationUser> tmpUsers = UserManager.Users.ToList();
                    foreach (ApplicationUser adminUser in tmpUsers)
                    {
                        if (adminUser.IsEnabled)
                        {
                            var list = await UserManager.IsInRoleAsync(adminUser, "Project Manager");
                            adminUsers.Add(adminUser);
                        }
                    }

                    ProjectManagers = SortByLastNameUsingLinq(adminUsers);
                    TimerRefresh();

                    GetIpAddress();
                }
                else
                {
                    UserSignOut();
                }
            }
            catch (Exception ex)
            {
                var errMsg = ex.Message;
                return;
            }
        }
    }

    private void UserSignOut()
    {
        try
        {

            SignInManager.SignOutAsync();

            NavigationManager.NavigateTo("/Account/Lockout");
        }
        catch (Exception ex)
        {
            var errMsg = ex.Message;
        }
    }

    public QuoteLeaderboard leaderboardStats;

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    IEnumerable<string> Values { get; set; }
    IEnumerable<string> LeadTypeValues { get; set; }
    IEnumerable<string> TradeTypeValues { get; set; }

    public Quote selectedQuote { get; set; }

    bool LoadingPanelVisible { get; set; } = true;

    WebServices webServices = new WebServices();

    MemberService memberService = new MemberService();

    public bool IsAssignButtonEnabled = false;
    IEnumerable<ApplicationUser> SelectedProjectManager { get; set; }
    public List<ApplicationUser>? ProjectManagers = new List<ApplicationUser>();

    #region Private Properties

    private List<QuoteHeader>? quotes;

    public int currentItemIndex = 0;

    IGrid QuoteGrid { get; set; }

    #endregion

    #region Public Properties

    [Inject] public IJSRuntime jsRuntime { get; set; }

    public Timer _timer;
    public string updateStatus = "Fetching ";

    public string ClientIP = "";
    public string selectedQuoteId = "";

    public interface IQueryable : System.Collections.IEnumerable;

    public int currentItem = 0;
    public int selectedIndex = 0;

    public string SubmissionUserIP { get; set; }

    #endregion

    #region Parameters

    [Parameter]
    public string DisplayFormat { get; set; }

    [Parameter]
    public string RefreshStatus { get; set; } = "";

    [Parameter]
    public string StatusContainerClass { get; set; } = "container-action-buttons-hide";

    [Parameter]
    public string StatusClass { get; set; } = "message-normal";

    [Parameter]
    public string ShowTestDataButtonText { get; set; } = "Hide Test Data";

    [Parameter]
    public string RefreshButtonText { get; set; } = "Pause Refresh";

    [Parameter]
    public string RefreshButtonClass { get; set; } = "btn-refresh-active";

    [Parameter]
    public bool RefreshDisabled { get; set; } = false;

    [Parameter]
    public object SelectedQuoteItem { get; set; }

    [Parameter]
    public object SelectedEventItem { get; set; }

    [Parameter]
    public int VisibleIndex { get; set; }

    [Parameter]
    public bool ClearFilterButtonVisible { get; set; }

    [Parameter]
    public string SelectedLeadType { get; set; } = "New";

    [Parameter]
    public string SelectedTradeType { get; set; } = "All";

    #endregion

    #region Methods

    void SelectedProjectManagerChanged(IEnumerable<ApplicationUser> selectedProjectManager)
    {
        SelectedProjectManager = selectedProjectManager;

        if (SelectedProjectManager.Count() > 0)
            IsAssignButtonEnabled = true;
        else
            IsAssignButtonEnabled = false;
    }

    void FilterLeadTypes(IEnumerable<ListItem> selectedLeadType)
    {
        SelectedLeadType = "New";

        foreach (var item in selectedLeadType)
        {
            if (item.Value == "Complete Info")
            {
                SelectedLeadType = "New";
                LeadTypeFilterLabel = "Types (Complete Info)";
            }
            else
            {
                SelectedLeadType = item.Value;
                LeadTypeFilterLabel = "Types (" + SelectedLeadType + ")";
            }
        }

        IsLeadTypeListOpen = false;
    }

    void FilterTradeType(IEnumerable<ListItem> selectedTradeType)
    {
        LeadTypeList.Clear();

        foreach (var item in selectedTradeType)
        {
            SelectedTradeType = item.Value;
            if (SelectedTradeType == "Roofing")
            {
                LeadTypeList.Add(new ListItem() { Text = "Complete Info", Value = "Complete Info" });
                LeadTypeList.Add(new ListItem() { Text = "Address Only", Value = "Address Only" });
                LeadTypeList.Add(new ListItem() { Text = "Product Requested", Value = "Product Requested" });
            }
            else
            {
                LeadTypeList.Add(new ListItem() { Text = "Complete Info", Value = "Complete Info" });
            }
        }

        TradesFilterLabel = "Trades (" + SelectedTradeType + ")";
        IsTradesListOpen = false;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ProjectManagers = SortByLastNameUsingLinq(UserManager.Users.ToList());
            TimerRefresh();
        }

        GetIpAddress();
    }

    public List<ApplicationUser> SortByLastNameUsingLinq(List<ApplicationUser> originalList)
    {
        return originalList.OrderBy(x => x.LastName).ToList();
    }

    void OnRowClick(GridRowClickEventArgs args)
    {
        TimerDispose();

        var selectedRow = (QuoteHeader)QuoteGrid.GetDataItem(args.VisibleIndex);
        var quoteId = selectedRow._id;

        var referrerUrl = "/customers/";
        NavigationManager.NavigateTo("/quotes/details/" + quoteId + referrerUrl);
    }

    public async Task<string> GetIpAddress()
    {
        try
        {
            SubmissionUserIP = await jsRuntime.InvokeAsync<string>("getIpAddress").ConfigureAwait(true);

            return SubmissionUserIP;
        }
        catch (Exception e)
        {
            //If your request was blocked by CORS or some extension like uBlock Origin then you will get an exception.
            return string.Empty;
        }
    }

    public virtual void PauseRefresh(bool isPaused)
    {
        RefreshDisabled = isPaused;
        // ArchiveLeadsDisabled = isPaused;

        if (isPaused)
        {
            RefreshButtonText = "Resume Refresh";
            RefreshButtonClass = "btn-refresh-inactive";
            StatusClass = "message-warning";
            RefreshStatus = " Auto refresh paused...";

           TimerDispose();
        }
        else
        {
            RefreshButtonText = "Pause Refresh";
            RefreshButtonClass = "btn-refresh-active";
            StatusClass = "message";
            RefreshStatus = "";

            TimerRefresh();
        }
    }

    public virtual void ToggleRefresh()
    {
        if (RefreshButtonText == "Pause Refresh")
        {
            PauseRefresh(true);
        }
        else
        {
            PauseRefresh(false);
        }

        RefreshDisabled = false;
    }

    public void TimerDispose()
    {
        _timer?.Dispose();
        _timer = null;
    }

    private async Task TimerRefresh()
    {
        TimerDispose();

        LoadingPanelVisible = true;

        _timer = new Timer(new TimerCallback(_ =>
        {
            if(isSystemAdmin)
            {
                leaderboardStats = WebServices.GetLeaderBoardStats(ShowTestData);
                if (SelectedTradeType.Contains("All"))
                {
                    quotes = webServices.GetSummaries("Customer", ShowTestData);
                }
                else
                {
                    quotes = webServices.GetSummaries(SelectedTradeType, "Customer", ShowTestData);
                }
            }
            else
            {
                leaderboardStats = WebServices.GetLeaderBoardStats(currentUser.Email);
                quotes = webServices.GetSummaries("Customer", currentUser.Email);
            }

            updateStatus = quotes.Count().ToString("N0");
            StatusContainerClass = "container-action-buttons-show";

            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }), null, 1000, 1000);

        LoadingPanelVisible = false;
    }

    #endregion
}