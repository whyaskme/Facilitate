@page "/quotes/leads"

@using Facilitate.Admin.Data;
@using Facilitate.Libraries.Models;

@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore
@using Microsoft.AspNetCore.WebUtilities

@using Microsoft.AspNetCore.Mvc

@using MongoDB.Bson;

@using System.Text.Json;

@using DevExpress.Blazor;
@using DevExpress.Data;
@using DevExpress.Data.Linq;

@attribute [StreamRendering(true)]
@rendermode InteractiveServer
@inject WebServices WebServices

@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory
@inject HttpClient httpClient

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject RoleManager<IdentityRole> roleManager

@inject AuthenticationStateProvider GetAuthenticationStateAsync

@inject QuoteLeaderboard leaderboardStats

@attribute [IgnoreAntiforgeryToken]

<PageTitle>Leads</PageTitle>

<div class="quote-stats-header">
    <span class="quote-stats-count">@updateStatus Leads</span>
    <span class="quote-stats-value">@leaderboardStats.LeadValue.ToString("C0")</span>
    <span class="quote-stats-sqft">@leaderboardStats.LeadSqFt.ToString("N0")sqft</span>
</div>
<div class="quote-stats-hints">
    Select row to expand details. Click column headers to sort. Type and hit enter in any empty cell to search that column. If you have grouped columns below, drag and drop the column back into the grid header to restore.
</div>

<script>
    window.getIpAddress = () => {
        return fetch('https://jsonip.com/')
            .then((response) => response.json())
            .then((data) => {
                return data.ip
            })
    }
</script>

<AuthorizeView>
    <Authorized></Authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/Account/Login");
        }
    </NotAuthorized>
</AuthorizeView>

@if (quotes == null)
{
    @*     <p><em>Loading...</em></p> *@
}
else
{
    <DxGrid @ref="QuoteGrid"
            Data="@quotes"
            KeyFieldName="_id"
            PageSize="10"
            PagerPosition="GridPagerPosition.Bottom"
            ShowGroupPanel="true"
            AutoExpandAllGroupRows="true"
            ShowFilterRow="true"
            CssClass="mw-1100"
            RowClick="OnRowClick"
            AllowSelectRowByClick="true"
            SelectionMode="GridSelectionMode.Single"
            @bind-SelectedDataItem="@SelectedQuoteItem"
            TextWrapEnabled="false"
            PagerNavigationMode="PagerNavigationMode.InputBox"
            PageSizeSelectorVisible="true"
            PageSizeSelectorAllRowsItemVisible="false"
            DataItemDeleting="Grid_DataItemDeleting"
            KeyboardNavigationEnabled="true">
        <Columns>
            <DxGridDataColumn Width="175" Caption="Created" FieldName="timestamp" DisplayFormat="MM/dd/yyyy hh:mm tt" SortIndex="0" SortOrder="GridColumnSortOrder.Descending" AllowSort="true" />
            <DxGridDataColumn Width="125" Caption="First" FieldName="firstName" />
            <DxGridDataColumn Width="150" Caption="Last" FieldName="lastName" />
            <DxGridDataColumn Width="auto" Caption="Street" FieldName="street" />
            <DxGridDataColumn Width="150" Caption="City" FieldName="city" />
            <DxGridDataColumn Width="75" Caption="State" FieldName="state" />
            <DxGridDataColumn Width="75" Caption="Zip" FieldName="zip" />
            <DxGridDataColumn Width="75" Caption="Roofs" FieldName="numberOfIncludedStructures" />
            <DxGridDataColumn Width="75" Caption="SqFt" FieldName="totalSquareFeet" />
            <DxGridDataColumn Width="100" Caption="Quote" DisplayFormat="C0" FieldName="totalQuote" />
            <DxGridCommandColumn Width="150px" Caption="Actions" EditButtonVisible="false" DeleteButtonVisible="true" />
        </Columns>

        <DetailRowTemplate>
            @{
                var _quote = (Quote)context.DataItem;

                var _emailTabLabel = "Email " + @_quote.firstName + " Documents";

                roofsCount = _quote.structures.Count;
                if (roofsCount <= 1)
                    roofsCountLabel = roofsCount.ToString() + " Roof Project";
                else
                    roofsCountLabel = roofsCount.ToString() + " Roof Projects";

                productsCount = _quote.products.Count;
                if (productsCount <= 1)
                    productsCountLabel = productsCount.ToString() + " Product Quoted";
                else
                    productsCountLabel = productsCount.ToString() + " Products Quoted";

                attachmentsCount = _quote.attachments.Count;
                notesCount = _quote.notes.Count;
                eventsCount = _quote.events.Count;

                <h6>Homeowner</h6>
                <div class="row">
                    <div class="col">
                        <label>Name</label>
                        <span>@_quote.firstName @_quote.lastName</span>
                    </div>
                    <div class="col">
                        <label>Email</label>
                        <a href="mailto:@_quote.email">
                            <span>@_quote.email</span>
                        </a>
                    </div>
                    <div class="col">
                        <label>Phone</label>
                        <span>@_quote.phone</span>
                    </div>
                </div>

                <div class="row">
                    <div class="col">
                        <label>Address</label>
                        <a href="https://www.google.com/maps/search/@_quote.street @_quote.city, @_quote.state @_quote.zip" target="_blank">
                            @_quote.street @_quote.city, @_quote.state @_quote.zip
                        </a>
                    </div>
                    <div class="col">
                        <label>IP</label>
                        <a href="https://whatismyipaddress.com/ip/@SubmissionUserIP" target="_blank">
                            <span>Location</span>
                        </a>
                    </div>
                    <div class="col"></div>
                </div>

                <div class="table-spacer" />

                <br />

                <DxTabs CssClass="tabs-container">

                    <DxTabPage Id="Panel-Project-Manager" CssClass="tab-container" Text="@roofsCountLabel">

                        <div class="container">

                            <div class="row item-details-container">
                                <div class="col">
                                    <label>Total Quote</label>
                                    <span><b>@_quote.totalQuote.ToString("C0")</b></span>
                                </div>
                                <div class="col">
                                    <label>Total Sqft</label>
                                    <span><b>@_quote.totalSquareFeet.ToString("N0")</b></span>
                                </div>
                                <div class="col">
                                    <label>Included Roofs</label>
                                    <span><b>@_quote.numberOfIncludedStructures.ToString("N0")</b></span>
                                </div>
                                <div class="col">
                                </div>
                            </div>

                            <div class="row">
                                @{
                                    currentItemIndex = 0;

                                    for (var i = 0; i < @_quote.structures.Count; i++)
                                    {
                                        currentItemIndex = i + 1;

                                        <b>Roof #@currentItemIndex</b>
                                        <div class="row item-details-container">
                                            <div class="col">
                                                <label>Included</label>
                                                @{
                                                    if(@_quote.structures[i].isIncluded)
                                                    {
                                                        <span>Yes</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="system-warning">No</span>
                                                    }
                                                }
                                            </div>
                                            <div class="col">
                                                <label>Name</label>
                                                <span>@_quote.structures[i].name</span>
                                            </div>
                                            <div class="col">
                                                <label>SqFt</label>
                                                <span>@_quote.structures[i].squareFeet.ToString("N0")</span>
                                            </div>
                                            <div class="col">
                                                <label>Complexity</label>
                                                <span>@_quote.structures[i].roofComplexity</span>
                                            </div>
                                            <div class="col">
                                                <label>Slope</label>
                                                <span>@_quote.structures[i].slope</span>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </DxTabPage>

                    <DxTabPage Id="Panel-Products" Text="@productsCountLabel">

                        <div class="container">
                            @{
                                for (var i = 0; i < @_quote.products.Count; i++)
                                {
                                    currentItemIndex = i + 1;

                                    var priceLabel = @_quote.products[i].priceInfo.priceType;
                                    if (priceLabel == "BasicFinancing")
                                        priceLabel = "Basic";
                                    else
                                        priceLabel = @_quote.products[i].priceInfo.priceType;

                                    <b>Product #@currentItemIndex</b>

                                    <div class="item-details-container">

                                        <div class="row">
                                            <div class="col">
                                                <label>Name</label>
                                                <span>@_quote.products[i].name</span>
                                            </div>
                                            <div class="col">
                                                <label>Waste Factor</label>
                                                <span>@_quote.products[i].wasteFactorMainRoof</span>
                                            </div>
                                            <div class="col">
                                                <label>Price Type</label>
                                                <span>@priceLabel</span>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col">
                                                <label>Total Quote</label>
                                                <span>@_quote.products[i].priceInfo.total.ToString("C0")</span>
                                            </div>
                                            <div class="col">
                                                <label>Per Square</label>
                                                <span>@_quote.products[i].priceInfo.pricePerSquare.ToString("C0")</span>
                                            </div>
                                            <div class="col">
                                                <label>Monthly</label>
                                                <span>@_quote.products[i].priceInfo.monthly.ToString("C0")</span>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col">
                                                <label>APR</label>
                                                <span>@_quote.products[i].priceInfo.apr%</span>
                                            </div>
                                            <div class="col">
                                                <label>Months</label>
                                                <span>@_quote.products[i].priceInfo.months</span>
                                            </div>
                                            <div class="col">
                                            </div>
                                        </div>

                                    </div>
                                }
                            }
                        </div>

                    </DxTabPage>

                    <DxTabPage Id="Panel-Send-Files" Text="@_emailTabLabel">
                        <DxUpload Name="fileUpload1"
                                  SelectButtonText="Upload"
                                  AllowMultiFileUpload="true"
                                  UploadUrl="@GetUploadUrl("api/Upload/Upload/")"
                                  SelectedFilesChanged="@SelectedFilesChanged"
                                  MaxFileSize="15000000"
                                  AllowedFileExtensions="@(new List<string> { ".jpg", ".jpeg", ".gif", ".png", ".mpg", ".mp4" })"
                                  AcceptedFileTypes="@(new List<string> {  "image/*", "video/*"})"
                                  CssClass="@(SelectedFilesCount > 0 ? "w-100" : "add-item-button")">
                        </DxUpload>
                        <button class="btn btn-primary doc-select-button" disabled="@SendDocsDisabled" @onclick="@EmailFiles">Send Docs</button>
                    </DxTabPage>

                    <DxTabPage Id="Panel-Attach-Files" Text="Attachments">
                        <DxUpload Name="fileUpload2"
                                  SelectButtonText="Upload"
                                  AllowMultiFileUpload="true"
                                  UploadUrl="@GetUploadUrl("api/Upload/Upload/")"
                                  SelectedFilesChanged="@SelectedFilesChanged"
                                  MaxFileSize="15000000"
                                  AllowedFileExtensions="@(new List<string> { ".jpg", ".jpeg", ".gif", ".png", ".mpg", ".mp4" })"
                                  AcceptedFileTypes="@(new List<string> {  "image/*", "video/*"})"
                                  CssClass="@(SelectedFilesCount > 0 ? "w-100" : "add-item-button")">
                        </DxUpload>

                        @foreach (Attachment attachment in _quote.attachments)
                        {
                            if (!attachment.IsDeleted)
                            {
                                <div class="note-row">
                                    <div>
                                        <label>@attachmentsCount) @attachment.Date</label>
                                    </div>

                                    <span class="hyperlink-warning" @onclick="() => SelectAttachmentToDelete(_quote, attachment)">Delete</span>

                                    <span class="bar-spacer">|</span>
                                    <a href="@attachment.MediaUrl" target="_blank">
                                        <span>@attachment.MediaDescription</span>
                                    </a>
                                    <span class="bar-spacer">|</span>
                                    <label>File Type</label>
                                    <span>@FileType</span>
                                    <span class="bar-spacer">|</span>
                                    <label>Source</label>
                                    <span>@attachment.Author.FirstName @attachment.Author.LastName</span>
                                </div>

                                attachmentsCount--;
                            }
                        }
                    </DxTabPage>

                    <DxTabPage Id="Panel-Notes" Text="Notes">
                        <button class="btn btn-primary doc-select-button add-item-button" @onclick="@(() => IsPopupVisibleAddNote = true)">Add Note</button>
                        @foreach (Note note in _quote.notes)
                        {
                            if (!note.IsDeleted)
                            {
                                <div class="note-row">
                                    <div>
                                        <label>@notesCount) @note.Date</label>
                                    </div>

                                    <span class="hyperlink-warning" @onclick="() => SelectNoteToDelete(_quote, note)">Delete</span>

                                    <span class="bar-spacer">|</span>
                                    <span>@note.Details</span>

                                    <span class="bar-spacer">|</span>
                                    <label>Source</label>
                                    <span>@note.Author.FirstName @note.Author.LastName</span>
                                </div>

                                notesCount--;
                            }
                        }
                    </DxTabPage>

                    <DxTabPage Id="Panel-History" Text="History">
                        @foreach (Event _event in _quote.events)
                        {
                            <div class="note-row">
                                <div class="">
                                    <label>@eventsCount) @_event.DateTime</label>
                                </div>

                                <span class="bar-spacer">|</span>
                                <span>@_event.Details</span>

                                <span class="bar-spacer">|</span>
                                <label>Source</label>
                                <span>@_event.Author.FirstName @_event.Author.LastName</span>
                            </div>

                            eventsCount--;
                        }
                    </DxTabPage>

                    <DxTabPage Id="Panel-Origination" Text="Origination">
                        <table id="table-origin" class="table-detail">
                            <tbody>

                                <tr>
                                    <td>
                                        <label>Market</label>
                                        <span>@_quote.market</span>
                                    </td>
                                    <td>
                                        <label>Rep Name</label>
                                        <span>@_quote.repName</span>
                                    </td>
                                    <td>
                                        <label>Rep Email</label>
                                        <a href="mailto:@_quote.repEmail">
                                            <span>@_quote.repEmail</span>
                                        </a>
                                    </td>
                                </tr>

                                <tr>
                                    <td>
                                        <label>RecId</label>
                                        <span>@_quote._id</span>
                                    </td>
                                    <td>
                                        <label>Referrer</label>
                                        <a href="@_quote.externalUrl" target="_blank">
                                            <span>@_quote.externalUrl</span>
                                        </a>
                                    </td>
                                    <td>
                                        <label>Session</label>
                                        <span>@_quote.sessionId</span>
                                    </td>
                                </tr>

                                <tr>
                                    <td>
                                        <label>RefId</label>
                                        <span>@_quote.leadId</span>
                                    </td>
                                    <td>
                                        <label>Created</label>
                                        <span>@_quote.timestamp</span>
                                    </td>
                                    <td>
                                    </td>

                                </tr>
                            </tbody>
                        </table>
                    </DxTabPage>

                </DxTabs>

                <br />

                <div class="quote-detail-controls-container">
                    <button class="btn btn-primary" @onclick="@(() => IsAssignPopupVisible = true)">Assign</button>
                    <button class="btn btn-primary" @onclick="@(() => IsArchivePopupVisible = true)">Archive</button>
                    <button class="btn btn-primary" @onclick="CloseDetails">Close</button>
                </div>

            }
        </DetailRowTemplate>

    </DxGrid>
}

<DxPopup @bind-Visible="@IsAssignPopupVisible"
         ShowFooter="true"
         HeaderText="Please select a Project Manager for assignment">
    <BodyContentTemplate>
        <DxListBox Data="@ProjectManagers"
                   @bind-Values="@Values"
                   CssClass="popup-grid"
                   SelectedItemsChanged="@((IEnumerable<ApplicationUser> values) => SelectedProjectManagerChanged(values))"
                   SelectionMode="ListBoxSelectionMode.Single"
                   ShowCheckboxes="true">
            <Columns>
                <DxListEditorColumn FieldName="LastName" Caption="Last" />
                <DxListEditorColumn FieldName="FirstName" Caption="First" />
                <DxListEditorColumn FieldName="Email" Caption="Email" />
                <DxListEditorColumn FieldName="Id" Visible="false" Caption="Id" />
            </Columns>
        </DxListBox>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" Enabled="@IsAssignButtonEnabled" RenderStyle="ButtonRenderStyle.Primary" Text="Save" Click="AssignLead" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsAssignPopupVisible = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleSelectAttachmentToDelete" ShowFooter="true" HeaderText="Delete File">
    <BodyContentTemplate>
        Are you sure you want to delete "@selectedAttachment.MediaDescription"?
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="Delete" Click="DeleteSelectedAttachment" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsPopupVisibleSelectAttachmentToDelete = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleSelectNoteToDelete" ShowFooter="true" HeaderText="Delete Note">
    <BodyContentTemplate>
        Are you sure you want to delete "@selectedNote.Details"?
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="Delete" Click="DeleteSelectedNote" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsPopupVisibleSelectNoteToDelete = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleAddNote" ShowFooter="true" HeaderText="Add Note">
    <BodyContentTemplate>
        <p>Please type in your notes below.</p>
        <DxMemo @bind-Text="@NoteDetails" InputId="archive-reason" CssClass="cw-320" />
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton SubmitFormOnClick="true" CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="Save" Click="AddNote" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsPopupVisibleAddNote = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsArchivePopupVisible" ShowFooter="true" HeaderText="Please type in a reason for Archival below">
    <BodyContentTemplate>
        <DxMemo @bind-Text="@NoteDetails" InputId="archive-reason" CssClass="cw-320" />
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton SubmitFormOnClick="true" CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="Archive" Click="ArchiveLead" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsArchivePopupVisible = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleHelpSendFiles" ShowFooter="true" HeaderText="Send Documents Help?">
    <BodyContentTemplate>
        <p>Send Documents details...</p>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Close" Click="@(() => IsPopupVisibleHelpSendFiles = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleHelpFileAttachments" ShowFooter="true" HeaderText="File Attachments Help?">
    <BodyContentTemplate>
        <p>File Attachments details...</p>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Close" Click="@(() => IsPopupVisibleHelpFileAttachments = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleHelpFileNotes" ShowFooter="true" HeaderText="File Notes Help?">
    <BodyContentTemplate>
        <p>File Notes details...</p>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Close" Click="@(() => IsPopupVisibleHelpFileNotes = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxLoadingPanel @bind-Visible=@LoadingPanelVisible
                PositionTarget="body"
                ApplyBackgroundShading="true"
                CssClass="w-100">
</DxLoadingPanel>

<div class="@StatusContainerClass">
    <button class="btn btn-primary @ButtonClass" disabled="@RefreshDisabled" @onclick="ToggleRefresh">@ButtonText</button>
    <button class="btn btn-primary" disabled="@CreateLeadDisabled" @onclick="CreateLead">Create 1 Lead</button>
    <button class="btn btn-primary" disabled="@CreateLeadsDisabled" @onclick="CreateLeads">Create @itemsToCreate Leads</button>
</div>

@code {

    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        Quote selectedQuote = (Quote)e.DataItem;
        // selectedQuote.status = "Deleted";
        selectedQuote.status = "Archive";

        Event _event = new Event();
        _event.Name = "Deleted Quote";
        _event.DateTime = DateTime.UtcNow;
        _event.Details = "Admin deleted Quote";

        _event.Author = currentUser;

        selectedQuote.events.Add(_event);

        // Let's delete this quote
        WebServices.UpdateQuote(selectedQuote);
    }

    public ApplicationUser currentUser = new ApplicationUser();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
                var loggedInUser = authstate.User;
                var loggedInName = loggedInUser.Identity.Name;

                if (loggedInName != null && loggedInName != "")
                    currentUser = await UserManager.FindByNameAsync(loggedInName);

                if(currentUser.IsEnabled)
                {
                    List<ApplicationUser> adminUsers = new List<ApplicationUser>();
                    List<ApplicationUser> tmpUsers = UserManager.Users.ToList();
                    foreach (ApplicationUser adminUser in tmpUsers)
                    {
                        if (adminUser.IsEnabled)
                        {
                            var list = await UserManager.IsInRoleAsync(adminUser, "Project Manager");
                            adminUsers.Add(adminUser);
                        }
                    }

                    ProjectManagers = SortByLastNameUsingLinq(adminUsers);
                    RefreshTimer();

                    GetIpAddress();
                }
                else
                {
                    UserSignOut();
                }
            }
            catch (Exception ex)
            {
                var errMsg = ex.Message;
                return;
            }
        }
    }

    private void UserSignOut()
    {
        try{

            SignInManager.SignOutAsync();

            NavigationManager.NavigateTo("/Account/Lockout");
        }
        catch(Exception ex)
        {
            var errMsg = ex.Message;
        }
    }

    private readonly IClaimsProvider _claimsProvider;

    protected override void OnInitialized()
    {
        leaderboardStats = WebServices.GetLeaderBoardStats();
    }

    public int currentItemIndex = 0;

    public int noteCount = 0;

    IEnumerable<string> Values { get; set; }

    public int roofsCount = 0;
    public int productsCount = 0;

    public string roofsCountLabel = "";
    public string productsCountLabel = "";

    public Quote selectedQuote { get; set; }
    public Attachment selectedAttachment { get; set; }
    public Note selectedNote { get; set; }

    bool LoadingPanelVisible { get; set; } = true;

    WebServices webServices = new WebServices();

    public bool IsAssignButtonEnabled = false;
    IEnumerable<ApplicationUser> SelectedProjectManager { get; set; }
    public List<ApplicationUser>? ProjectManagers = new List<ApplicationUser>();

    #region Private Properties

    private List<Quote>? quotes;

    int SelectedFilesCount { get; set; }

    ObjectId SelectedFileId { get; set; }

    IGrid QuoteGrid { get; set; }

    IGrid EventGrid { get; set; }

    EntityInstantFeedbackSource InstantFeedbackSource { get; set; }

    bool isBulkInsert = false;

    string FileType { get; set; } = ".pdf";
    string Author { get; set; } = "unknown";

    string NoteDetails { get; set; } = "";

    #endregion

    #region Public Properties

    [Inject] public IJSRuntime jsRuntime { get; set; }

    public Timer _timer;

    public string ClientIP = "";
    public string selectedQuoteId = "";

    public interface IQueryable : System.Collections.IEnumerable;

    public int currentItem = 0;
    public int selectedIndex = 0;

    public string SubmissionUserIP { get; set; }

    public int itemsToCreate = 100;
    public string updateStatus = "Fetching ";

    public int attachmentsCount = 0;
    public int notesCount = 0;
    public int eventsCount = 0;

    #endregion

    #region Popup properties

    bool IsAssignPopupVisible { get; set; }

    bool IsPopupVisibleAddFile { get; set; }
    bool IsPopupVisibleSelectAttachmentToDelete { get; set; }

    bool IsPopupVisibleAddNote { get; set; }
    bool IsPopupVisibleSelectNoteToDelete { get; set; }

    bool IsPopupVisibleMakeCustomer { get; set; }
    bool IsArchivePopupVisible { get; set; }

    bool IsPopupVisibleHelpSendFiles { get; set; }
    bool IsPopupVisibleHelpFileAttachments { get; set; }
    bool IsPopupVisibleHelpFileNotes { get; set; }

    #endregion

    #region Parameters

    [Parameter]
    public string DisplayFormat { get; set; }

    [Parameter]
    public List<string> AcceptedFileTypes { get; set; }

    [Parameter]
    public GridDetailRowDisplayMode DetailRowDisplayMode { get; set; }

    [Parameter]
    public string RefreshStatus { get; set; } = "";

    [Parameter]
    public string StatusContainerClass { get; set; } = "container-action-buttons-hide";

    [Parameter]
    public string StatusClass { get; set; } = "message-normal";

    [Parameter]
    public string ButtonText { get; set; } = "Pause Refresh";

    [Parameter]
    public string ButtonClass { get; set; } = "btn btn-outline-primary btn-refresh-active";

    [Parameter]
    public bool RefreshDisabled { get; set; } = false;

    [Parameter]
    public bool CreateLeadDisabled { get; set; } = true;

    [Parameter]
    public bool CreateLeadsDisabled { get; set; } = true;

    [Parameter]
    public bool SendDocsDisabled { get; set; } = true;

    [Parameter]
    public bool ArchiveLeadsDisabled { get; set; } = true;

    [Parameter]
    public object SelectedQuoteItem { get; set; }

    [Parameter]
    public object SelectedEventItem { get; set; }

    [Parameter]
    public int VisibleIndex { get; set; }

    [Parameter]
    public bool ClearFilterButtonVisible { get; set; }

    #endregion

    #region Methods

    void SelectedProjectManagerChanged(IEnumerable<ApplicationUser> selectedProjectManager)
    {
        SelectedProjectManager = selectedProjectManager;

        if (SelectedProjectManager.Count() > 0)
            IsAssignButtonEnabled = true;
        else
            IsAssignButtonEnabled = false;
    }

    public List<ApplicationUser> SortByLastNameUsingLinq(List<ApplicationUser> originalList)
    {
        return originalList.OrderBy(x => x.LastName).ToList();
    }

    void OnRowClick(GridRowClickEventArgs args)
    {
        selectedIndex = args.VisibleIndex;
        selectedQuote = quotes[selectedIndex];

        var selectedDetailExpanded = QuoteGrid.IsDetailRowExpanded(selectedIndex);
        if (selectedDetailExpanded)
        {
            QuoteGrid.CollapseDetailRow(selectedIndex);

            PauseRefresh(false);
        }
        else
        {
            QuoteGrid.CollapseAllDetailRows();
            QuoteGrid.ExpandDetailRow(selectedIndex);

            PauseRefresh(true);
        }
    }

    public async Task<string> GetIpAddress()
    {
        try
        {
            SubmissionUserIP = await jsRuntime.InvokeAsync<string>("getIpAddress").ConfigureAwait(true);

            return SubmissionUserIP;
        }
        catch (Exception e)
        {
            //If your request was blocked by CORS or some extension like uBlock Origin then you will get an exception.
            return string.Empty;
        }
    }

    protected void SelectedFilesChanged(IEnumerable<UploadFileInfo> files)
    {
        SelectedFilesCount = files.ToList().Count;
        InvokeAsync(StateHasChanged);

        SendDocsDisabled = false;
    }

    protected void EmailFiles()
    {
        var tmpVal = "";
    }

    protected string GetUploadUrl(string url)
    {
        var absoluteUri = NavigationManager.ToAbsoluteUri(url).AbsoluteUri;

        return absoluteUri;
    }

    public void AssignLead()
    {
        LoadingPanelVisible = true;

        QuoteGrid.CollapseDetailRow(selectedIndex);

        selectedQuote.status = "Opportunity";
        selectedQuote.projectManager = SelectedProjectManager.ToList()[0];
        
        var sysUser = new ApplicationUser();
        sysUser.FirstName = "System";

        if (selectedQuote.attachments.Count == 0)
        {
            // Workflow and Subsequent Document Requirements
            Attachment workflowRequirements = new Attachment();
            workflowRequirements.MediaDescription = "Workflow and Subsequent Document Requirements";
            workflowRequirements.MediaUrl = "/docs/templates/misc/Workflow and Subsequent Document Requirements.pdf";
            workflowRequirements.Author = sysUser;
            selectedQuote.attachments.Add(workflowRequirements);

            Event workflowRequirementsEvent = new Event();
            workflowRequirementsEvent.Details = workflowRequirements.MediaDescription + " sent to " + selectedQuote.email;
            workflowRequirementsEvent.Author = sysUser;
            selectedQuote.events.Add(workflowRequirementsEvent);

            // Facilitate Engagement Agreement
            Attachment engagementAgreement = new Attachment();
            engagementAgreement.MediaDescription = "Facilitate Engagement Agreement";
            engagementAgreement.MediaUrl = "/docs/templates/agreements/Facilitate Engagement Agreement.docx";
            engagementAgreement.Author = sysUser;
            selectedQuote.attachments.Add(engagementAgreement);

            Event engagementAgreementEvent = new Event();
            engagementAgreementEvent.Details = engagementAgreement.MediaDescription + " sent to " + selectedQuote.email;
            engagementAgreementEvent.Author = sysUser;
            selectedQuote.events.Add(engagementAgreementEvent);

            // Welcome Letter
            Attachment welcomeLetter = new Attachment();
            welcomeLetter.MediaDescription = "Welcome to Facilitate.org";
            welcomeLetter.MediaUrl = "/docs/templates/boilerplate/Welcome to Facilitate.docx";
            welcomeLetter.Author = sysUser;
            selectedQuote.attachments.Add(welcomeLetter);

            Event welcomeLetterEvent = new Event();
            welcomeLetterEvent.Details = welcomeLetter.MediaDescription + " sent to " + selectedQuote.email;
            welcomeLetterEvent.Author = sysUser;
            selectedQuote.events.Add(welcomeLetterEvent);
        }

        Event statusChanged = new Event();
        statusChanged.Details = selectedQuote.firstName + " " + selectedQuote.lastName + " converted to Opportunity";
        statusChanged.Author = currentUser;
        selectedQuote.events.Add(statusChanged);

        var projectManager = selectedQuote.projectManager;

        // Assignment event
        Event assignmentEvent = new Event();
        assignmentEvent.Name = "Assignment";
        assignmentEvent.Details = "Lead assigned to Project Manager (" + projectManager.FirstName + " " + projectManager.LastName + "), moved to Opportunities and emailed to: " + projectManager.Email;
        assignmentEvent.Author = currentUser;

        selectedQuote.events.Add(assignmentEvent);

        WebServices.UpdateQuote(selectedQuote);

        IsAssignPopupVisible = false;
        IsAssignButtonEnabled = false;

        PauseRefresh(false);
    }

    public void ArchiveLead()
    {
        selectedQuote.status = "Archive";

        QuoteGrid.CollapseDetailRow(selectedIndex);

        Note note = new Note();
        note.Summary = selectedQuote.firstName + " " + selectedQuote.lastName + " moved to Archives";
        note.Details = @NoteDetails;
        note.Author = currentUser;

        selectedQuote.notes.Add(note);

        Event _event = new Event();
        _event.Details = selectedQuote.firstName + " " + selectedQuote.lastName + " moved to Archives";
        _event.Author = currentUser;
        selectedQuote.events.Add(_event);

        WebServices.UpdateQuote(selectedQuote);

        IsArchivePopupVisible = false;
        NoteDetails = "";

        PauseRefresh(false);
    }

    public void AddNote()
    {
        QuoteGrid.CollapseDetailRow(selectedIndex);

        Note note = new Note();
        note.Summary = "Note Added";
        note.Details = @NoteDetails;
        note.Author = currentUser;

        selectedQuote.notes.Add(note);

        Event _event = new Event();
        _event.Details = "Note (" + note.Details + ") added to Quote";
        _event.Author = currentUser;

        selectedQuote.events.Add(_event);

        IsPopupVisibleAddNote = false;
        NoteDetails = "";

        WebServices.UpdateQuote(selectedQuote);

        RefreshTimer();
        quotes = webServices.GetQuotes("New");

        QuoteGrid.ExpandDetailRow(selectedIndex);

        PauseRefresh(true);
    }

    public void CloseDetails()
    {
        QuoteGrid.CollapseDetailRow(selectedIndex);

        PauseRefresh(false);
    }

    public void SelectAttachmentToDelete(Quote quote, Attachment attachment)
    {
        selectedQuote = quote;
        selectedAttachment = attachment;

        IsPopupVisibleSelectAttachmentToDelete = true;

        RefreshTimer();
    }

    public void SelectNoteToDelete(Quote quote, Note note)
    {
        selectedQuote = quote;
        selectedNote = note;

        IsPopupVisibleSelectNoteToDelete = true;
    }

    public void DeleteSelectedAttachment()
    {
        selectedAttachment.IsDeleted = true;

        Event _event = new Event();
        _event.Details = "Deleted attachment (" + selectedAttachment.MediaDescription + ") from Quote";
       _event.Author = currentUser;

        selectedQuote.events.Add(_event);

        WebServices.UpdateQuote(selectedQuote);

        RefreshTimer();

        IsPopupVisibleSelectAttachmentToDelete = false;

        attachmentsCount--;
    }

    public void DeleteSelectedNote()
    {
        selectedNote.IsDeleted = true;

        Event _event = new Event();
        _event.Details = "Deleted note (" + selectedNote.Details + ") from Quote";
        _event.Author = currentUser;

        selectedQuote.events.Add(_event);

        WebServices.UpdateQuote(selectedQuote);

        RefreshTimer();

        IsPopupVisibleSelectNoteToDelete = false;

        notesCount--;
    }

    private void CreateLeads()
    {
        Quote quote = new Quote();

        for (var i = 0; i < itemsToCreate; i++)
        {
            updateStatus = "Creating ";
            CreateLead();
        }

        var results = string.Empty;

        try
        {
            WebServices.CreateQuote(quote);
            results = "POSTED";
        }
        catch (Exception ex)
        {
            results = ex.Message;
        }
        finally
        {
            PauseRefresh(false);
        }

        PauseRefresh(false);
    }

    private void CreateLead()
    {
        updateStatus = "Creating ";

        List<String> nameGenders = new List<string>();
        nameGenders.Add("male");
        nameGenders.Add("female");

        Quote quote = new Quote();
        quote.status = "New";

        quote.ipAddress = SubmissionUserIP;

        Utils utils = new Utils();

        var randomStreetNumber = utils.GetRandomStreetNumber();
        var randomStreetName = utils.GetRandomStreetName();

        var randomState = utils.GetRandomState();
        var stateName = randomState[0];
        var stateAbbr = randomState[1];
        var stateId = randomState[2];

        var randomCity = utils.GetRandomCity(MongoDB.Bson.ObjectId.Parse(stateId));

        string cityId = randomCity[0];
        string cityName = randomCity[1];
        string cityCountyId = randomCity[2];
        string cityTimeZoneId = randomCity[3];

        var randomZipCode = utils.GetRandomZipCode(MongoDB.Bson.ObjectId.Parse(cityId)).ToString();

        quote.address = randomStreetNumber + " " + randomStreetName + ", " + cityName + ", " + stateAbbr + " " + randomZipCode;
        quote.fullAddress = quote.address;
        quote.street = randomStreetNumber + " " + randomStreetName;
        quote.city = cityName;
        quote.state = stateAbbr;
        quote.zip = randomZipCode;

        Random rnd = new Random();
        int randomInt = rnd.Next(0, 1);

        quote.firstName = utils.GetRandomFirstName(nameGenders[randomInt]);
        quote.lastName = utils.GetRandomLastName();

        quote.email = quote.firstName.ToLower() + "@" + quote.lastName.ToLower() + ".com";
        quote.phone = "(" + utils.GetRandomAreaCode() + ") " + utils.GetRandomHomePhoneNumber();
        quote.market = quote.city + ", " + quote.state;
        quote.externalUrl = "https://app.roofle.com/dashboard";
        quote.sessionId = "nH9YvHwoBldl2ZkpQSWrX";

        randomInt = rnd.Next(0, 1);
        var repName = utils.GetRandomFirstName(nameGenders[randomInt]) + " " + utils.GetRandomLastName();

        quote.repName = repName;
        quote.repEmail = repName.Replace(" ", ".").ToLower() + "@facilitate.org";

        randomInt = rnd.Next(5000, 9999);
        quote.leadId = randomInt;

        // Add Structure Info
        int totalSquareFeet = 0;
        int mainRoofTotalSquareFeet = randomInt;

        randomInt = rnd.Next(1, 3);

        quote.numberOfStructures = randomInt;
        quote.numberOfIncludedStructures = quote.numberOfStructures;

        quote.structures = null;
        quote.structures = new List<Structure>();
        for (var i = 0; i < quote.numberOfStructures; i++)
        {
            Structure structure = new Structure();
            switch (i)
            {
                case 1:
                    structure.initialSquareFeet = rnd.Next(1000, 5000);
                    structure.isIncluded = true;
                    structure.name = "Main Roof";
                    structure.roofComplexity = "Complex";
                    structure.slope = "steep";
                    break;
                case 2:
                    structure.initialSquareFeet = rnd.Next(500, 1000);
                    structure.isIncluded = true;
                    structure.name = "Garage Roof";
                    structure.roofComplexity = "Simple";
                    structure.slope = "medium";
                    break;
                default:
                    structure.initialSquareFeet = rnd.Next(250, 1000);
                    structure.isIncluded = false;
                    structure.name = "Misc Roof";
                    structure.roofComplexity = "Compound";
                    structure.slope = "shallow";
                    break;
            }

            structure.squareFeet = structure.initialSquareFeet;

            totalSquareFeet += structure.initialSquareFeet;

            quote.structures.Add(structure);
        }

        quote.totalSquareFeet = totalSquareFeet;
        quote.totalInitialSquareFeet = quote.totalSquareFeet;

        quote.mainRoofTotalSquareFeet = totalSquareFeet;

        quote.products = null;
        quote.products = new List<Product>();

        // Add Product Info
        var productIndex = 0;
        double quoteTotal = 0;

        foreach (Structure structure in quote.structures)
        {
            productIndex++;

            Product product = new Product();
            product.name = "Certainteed Landmark (" + productIndex + ")";
            product.id = 1;

            PriceInfo _priceInfo = new PriceInfo();
            _priceInfo.priceType = "BasicFinancing";

            randomInt = rnd.Next(550, 675);
            _priceInfo.pricePerSquare = randomInt;

            randomInt = rnd.Next(250, 400);
            _priceInfo.monthly = randomInt;

            randomInt = rnd.Next(8, 26);
            _priceInfo.apr = randomInt;

            randomInt = rnd.Next(120, 360);
            _priceInfo.months = randomInt;

            product.priceInfo = _priceInfo;

            PriceRange _priceRange = new PriceRange();
            randomInt = rnd.Next(1150, 5200);
            _priceRange.totalMin = randomInt;

            randomInt = rnd.Next(16575, 16575);
            _priceRange.totalMax = randomInt;

            randomInt = rnd.Next(200, 300);
            _priceRange.monthlyMin = randomInt;

            randomInt = rnd.Next(350, 400);
            _priceRange.monthlyMax = randomInt;

            product.priceRange = _priceRange;

            product.wasteFactorMainRoof = 1.2;

            _priceInfo.total = (_priceInfo.pricePerSquare * quote.totalSquareFeet) / 100;

            if (quoteTotal < _priceInfo.total)
                quoteTotal = _priceInfo.total;

            quote.products.Add(product);
        }

        quote.totalQuote = quoteTotal;

        Event _event = new Event();
        _event.Name = "New Quote";
        _event.DateTime = DateTime.UtcNow;
        _event.Details = "Admin generated test Quote";

        _event.Author = currentUser;

        quote.events.Add(_event);

        var results = string.Empty;

        try
        {
            WebServices.CreateQuote(quote);
            results = "POSTED";
        }
        catch (Exception ex)
        {
            results = ex.Message;
        }
        finally
        {
            PauseRefresh(false);
        }
    }

    public virtual void PauseRefresh(bool isPaused)
    {
        RefreshDisabled = isPaused;

        CreateLeadDisabled = isPaused;
        CreateLeadsDisabled = isPaused;

        if (isPaused)
        {
            RefreshDisabled = false;

            CreateLeadDisabled = false;
            CreateLeadsDisabled = false;

            ButtonText = "Resume Refresh";
            ButtonClass = "btn btn-outline-primary btn-refresh-inactive";
            StatusClass = "message-warning";
            RefreshStatus = " Auto refresh paused...";

            _timer?.Dispose();
        }
        else
        {
            CreateLeadDisabled = true;
            CreateLeadsDisabled = true;

            ButtonText = "Pause Refresh";
            ButtonClass = "btn btn-outline-primary btn-refresh-active";
            StatusClass = "message";
            RefreshStatus = "";

            RefreshTimer();
        }
    }

    public virtual void ToggleRefresh()
    {
        if (ButtonText == "Pause Refresh")
        {
            PauseRefresh(true);
        }
        else
        {
            PauseRefresh(false);
        }

        RefreshDisabled = false;
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

    private async Task RefreshTimer()
    {
        LoadingPanelVisible = true;

        _timer = new Timer(new TimerCallback(_ =>
        {
            // Check to see if user IsEnabled. If not, log them out an redirect to login page
            //var isUserEnabled = IsUserEnabled();

            leaderboardStats = WebServices.GetLeaderBoardStats();

            quotes = webServices.GetQuotes("New");
            updateStatus = quotes.Count().ToString("N0");
            StatusContainerClass = "container-action-buttons-show";

            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }), null, 1000, 1000);

        LoadingPanelVisible = false;
    }

    private async Task<bool> IsUserEnabled()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var name = user.Identity.Name;

        if (name != null && name != "")
            currentUser = await UserManager.FindByNameAsync(name);

        return currentUser.IsEnabled;
    }

    #endregion
}