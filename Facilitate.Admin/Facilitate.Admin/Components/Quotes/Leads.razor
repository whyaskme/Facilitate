@page "/quotes/leads"

@using DevExpress.Data.ODataLinq
@using DevExpress.Data.PLinq
@using Facilitate.Admin.Data;
@using Facilitate.Libraries.Models;

@using Microsoft.EntityFrameworkCore

@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Mvc;

@using System.Text.Json;

@using DevExpress.Blazor;
@using DevExpress.Data;
@using DevExpress.Data.Linq;
@using MongoDB.Driver.Linq
@using System.Reactive.Concurrency


@attribute [IgnoreAntiforgeryToken]
@attribute [StreamRendering(true)]
@rendermode InteractiveServer

@implements IDisposable

@inject WebServices webServices
@inject Utils utils
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IDbContextFactory<FacilitateDbContext> dbFactory

<PageTitle>Leads</PageTitle>

<AuthorizeView>
    <Authorized></Authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/Account/Login?returnurl=" + NavigationManager.Uri);
        }
    </NotAuthorized>
</AuthorizeView>

@if (!LoadingPanelVisible)
{
    <div class="quotes-leaderboard-page-header">
        <div class="col-md-3 stat-element">
            <span class="stat-value"><b>@leaderboardStats.TotalQuoteCount.ToString("N0") Quotes</b></span>
            <span class="stat-divider">|</span>
            <span class="stat-value">@leaderboardStats.TotalQuoteValue.ToString("C0")</span>
            <span class="stat-divider">|</span>
            <span class="stat-value">@leaderboardStats.TotalQuoteSqFt.ToString("N0") sqft</span>
            <span class="stat-divider">|</span>
        </div>
        <div class="col-md-1 stat-element">
            <AuthorizeView Roles="System Admin,Site Admin,Group Admin">
                <Authorized>
                    <a href="/quotes/leads">Leads</a>
                    <span class="stat-value"><b>@leaderboardStats.LeadCount.ToString("N0")</b></span>
                </Authorized>
                <NotAuthorized></NotAuthorized>
            </AuthorizeView>
        </div>
        <div class="col-md-1 stat-element">
            <a href="/quotes/opportunities">Opportunities</a>
            <span class="stat-value"><b>@leaderboardStats.OpportunityCount.ToString("N0")</b></span>
        </div>
        <div class="col-md-1 stat-element">
            <a href="/quotes/customers">Customers</a>
            <span class="stat-value"><b>@leaderboardStats.CustomerCount.ToString("N0")</b></span>
        </div>
        <div class="col-md-1 stat-element">
            <AuthorizeView Roles="System Admin,Site Admin,Group Admin">
                <Authorized>
                    <a href="/quotes/completed">Completions</a>
                    <span class="stat-value"><b>@leaderboardStats.CompletionCount.ToString("N0")</b></span>
                </Authorized>
                <NotAuthorized></NotAuthorized>
            </AuthorizeView>
        </div>
        <div class="col-md-1 stat-element">
            <AuthorizeView Roles="System Admin,Site Admin,Group Admin">
                <Authorized>
                    <a href="/quotes/archives">Archives</a>
                    <span class="stat-value"><b>@leaderboardStats.ArchiveCount.ToString("N0")</b></span>
                </Authorized>
                <NotAuthorized></NotAuthorized>
            </AuthorizeView>
        </div>
        <div class="col-md-1 stat-element">
            <AuthorizeView Roles="System Admin,Site Admin,Group Admin">
                <Authorized>
                    <a href="/quotes/warranties">Warranties</a>
                    <span class="stat-value"><b>@leaderboardStats.WarrantyCount.ToString("N0")</b></span>
                </Authorized>
                <NotAuthorized></NotAuthorized>
            </AuthorizeView>
        </div>
    </div>

    <div class="div-filters">

        <button class="action-button header-recordID-button" @onclick="ShowRecordIDs">@RedcordIdButtonLabel</button>

        @if (isSystemAdmin)
        {
            <div class="div-filter">
                <DxButton CssClass="action-button" Click="@ShowHideTestData">@ShowTestDataButtonText</DxButton>
            </div>
        }

        <div class="div-filter">
            <DxButton CssClass="action-button" Click="@ToggleRefresh">@RefreshButtonText</DxButton>
        </div>

        <div class="div-filter">

            <div id="dropdown-customization-target-container-trades">
                <DxButton CssClass="action-button" Id="btnTrades" Click="@((e) => { isDroppingDown = true; IsTradesListOpen = !IsTradesListOpen; })">@TradesFilterLabel</DxButton>
            </div>
            <DxDropDown @bind-IsOpen="@IsTradesListOpen"
                        MinWidth="max(20vw, 100px)"
                        PositionMode="DropDownPositionMode.Bottom"
                        PositionTarget="#dropdown-customization-target-container-trades"
                        RestrictionTarget="#Navigation-DropDown-Customization"
                        CloseMode="DropDownCloseMode.Close"
                        PreventCloseOnPositionTargetClick="true"
                        HeaderVisible="false"
                        HeaderText="Trades"
                        FooterVisible="false">
                <BodyContentTemplate>
                    <DxListBox Data="@TradesList"
                               id="ddlTradesList"
                               @bind-Values="@TradeTypeValues"
                               SelectedItemsChanged="@(async (IEnumerable<ListItem> values) => await FilterTradeType(values))"
                               SelectionMode="ListBoxSelectionMode.Single">
                    </DxListBox>
                </BodyContentTemplate>
                <FooterContentTemplate>
                    <DxButton CssClass="popup-button my-1 ms-2" Text="OK" Click="@context.CloseCallback" />
                    <DxButton CssClass="popup-button my-1 ms-2" Text="Cancel" Click="@context.CloseCallback" />
                </FooterContentTemplate>
            </DxDropDown>
        </div>

        <div class="div-filter">
            <div id="dropdown-customization-target-container">
                <DxButton CssClass="action-button" Id="btnLeadTypes" Click="@((e) => { isDroppingDown = true; IsLeadTypeListOpen = !IsLeadTypeListOpen; })">@LeadTypeFilterLabel</DxButton>
            </div>
            <DxDropDown @bind-IsOpen="@IsLeadTypeListOpen"
                        MinWidth="max(20vw, 100px)"
                        PositionMode="DropDownPositionMode.Bottom"
                        PositionTarget="#dropdown-customization-target-container"
                        RestrictionTarget="#Navigation-DropDown-Customization"
                        CloseMode="DropDownCloseMode.Close"
                        PreventCloseOnPositionTargetClick="true"
                        HeaderVisible="false"
                        HeaderText="Available Lead Types"
                        FooterVisible="false">
                <BodyContentTemplate>
                    <DxListBox Data="@LeadTypeList"
                               id="ddlLeadTypeList"
                               @bind-Values="@LeadTypeValues"
                               SelectedItemsChanged="@(async (IEnumerable<ListItem> values) => await FilterLeadTypes(values))"
                               SelectionMode="ListBoxSelectionMode.Single">
                    </DxListBox>
                </BodyContentTemplate>
                <FooterContentTemplate>
                    <DxButton CssClass="popup-button my-1 ms-2" Text="OK" Click="@context.CloseCallback" />
                    <DxButton CssClass="popup-button my-1 ms-2" Text="Cancel" Click="@context.CloseCallback" />
                </FooterContentTemplate>
            </DxDropDown>
        </div>

    </div>

    <div class="quote-stats-header">
        <span class="quote-stats-count">@updateStatus Leads</span>
        <span class="quote-stats-value">@leaderboardStats.LeadValue.ToString("C0")</span>
        <span class="quote-stats-sqft">@leaderboardStats.LeadSqFt.ToString("N0") sqft</span>
    </div>
    <div class="quote-stats-hints">
        Select row to view details. Click column headers to sort. Type and hit enter in any empty cell to search that column.
    </div>

    <DxGrid @ref="QuoteGrid"
            Data="@gridSource"
            KeyFieldName="_id"
            PageSize="10"
            PagerPosition="GridPagerPosition.Bottom"
            ShowFilterRow="true"
            CssClass="mw-1100"
            RowClick="OnRowClick"
            AllowSelectRowByClick="true"
            SelectionMode="GridSelectionMode.Single"
            @bind-SelectedDataItem="@SelectedQuoteItem"
            TextWrapEnabled="false"
            PagerNavigationMode="PagerNavigationMode.InputBox"
            PageSizeSelectorVisible="true"
            PageSizeSelectorAllRowsItemVisible="false"
            KeyboardNavigationEnabled="true">
        <Columns>
            <DxGridDataColumn Visible="@recordIDVisible" Width="200" Caption="Record Id" FieldName="_id" />
            @*<DxGridDataColumn Width="85" Caption="Status" FieldName="status" />*@
            <DxGridDataColumn Width="115" Caption="Trade" FieldName="applicationType" />
            <DxGridDataColumn Width="150" Caption="Created" FieldName="timestamp" DisplayFormat="MM/dd/yyyy hh:mm tt" SortIndex="0" SortOrder="GridColumnSortOrder.Descending" AllowSort="true" />
            <DxGridDataColumn Width="100" Caption="First" FieldName="firstName" />
            <DxGridDataColumn Width="125" Caption="Last" FieldName="lastName" />
            <DxGridDataColumn Width="200" Caption="Email" FieldName="email" />
            <DxGridDataColumn Width="auto" Caption="Street" FieldName="street" />
            <DxGridDataColumn Width="125" Caption="City" FieldName="city" />
            <DxGridDataColumn Width="50" Caption="State" FieldName="state" />
            <DxGridDataColumn Width="65" Caption="Zip" FieldName="zip" />
            <DxGridDataColumn Width="65" Caption="SqFt" FieldName="totalSquareFeet" />
            <DxGridDataColumn Width="75" Caption="Quote" DisplayFormat="C0" FieldName="totalQuote" />
            <DxGridCommandColumn Width="100px" Caption="Actions" NewButtonVisible="false" EditButtonVisible="false" DeleteButtonVisible="true" />
        </Columns>
    </DxGrid>
}

<DxLoadingPanel @bind-Visible=@LoadingPanelVisible
                PositionTarget="body"
                ApplyBackgroundShading="true"
                CssClass="w-100">
</DxLoadingPanel>

@code {

    #region Public Properties
    public bool recordIDVisible = false;
    public string RedcordIdButtonLabel = "Show Record Id";

    public string LeadTypeFilterLabel { get; set; } = "Types (Complete Info)";

    public string TradesFilterLabel { get; set; } = "Trades (All)";

    public bool IsLeadTypeListOpen { get; set; } = false;

    public List<ListItem> LeadTypeList = new List<ListItem>();

    public bool IsTradesListOpen { get; set; } = false;

    public List<ListItem> TradesList = new List<ListItem>();

    public bool ShowTestData = true;

    public QuoteLeaderboard leaderboardStats = new QuoteLeaderboard();

    public ApplicationUser currentUser = new ApplicationUser();
    public bool isSystemAdmin = false;
    public bool isUserAdmin = false;

    public Timer _timer;
    public string updateStatus = "Fetching ";
    #endregion






    #region Private Properties
    bool LoadingPanelVisible { get; set; } = true;

    private bool isDroppingDown = false;

    IEnumerable<string>? LeadTypeValues { get; set; }
    IEnumerable<string>? TradeTypeValues { get; set; }

    private FacilitateDbContext? dbContext;
    private IQueryable<Lead>? gridQ;
    private EntityServerModeSource? gridSource { get; set; }
    private IGrid? QuoteGrid { get; set; }

    private int lastCount = 0;

    private readonly SemaphoreSlim _mutex = new SemaphoreSlim(1, 1);
    #endregion





    #region Parameters
    [Parameter]
    public string ShowTestDataButtonText { get; set; } = "Hide Test Data";

    [Parameter]
    public string RefreshButtonText { get; set; } = "Pause Refresh";

    [Parameter]
    public object SelectedQuoteItem { get; set; }

    [Parameter]
    public string SelectedLeadType { get; set; } = "New";

    [Parameter]
    public string SelectedTradeType { get; set; } = "All";
    #endregion





    #region ComponentModel Overrides
    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        dbContext = dbFactory.CreateDbContext();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var tasks = new List<Task>();

                tasks.Add(buildLists());

                await initUser();

                tasks.Add(doUpdateLeaderBoardStats());
                tasks.Add(initGridSource());

                await Task.WhenAll(tasks);

                // Start the refresh timer
                enableTimer();

                LoadingPanelVisible = false;

                // Notify the UI to render
                StateHasChanged();
            }
            catch (Exception ex)
            {
                var errMessage = ex.Message;
            }
        }
    }

    public void Dispose()
    {
        disposeTimer();
        gridSource = null;
        gridQ = null;
        dbContext?.Dispose();
    }
    #endregion





    public void ShowRecordIDs()
    {
        if (recordIDVisible)
        {
            recordIDVisible = false;
            RedcordIdButtonLabel = "Show Record Id";
        }
        else
        {
            recordIDVisible = true;
            RedcordIdButtonLabel = "Hide Record Id";
        }
    }

    public async Task ShowHideTestData(MouseEventArgs args)
    {
        if (ShowTestDataButtonText == "Show Test Data")
        {
            ShowTestData = true;
            ShowTestDataButtonText = "Hide Test Data";
        }
        else
        {
            ShowTestData = false;
            ShowTestDataButtonText = "Show Test Data";
        }

        await applyFilters();
    }

    async void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        disposeTimer();
        NavigationManager.LocationChanged -= OnLocationChanged;
    }


    private async Task initUser()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var loggedInUser = authstate.User;
        var loggedInName = loggedInUser.Identity.Name;

        if (loggedInName != null && loggedInName != "")
            currentUser = await UserManager.FindByNameAsync(loggedInName);

        if (currentUser.IsEnabled)
        {
            isSystemAdmin = await UserManager.IsInRoleAsync(currentUser, "System Admin");

            var isSiteAdmin = await UserManager.IsInRoleAsync(currentUser, "Site Admin");
            var isGroupAdmin = await UserManager.IsInRoleAsync(currentUser, "Group Admin");

            if (isSystemAdmin || isSiteAdmin || isGroupAdmin)
            {
                isUserAdmin = true;
            }

            // List<ApplicationUser> adminUsers = new List<ApplicationUser>();
            // List<ApplicationUser> tmpUsers = UserManager.Users.ToList();
            // foreach (ApplicationUser adminUser in tmpUsers)
            // {
            //     if (adminUser.IsEnabled)
            //     {
            //         var list = await UserManager.IsInRoleAsync(adminUser, "Project Manager");
            //         adminUsers.Add(adminUser);
            //     }
            // }
        }
        else
        {
            UserSignOut();
        }
    }

    private void UserSignOut()
    {
        try
        {

            SignInManager.SignOutAsync();

            NavigationManager.NavigateTo("/Account/Lockout");
        }
        catch (Exception ex)
        {
            var errMsg = ex.Message;
        }
    }


    private async Task buildLists()
    {
        LeadTypeList.Add(new ListItem() { Text = "Complete Info", Value = "Complete Info" });
        LeadTypeList.Add(new ListItem() { Text = "Address Only", Value = "Address Only" });
        LeadTypeList.Add(new ListItem() { Text = "Product Requested", Value = "Product Requested" });
    }





    #region Methods



    private async Task FilterLeadTypes(IEnumerable<ListItem> selectedLeadType)
    {
        if (isDroppingDown)
        {
            isDroppingDown = false;
            return;
        }

        SelectedLeadType = "New";

        foreach (var item in selectedLeadType)
        {
            if (item.Value == "Complete Info")
            {
                SelectedLeadType = "New";
                LeadTypeFilterLabel = "Types (Complete Info)";
            }
            else
            {
                SelectedLeadType = item.Value;
                LeadTypeFilterLabel = "Types (" + SelectedLeadType + ")";
            }
        }

        IsLeadTypeListOpen = false;

        await applyFilters();
    }

    private async Task FilterTradeType(IEnumerable<ListItem> selectedTradeType)
    {
        if (isDroppingDown)
        {
            isDroppingDown = false;
            return;
        }

        LeadTypeList.Clear();

        foreach (var item in selectedTradeType)
        {
            if (item != null)
            {
                SelectedTradeType = item.Value;
                if (SelectedTradeType == "Roofing")
                {
                    LeadTypeList.Add(new ListItem() { Text = "Complete Info", Value = "Complete Info" });
                    LeadTypeList.Add(new ListItem() { Text = "Address Only", Value = "Address Only" });
                    LeadTypeList.Add(new ListItem() { Text = "Product Requested", Value = "Product Requested" });
                }
                else
                {
                    LeadTypeList.Add(new ListItem() { Text = "Complete Info", Value = "Complete Info" });
                }
            }
        }

        TradesFilterLabel = "Trades (" + SelectedTradeType + ")";
        IsTradesListOpen = false;

        await applyFilters();
    }

    void OnRowClick(GridRowClickEventArgs args)
    {
        disposeTimer();

        var selectedRow = (Lead)QuoteGrid.GetDataItem(args.VisibleIndex);
        var quoteId = selectedRow._id;

        var referrerUrl = "/leads/";

        NavigationManager.NavigateTo("/quotes/details/" + quoteId + referrerUrl);
    }

    public async Task pauseRefresh(bool isPaused)
    {
        if (isPaused)
        {
            RefreshButtonText = "Resume Refresh";

            disposeTimer();
        }
        else
        {
            RefreshButtonText = "Pause Refresh";

            // Yield for the UI
            await Task.Delay(1);

            // Do a refresh and setup the timer
            await refresh();
            enableTimer();
        }
    }

    public async Task ToggleRefresh(MouseEventArgs args)
    {
        if (RefreshButtonText == "Pause Refresh")
        {
            await pauseRefresh(true);
        }
        else
        {
            await pauseRefresh(false);
        }
    }

    public void disposeTimer()
    {
        _timer?.Dispose();
        _timer = null;
    }

    private void enableTimer()
    {
        disposeTimer();

        _timer = new Timer(new TimerCallback(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await refresh();
            });
            _timer?.Change(10000, Timeout.Infinite);
        }), null, 10000, Timeout.Infinite);
    }


    private async Task doUpdateLeaderBoardStats()
    {
        if (isSystemAdmin)
        {
            if (SelectedTradeType.Contains("All"))
            {
                leaderboardStats = await webServices.GetLeaderBoardStatsAsync("New", ShowTestData);
            }
            else
            {
                leaderboardStats = await webServices.GetLeaderBoardStatsAsync(SelectedTradeType, "New", ShowTestData);
            }
        }
        else
        {
            leaderboardStats = await webServices.GetLeaderBoardStatsAsync(currentUser.Email);
        }
    }

    private void buildQueryable()
    {
        if (isSystemAdmin)
        {
            if (SelectedTradeType.Contains("All"))
            {
                gridQ = webServices.GetQeuryableSummaries(dbContext.Leads, "New", ShowTestData);
            }
            else
            {
                gridQ = webServices.GetQeuryableSummaries(dbContext.Leads, SelectedTradeType, "New", ShowTestData);
            }
        }
        else
        {
            gridQ = webServices.GetQeuryableSummaries(dbContext.Leads, "New", currentUser.Email);
        }
    }

    private async Task initGridSource()
    {
        try
        {
            gridSource = null;
            buildQueryable();

            // Get the count
            var count = await gridQ.CountAsync();

            gridSource = new EntityServerModeSource();
            gridSource.QueryableSource = gridQ;
            gridSource.KeyExpression = "_id";
            gridSource.ExceptionThrown += (sender, args) =>
            {
                var ex = args.Exception;
                throw ex;
            };

            updateStatus = count.ToString("N0");
        }
        catch (Exception ex)
        {
            //throw ex;
        }
    }

    private async Task doRefresh(bool isRefreshGrid = true)
    {
        try
        {
            var task = doUpdateLeaderBoardStats();

            if (isRefreshGrid)
            {
                var count = await gridQ.CountAsync();
                updateStatus = count.ToString("N0");
                //QuoteGrid.Reload();
                gridSource.Reload();
            }

            await task;

            TradesList.Clear();
            TradesList.Add(new ListItem() { Text = "All", Value = "All" });
            foreach (var trade in leaderboardStats.Trades)
            {
                TradesList.Add(new ListItem() { Text = utils.TitleCaseString(trade), Value = utils.TitleCaseString(trade) });
            }

            // Notify the UI to render
            StateHasChanged();
        }
        catch (Exception ex)
        {
            throw (ex);
        }
    }

    private async Task applyFilters()
    {
        // Yield for the UI
        await Task.Delay(1);

        await _mutex.WaitAsync();
        try
        {
            await initGridSource();
            await doRefresh(false);
        }
        catch (Exception ex)
        {
            throw;
        }
        finally
        {
            _mutex.Release();
        }
    }

    private async Task refresh()
    {
        await _mutex.WaitAsync();
        try
        {
            await doRefresh();
        }
        catch (Exception ex)
        {
            throw;
        }
        finally
        {
            _mutex.Release();
        }
    }

    #endregion
}