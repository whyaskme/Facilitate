@page "/quotes/leads"

@using Facilitate.Admin.Data;
@using Facilitate.Libraries.Models;

@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Mvc.Rendering;
@using Microsoft.AspNetCore.Mvc.Routing
@using Microsoft.AspNetCore.WebUtilities;

@using MongoDB.Bson;

@using System.Text.Json;

@using DevExpress.Blazor;
@using DevExpress.Data;
@using DevExpress.Data.Linq;
@using DevExpress.Web;

@using Microsoft.AspNetCore.Html;

@attribute [StreamRendering(true)]
@rendermode InteractiveServer
@inject WebServices WebServices

@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory
@inject HttpClient httpClient

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject RoleManager<IdentityRole> roleManager

@inject AuthenticationStateProvider GetAuthenticationStateAsync

@attribute [IgnoreAntiforgeryToken]

<PageTitle>Leads</PageTitle>

<AuthorizeView>
    <Authorized></Authorized>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/Account/Login?returnurl=" + NavigationManager.Uri);
        }
    </NotAuthorized>
</AuthorizeView>

<script>
    window.getIpAddress = () => {
        return fetch('https://jsonip.com/')
            .then((response) => response.json())
            .then((data) => {
                return data.ip
            })
    }
</script>

@if (quotes == null)
{
    @*     <p><em>Loading...</em></p> *@
}
else
{
    <div class="quotes-leaderboard-page-header">
        <div class="col-md-3 stat-element">
            <span class="stat-value"><b>@leaderboardStats.TotalQuoteCount.ToString("N0") Quotes</b></span>
            <span class="stat-divider">|</span>
            <span class="stat-value">@leaderboardStats.TotalQuoteValue.ToString("C0")</span>
        </div>
        <div class="col-md-1 stat-element">
            <AuthorizeView Roles="System Admin,Site Admin,Group Admin">
                <Authorized>
                    <a href="/quotes/leads">Leads</a>
                    <span class="stat-value"><b>@leaderboardStats.LeadCount.ToString("N0")</b></span>
                </Authorized>
                <NotAuthorized></NotAuthorized>
            </AuthorizeView>
        </div>
        <div class="col-md-1 stat-element">
            <a href="/quotes/opportunities">Opportunities</a>
            <span class="stat-value"><b>@leaderboardStats.OpportunityCount.ToString("N0")</b></span>
        </div>
        <div class="col-md-1 stat-element">
            <a href="/quotes/customers">Customers</a>
            <span class="stat-value"><b>@leaderboardStats.CustomerCount.ToString("N0")</b></span>
        </div>
        <div class="col-md-1 stat-element">
            <AuthorizeView Roles="System Admin,Site Admin,Group Admin">
                <Authorized>
                    <a href="/quotes/completed">Completions</a>
                    <span class="stat-value"><b>@leaderboardStats.CompletionCount.ToString("N0")</b></span>
                </Authorized>
                <NotAuthorized></NotAuthorized>
            </AuthorizeView>
        </div>
        <div class="col-md-1 stat-element">
            <AuthorizeView Roles="System Admin,Site Admin,Group Admin">
                <Authorized>
                    <a href="/quotes/archives">Archives</a>
                    <span class="stat-value"><b>@leaderboardStats.ArchiveCount.ToString("N0")</b></span>
                </Authorized>
                <NotAuthorized></NotAuthorized>
            </AuthorizeView>
        </div>
        <div class="col-md-1 stat-element">
            <AuthorizeView Roles="System Admin,Site Admin,Group Admin">
                <Authorized>
                    <a href="/quotes/warranties">Warranties</a>
                    <span class="stat-value"><b>@leaderboardStats.WarrantyCount.ToString("N0")</b></span>
                </Authorized>
                <NotAuthorized></NotAuthorized>
            </AuthorizeView>
        </div>
    </div>

    <div class="div-filters">

        <button class="action-button header-recordID-button" @onclick="ShowRecordIdColumns">@RedcordIdButtonLabel</button>

        @{
            if (isSystemAdmin)
            {
                <div class="div-filter">
                    <DxButton CssClass="action-button" Click="ShowHideTestData">@ShowTestDataButtonText</DxButton>
                </div>
            }
        }

        <div class="div-filter">
            <DxButton CssClass="action-button" Click="ToggleRefresh">@RefreshButtonText</DxButton>
        </div>

        <div class="div-filter">

            <div id="dropdown-customization-target-container-trades">
                <DxButton CssClass="action-button" Id="btnTrades" Click="() => IsTradesListOpen = !IsTradesListOpen">@TradesFilterLabel</DxButton>
            </div>

            <DxDropDown
                @bind-IsOpen="@IsTradesListOpen"
                MinWidth="max(20vw, 100px)"
                PositionMode="DropDownPositionMode.Bottom"
                PositionTarget="#dropdown-customization-target-container-trades"
                RestrictionTarget="#Navigation-DropDown-Customization"
                CloseMode="DropDownCloseMode.Close"
                PreventCloseOnPositionTargetClick="true"
                HeaderVisible="false"
                HeaderText="Trades"
                FooterVisible="false"
               >
                <BodyContentTemplate>
                    <DxListBox Data="@TradesList"
                                id="ddlTradesList"
                                @bind-Values="@TradeTypeValues"
                                SelectedItemsChanged="@((IEnumerable<ListItem> values) => FilterTradeType(values))"
                                SelectionMode="ListBoxSelectionMode.Single">
                    </DxListBox>
                </BodyContentTemplate>
            </DxDropDown>
        </div>

        <div class="div-filter">
            <div id="dropdown-customization-target-container">
                <DxButton CssClass="action-button" Id="btnLeadTypes" Click="() => IsLeadTypeListOpen = !IsLeadTypeListOpen">@LeadTypeFilterLabel</DxButton>
            </div>
            <DxDropDown
                @bind-IsOpen="@IsLeadTypeListOpen"
                MinWidth="max(20vw, 100px)"
                PositionMode="DropDownPositionMode.Bottom"
                PositionTarget="#dropdown-customization-target-container"
                RestrictionTarget="#Navigation-DropDown-Customization"
                CloseMode="DropDownCloseMode.Close"
                PreventCloseOnPositionTargetClick="true"
                HeaderVisible="false"
                HeaderText="Available Lead Types"
                FooterVisible="false"
               >
                <BodyContentTemplate>
                        <DxListBox Data="@LeadTypeList"
                                   id="ddlLeadTypeList"
                                   @bind-Values="@LeadTypeValues"
                                   SelectedItemsChanged="@((IEnumerable<ListItem> values) => FilterLeadTypes(values))"
                                   SelectionMode="ListBoxSelectionMode.Single">
                        </DxListBox>
                    <SampleEditForm/>
                </BodyContentTemplate>
                <FooterContentTemplate>
                    <DxButton CssClass="@currentActionButtonClass" Text="OK" Click="@context.CloseCallback"/>
                    <DxButton CssClass="@currentActionButtonClass" Text="Cancel" Click="@context.CloseCallback"/>
                </FooterContentTemplate>
            </DxDropDown>
        </div>

    </div>

    <div class="quote-stats-header">
        <span class="quote-stats-count">@updateStatus Leads</span>
        <span class="quote-stats-value">@leaderboardStats.LeadValue.ToString("C0")</span>
    </div>
    <div class="quote-stats-hints">
        Select row to view details. Click column headers to sort. Type and hit enter in any empty cell to search that column. If you have grouped columns below, drag and drop the column back into the grid header to restore.
    </div>

    <DxGrid @ref="QuoteGrid"
            Data="@quotes"
            PageSize="10"
            PagerPosition="GridPagerPosition.Bottom"
            ShowGroupPanel="true"
            AutoExpandAllGroupRows="true"
            ShowFilterRow="true"
            CssClass="mw-1100"
            RowClick="OnRowClick"
            AllowSelectRowByClick="true"
            SelectionMode="GridSelectionMode.Single"
            @bind-SelectedDataItem="@SelectedQuoteItem"
            DataItemDeleting="OnDataItemDeleting"
            TextWrapEnabled="false"
            PagerNavigationMode="PagerNavigationMode.InputBox"
            PageSizeSelectorVisible="true"
            PageSizeSelectorAllRowsItemVisible="false"
            KeyboardNavigationEnabled="true">
        <Columns>
            <DxGridDataColumn Visible="@ShowRowIndexColumn" Width="35" Caption="Row" FieldName="rowIndex" />
            <DxGridDataColumn Visible="@ShowRecordIdColumn" Width="215" Caption="Record Id" FieldName="_id" />
            <DxGridDataColumn Visible="@ShowStatusColumn" Width="85" Caption="Status" FieldName="status" />
            <DxGridDataColumn Visible="@ShowTradeColumn" Width="85" Caption="Trade" FieldName="Trade" />
            <DxGridDataColumn Visible="@ShowCategoryColumn" Width="85" Caption="Category" FieldName="TradeCategory" />
            <DxGridDataColumn Visible="@ShowCreatedColumn" Width="160" Caption="Created" FieldName="timestamp" DisplayFormat="MM/dd/yyyy hh:mm tt" SortIndex="0" SortOrder="GridColumnSortOrder.Descending" AllowSort="true" />
            <DxGridDataColumn Visible="@ShowCreatedColumn" Width="160" Caption="Updated" FieldName="lastUpdated" DisplayFormat="MM/dd/yyyy hh:mm tt" />
            <DxGridDataColumn Visible="@ShowFirstNameColumn" Width="85" Caption="First" FieldName="firstName" />
            <DxGridDataColumn Visible="@ShowLastNameColumn" Width="100" Caption="Last" FieldName="lastName" />
            <DxGridDataColumn Visible="@ShowEmailColumn" Width="150" Caption="Email" FieldName="email" />
            <DxGridDataColumn Visible="@ShowStreetColumn" Width="auto" Caption="Street" FieldName="street" />
            <DxGridDataColumn Visible="@ShowCityColumn" Width="125" Caption="City" FieldName="city" />
            <DxGridDataColumn Visible="@ShowStateColumn" Width="50" Caption="State" FieldName="state" />
            <DxGridDataColumn Visible="@ShowZipColumn" Width="65" Caption="Zip" FieldName="zip" />
            <DxGridDataColumn Visible="@ShowSqFtColumn" Width="65" Caption="SqFt" FieldName="totalSquareFeet" />
            <DxGridDataColumn Visible="@ShowBidColumn" Width="85" Caption="Bid" DisplayFormat="C0" FieldName="totalQuote" />
            <DxGridDataColumn Visible="@ShowBidderColumn" Width="125" Caption="Bidder" FieldName="PMFullName" UnboundType="GridUnboundColumnType.String" UnboundExpression="Bidder.FirstName + ' ' + Bidder.LastName" />
            <DxGridDataColumn Visible="@ShowBidExpiresColumn" Width="85" Caption="Bid Expires" FieldName="BiddingExpires" />
            <DxGridDataColumn Visible="@ShowBidTypeColumn" Width="85" Caption="Bid Type" FieldName="BidderType" />
            <DxGridCommandColumn Visible="@ShowActionsColumn" Width="100px" Caption="Actions" NewButtonVisible="false" EditButtonVisible="false" DeleteButtonVisible="true" />
        </Columns>
    </DxGrid>
}

<DxLoadingPanel @bind-Visible=@LoadingPanelVisible
                PositionTarget="body"
                ApplyBackgroundShading="true"
                CssClass="w-100">
</DxLoadingPanel>

@code {

    List<ListItem> columnWidths = new List<ListItem>();

    public int currentQuoteIndex = 0;

    public string currentActionButtonClass = "action-button-standalone";

    public string quoteIdToRemove = "";

    async Task OnDataItemDeleting(GridDataItemDeletingEventArgs args)
    {
        QuoteHeader selectedQuote = (QuoteHeader)args.DataItem;

        quoteIdToRemove = selectedQuote._id;

        var quoteToRemove = WebServices.GetQuote(quoteIdToRemove)[0];
        quoteToRemove.status = "Archive";

        Event _event = new Event();
        _event.Author = currentUser;
        _event.Name = quoteToRemove.Trade + " quote (" + quoteIdToRemove + ") Archived";
        _event.Details = _event.Name;

        // Add event to child quote
        quoteToRemove.events.Add(_event);

        WebServices.UpdateQuote(quoteToRemove);
    }

    public bool ShowRowIndexColumn { get; set; }
    public bool ShowRecordIdColumn { get; set; }
    public bool ShowStatusColumn { get; set; }
    public bool ShowTradeColumn { get; set; }
    public bool ShowCategoryColumn { get; set; }
    public bool ShowCreatedColumn { get; set; }
    public bool ShowUpdatedColumn { get; set; }
    public bool ShowFirstNameColumn { get; set; }
    public bool ShowLastNameColumn { get; set; }
    public bool ShowEmailColumn { get; set; }
    public bool ShowStreetColumn { get; set; }
    public bool ShowCityColumn { get; set; }
    public bool ShowStateColumn { get; set; }
    public bool ShowZipColumn { get; set; }
    public bool ShowSqFtColumn { get; set; }
    public bool ShowBidColumn { get; set; }
    public bool ShowBidderColumn { get; set; }
    public bool ShowBidExpiresColumn { get; set; }
    public bool ShowBidTypeColumn { get; set; }
    public bool ShowActionsColumn { get; set; }
    public bool ShowRelationshipColumn { get; set; }

    public int RowIndexColumnWidth = 0;
    public int RecordIdColumnWidth = 0;
    public int StatusColumnWidth = 0;
    public int TradeColumnWidth = 0;
    public int CategoryColumnWidth = 0;
    public int CreatedColumnWidth = 0;
    public int UpdatedColumnWidth = 0;
    public int FirstNameColumnWidth = 0;
    public int LastNameColumnWidth = 0;
    public int EmailColumnWidth = 0;
    public string StreetColumnWidth = "auto";
    public int CityColumnWidth = 0;
    public int StateColumnWidth = 0;
    public int ZipColumnWidth = 0;
    public int SqFtColumnWidth = 0;
    public int BidColumnWidth = 0;
    public int BidderColumnWidth = 0;
    public int BidExpiresColumnWidth = 0;
    public int BidTypeColumnWidth = 0;
    public int ActionsColumnWidth = 0;
    public int RelationshipColumnWidth = 0;

    public string LeadTypeFilterLabel { get; set; } = "Types (Complete Info)";

    public string TradesFilterLabel { get; set; } = "Trades (All)";

    public bool IsLeadTypeListOpen { get; set; } = false;

    public List<ListItem> LeadTypeList = new List<ListItem>();

    public bool IsTradesListOpen { get; set; } = false;

    public List<ListItem> TradesList = new List<ListItem>();

    public bool emailSentStatus = false;

    public bool ShowTestData = true;

    public virtual void ShowHideTestData()
    {
        if (ShowTestDataButtonText == "Show Test Data")
        {
            ShowTestData = true;
            ShowTestDataButtonText = "Hide Test Data";
        }
        else
        {
            ShowTestData = false;
            ShowTestDataButtonText = "Show Test Data";
        }
    }

    public string RedcordIdButtonLabel = "Show Hidden Data";
    public void ShowRecordIdColumns()
    {
        if (ShowRecordIdColumn)
        {
            ShowRecordIdColumn = false;
            RedcordIdButtonLabel = "Show Hidden Data";
        }
        else
        {
            ShowRecordIdColumn = true;
            RedcordIdButtonLabel = "Hide Hidden Data";
        }
    }

    public QuoteLeaderboard leaderboardStats = new QuoteLeaderboard();

    Utils utils = new Utils();

    async void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        TimerDispose();
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    public ApplicationUser currentUser = new ApplicationUser();
    public bool isSystemAdmin = false;
    public bool isUserAdmin = false;

    public Utils _utils = new Utils();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                LeadTypeList.Add(new ListItem() { Text = "Complete Info", Value = "Complete Info" });
                LeadTypeList.Add(new ListItem() { Text = "Address Only", Value = "Address Only" });
                LeadTypeList.Add(new ListItem() { Text = "Product Requested", Value = "Product Requested" });

                var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
                var loggedInUser = authstate.User;
                var loggedInName = loggedInUser.Identity.Name;

                if (loggedInName != null && loggedInName != "")
                    currentUser = await UserManager.FindByNameAsync(loggedInName);

                if(currentUser.IsEnabled)
                {
                    isSystemAdmin = await UserManager.IsInRoleAsync(currentUser, "System Admin");

                    var isSiteAdmin = await UserManager.IsInRoleAsync(currentUser, "Site Admin");
                    var isGroupAdmin = await UserManager.IsInRoleAsync(currentUser, "Group Admin");

                    if (isSystemAdmin || isSiteAdmin || isGroupAdmin)
                    {
                        isUserAdmin = true;
                    }

                    List<ApplicationUser> adminUsers = new List<ApplicationUser>();
                    List<ApplicationUser> tmpUsers = UserManager.Users.ToList();
                    foreach (ApplicationUser adminUser in tmpUsers)
                    {
                        if (adminUser.IsEnabled)
                        {
                            var list = await UserManager.IsInRoleAsync(adminUser, "Project Manager");
                            adminUsers.Add(adminUser);

                            // var userRoles = await UserManager.GetRolesAsync(adminUser);
                        }
                    }

                    ProjectManagers = SortByLastNameUsingLinq(adminUsers);
                    TimerRefresh();

                    GetIpAddress();
                }
                else
                {
                    UserSignOut();
                }
            }
            catch (Exception ex)
            {
                var errMsg = ex.Message;
                return;
            }
        }
    }

    private void UserSignOut()
    {
        try{

            SignInManager.SignOutAsync();

            NavigationManager.NavigateTo("/Account/Lockout");
        }
        catch(Exception ex)
        {
            var errMsg = ex.Message;
        }
    }

    private readonly IClaimsProvider _claimsProvider;

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;

        ShowRowIndexColumn = false;
        ShowRecordIdColumn = false;
        ShowStatusColumn = false;
        ShowTradeColumn = true;
        ShowCategoryColumn = true;
        ShowCreatedColumn = true;
        ShowUpdatedColumn = false;
        ShowFirstNameColumn = true;
        ShowLastNameColumn = true;
        ShowEmailColumn = false;
        ShowStreetColumn = true;
        ShowCityColumn = true;
        ShowStateColumn = true;
        ShowZipColumn = true;
        ShowBidColumn = true;
        ShowBidderColumn = true;
        ShowBidExpiresColumn = true;
        ShowBidTypeColumn = true;
        ShowActionsColumn = true;
        ShowSqFtColumn = false;
        ShowRelationshipColumn = true;

        columnWidths = WebServices.GetColumnWidths();

        foreach (ListItem listItem in columnWidths)
        {
            switch (listItem.Value)
            {
                case "Row":
                    RowIndexColumnWidth = Convert.ToInt32(listItem.Text);
                    break;
                case "Record Id":
                    RecordIdColumnWidth = Convert.ToInt32(listItem.Text);
                    break;
                case "Status":
                    StatusColumnWidth = Convert.ToInt32(listItem.Text);
                    break;
                case "Trade":
                    TradeColumnWidth = Convert.ToInt32(listItem.Text);
                    break;
                case "Category":
                    CategoryColumnWidth = Convert.ToInt32(listItem.Text);
                    break;
                case "Created":
                    CreatedColumnWidth = Convert.ToInt32(listItem.Text);
                    break;
                case "Updated":
                    UpdatedColumnWidth = Convert.ToInt32(listItem.Text);
                    break;
                case "FirstName":
                    FirstNameColumnWidth = Convert.ToInt32(listItem.Text);
                    break;
                case "LastName":
                    LastNameColumnWidth = Convert.ToInt32(listItem.Text);
                    break;
                case "Email":
                    EmailColumnWidth = Convert.ToInt32(listItem.Text);
                    break;
                case "Street":
                    StreetColumnWidth = listItem.Text;
                    break;
                case "City":
                    CityColumnWidth = Convert.ToInt32(listItem.Text);
                    break;
                case "State":
                    StateColumnWidth = Convert.ToInt32(listItem.Text);
                    break;
                case "Zip":
                    ZipColumnWidth = Convert.ToInt32(listItem.Text);
                    break;
                case "SqFt":
                    SqFtColumnWidth = Convert.ToInt32(listItem.Text);
                    break;
                case "Bid":
                    BidColumnWidth = Convert.ToInt32(listItem.Text);
                    break;
                case "Bidder":
                    BidderColumnWidth = Convert.ToInt32(listItem.Text);
                    break;
                case "Bid Expires":
                    BidExpiresColumnWidth = Convert.ToInt32(listItem.Text);
                    break;
                case "Bid Type":
                    BidTypeColumnWidth = Convert.ToInt32(listItem.Text);
                    break;
                case "Actions":
                    ActionsColumnWidth = Convert.ToInt32(listItem.Text);
                    break;
                case "Relationship":
                    RelationshipColumnWidth = Convert.ToInt32(listItem.Text);
                    break;
            }
        }
    }

    public int currentItemIndex = 0;

    IEnumerable<string> Values { get; set; }
    IEnumerable<string> LeadTypeValues { get; set; }
    IEnumerable<string> TradeTypeValues { get; set; }

    public QuoteHeader selectedQuote { get; set; }

    bool LoadingPanelVisible { get; set; } = true;

    WebServices webServices = new WebServices();

    public bool IsAssignButtonEnabled = false;
    IEnumerable<ApplicationUser> SelectedProjectManager { get; set; }
    public List<ApplicationUser>? ProjectManagers = new List<ApplicationUser>();

    #region Private Properties

    private List<QuoteHeader>? quotes;

    IGrid QuoteGrid { get; set; }

    #endregion

    #region Public Properties

    [Inject] public IJSRuntime jsRuntime { get; set; }

    public Timer _timer;
    public string updateStatus = "Fetching ";

    public string ClientIP = "";
    public string selectedQuoteId = "";

    public interface IQueryable : System.Collections.IEnumerable;

    public int currentItem = 0;
    public int selectedIndex = 0;

    public string SubmissionUserIP { get; set; }

    #endregion

    #region Parameters

    [Parameter]
    public string DisplayFormat { get; set; }

    [Parameter]
    public string RefreshStatus { get; set; } = "";

    [Parameter]
    public string StatusContainerClass { get; set; } = "container-action-buttons-hide";

    [Parameter]
    public string StatusClass { get; set; } = "message-normal";

    [Parameter]
    public string ShowTestDataButtonText { get; set; } = "Hide Test Data";

    [Parameter]
    public string RefreshButtonText { get; set; } = "Pause Refresh";

    [Parameter]
    public string RefreshButtonClass { get; set; } = "btn-refresh-active";

    [Parameter]
    public bool RefreshDisabled { get; set; } = false;

    [Parameter]
    public bool SendDocsDisabled { get; set; } = true;

    [Parameter]
    public bool ArchiveLeadsDisabled { get; set; } = true;

    [Parameter]
    public object SelectedQuoteItem { get; set; }

    [Parameter]
    public object SelectedEventItem { get; set; }

    [Parameter]
    public int VisibleIndex { get; set; }

    [Parameter]
    public bool ClearFilterButtonVisible { get; set; }

    [Parameter]
    public string SelectedLeadType { get; set; } = "New";

    [Parameter]
    public string SelectedTradeType { get; set; } = "All";

    #endregion

    #region Methods

    void FilterLeadTypes(IEnumerable<ListItem> selectedLeadType)
    {
        SelectedLeadType = "New";

        foreach(var item in selectedLeadType)
        {
            if (item.Value == "Complete Info")
            {
                SelectedLeadType = "New";
                LeadTypeFilterLabel = "Types (Complete Info)";
            }
            else
            {
                SelectedLeadType = item.Value;
                LeadTypeFilterLabel = "Types (" + SelectedLeadType + ")";
            }
        }

        IsLeadTypeListOpen = false;
    }

    void FilterTradeType(IEnumerable<ListItem> selectedTradeType)
    {
        var index = 0;

        LeadTypeList.Clear();

        foreach (var item in selectedTradeType)
        {
            index++;

            if(item != null)
            {
                SelectedTradeType = item.Value;
                if (SelectedTradeType == "Roofing")
                {
                    LeadTypeList.Add(new ListItem() { Text = "Complete Info", Value = "Complete Info" });
                    LeadTypeList.Add(new ListItem() { Text = "Address Only", Value = "Address Only" });
                    LeadTypeList.Add(new ListItem() { Text = "Product Requested", Value = "Product Requested" });
                }
                else
                {
                    LeadTypeList.Add(new ListItem() { Text = "Complete Info", Value = "Complete Info" });
                }
            }
        }

        TradesFilterLabel = "Trades (" + SelectedTradeType + ")";
        IsTradesListOpen = false;
    }

    public List<ApplicationUser> SortByLastNameUsingLinq(List<ApplicationUser> originalList)
    {
        return originalList.OrderBy(x => x.LastName).ToList();
    }

    void OnRowClick(GridRowClickEventArgs args)
    {
        TimerDispose();

        var selectedRow = (QuoteHeader) QuoteGrid.GetDataItem(args.VisibleIndex);
        var quoteId = selectedRow._id;

        var Referrer = "/leads/";

        NavigationManager.NavigateTo("/quotes/details/" + quoteId + Referrer);
    }

    public async Task<string> GetIpAddress()
    {
        try
        {
            SubmissionUserIP = await jsRuntime.InvokeAsync<string>("getIpAddress").ConfigureAwait(true);

            return SubmissionUserIP;
        }
        catch (Exception e)
        {
            //If your request was blocked by CORS or some extension like uBlock Origin then you will get an exception.
            return string.Empty;
        }
    }

    public virtual void PauseRefresh(bool isPaused)
    {
        RefreshDisabled = isPaused;

        if (isPaused)
        {
            RefreshDisabled = false;

            RefreshButtonText = "Resume Refresh";
            RefreshButtonClass = "btn btn-outline-primary btn-refresh-inactive";
            StatusClass = "message-warning";
            RefreshStatus = " Auto refresh paused...";

            TimerDispose();
        }
        else
        {
            RefreshButtonText = "Pause Refresh";
            RefreshButtonClass = "btn-refresh-active";
            StatusClass = "message";
            RefreshStatus = "";

            TimerRefresh();
        }
    }

    public virtual void ToggleRefresh()
    {
        if (RefreshButtonText == "Pause Refresh")
        {
            PauseRefresh(true);
        }
        else
        {
            PauseRefresh(false);
        }

        RefreshDisabled = false;
    }

    public void TimerDispose()
    {
        _timer?.Dispose();
        _timer = null;
    }

    private async Task TimerRefresh()
    {
        try
        {
            TimerDispose();

            LoadingPanelVisible = true;

            _timer = new Timer(new TimerCallback(_ =>
            {
                // Check to see if user IsEnabled. If not, log them out an redirect to login page
                // var isUserEnabled = IsUserEnabled();

                ShowBidColumn = true;

                if (isSystemAdmin)
                {
                    switch (SelectedTradeType)
                    {
                        case "All":
                            quotes = webServices.GetSummaries("New", ShowTestData);
                            leaderboardStats = WebServices.GetLeaderBoardStats("New", ShowTestData);
                            break;
                        case "Aggregate":
                            quotes = webServices.GetSummaries(SelectedTradeType, "New", ShowTestData);
                            leaderboardStats = WebServices.GetLeaderBoardStats("New", ShowTestData);
                            ShowBidColumn = false;
                            break;

                        default:
                            quotes = webServices.GetSummaries(SelectedTradeType, "New", ShowTestData);
                            leaderboardStats = WebServices.GetLeaderBoardStats(SelectedTradeType, "New", ShowTestData);
                            break;
                    }
                }
                else
                {
                    leaderboardStats = WebServices.GetLeaderBoardStats(currentUser.Email);
                    quotes = webServices.GetSummaries("New", currentUser.Email);
                }

                updateStatus = quotes.Count().ToString("N0");
                StatusContainerClass = "container-action-buttons-show";

                TradesList.Clear();
                TradesList.Add(new ListItem() { Text = "All", Value = "All" });
                foreach (var trade in leaderboardStats.Trades)
                {
                    TradesList.Add(new ListItem() { Text = _utils.TitleCaseString(trade), Value = _utils.TitleCaseString(trade) });
                }

                currentQuoteIndex = quotes.Count() + 1;
                foreach (var quote in quotes)
                {
                    currentQuoteIndex--;
                    quote.rowIndex = currentQuoteIndex;
                }

                InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            }), null, 1000, 1000);

            LoadingPanelVisible = false;
        }
        catch(Exception ex)
        {
            var errMsg = ex.Message;
        }
    }

    private async Task<bool> IsUserEnabled()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var name = user.Identity.Name;

        if (name != null && name != "")
            currentUser = await UserManager.FindByNameAsync(name);

        return currentUser.IsEnabled;
    }

    #endregion
}