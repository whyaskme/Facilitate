@page "/quotes/upload"

@using DevExpress.Blazor;
@using DevExpress.Data
@using DevExpress.Data.Linq
@using DevExpress.Web;

@using MongoDB.Bson;

@using Json.Net;

@using Facilitate.Admin.Data;
@using Facilitate.Libraries.Models;

@using Microsoft.AspNetCore.Html;
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Mvc.Rendering;
@using Microsoft.AspNetCore.WebUtilities;

@attribute [StreamRendering(true)]
@rendermode InteractiveServer

@inject NavigationManager NavigationManager

<PageTitle>Upload</PageTitle>

<h1>Upload</h1>

@* <DxUpload UploadMode=UploadMode.OnButtonClick
          SelectedFilesChanged="@SelectedFilesChanged"
          AllowMultiFileUpload="true"
          @ref="MyUpload">
</DxUpload> *@

<DxUpload @ref="MyUpload" 
    Name="MyUpload"
    UploadMode=UploadMode.OnButtonClick
    AllowMultiFileUpload="true"
    UploadUrl="@GetUploadUrl("https://localhost:7235/api/fileservices")"
    FileUploadError="@OnUploadError"
    FileUploadStarted="@OnFileUploadStarted"
    SelectedFilesChanged="@SelectedFilesChanged"
    MaxFileSize="@MaxFileSize"
    AllowedFileExtensions="@allowedFileExtensions"
    AcceptedFileTypes="@acceptableFileTypes"
    CssClass="@(SelectedFilesCount > 0 ? "w-100" : "add-item-button")">
</DxUpload>

<DxButton Text="Save Uploads" Click=OnButtonClick />

@code {

    public void processUpload()
    {
        var tmpVal = "";
    }

    public List<string> allowedFileExtensions = new List<string> { ".jpeg", ".jpg", ".gif", ".mpg", ".mp4" };
    public List<string> acceptableFileTypes = new List<string> { "audio/*", "doc/*", "image/*", "video/*" };

    public UploadHttpRequestInfo RequestInfo { get; }

    public int MaxFileSize = 15000000;

    bool ErrorVisible { get; set; } = false;
    string MyError { get; set; }

    void OnUploadError(FileUploadErrorEventArgs e)
    {
        MyError = e.RequestInfo.ResponseText;
        ErrorVisible = true;
        InvokeAsync(StateHasChanged);
    }

    void OnFileUploadStarted(FileUploadEventArgs e) 
    {
        var MyMessage = "Upload of the " + e.FileInfo.Name + " file was started.";

        InvokeAsync(StateHasChanged);
    }

    int SelectedFilesCount { get; set; }

    bool UploadVisible { get; set; } = false;

    IEnumerable<UploadFileInfo> Files { get; set; }

    UploadFileInfo FirstFile { get; set; }
    DxUpload MyUpload { get; set; }

    protected void SelectedFilesChanged(IEnumerable<UploadFileInfo> files)
    {
        Files = files;
        UploadVisible = files.ToList().Count > 0;

        InvokeAsync(StateHasChanged);
    }

    void OnButtonClick()
    {
        try
        {
            foreach(var file in Files)
            {
                MyUpload.UploadFile(file);
            }
        }
        catch(Exception ex)
        {
            var errMsg = ex.Message;
        }
    }

    protected string GetUploadUrl(string url)
    {
        var tmpVal = NavigationManager.ToAbsoluteUri(url).AbsoluteUri;

        //tmpVal = "/quotes/upload/";

        return tmpVal;
    }
}
