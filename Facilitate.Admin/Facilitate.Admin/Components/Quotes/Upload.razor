@page "/quotes/upload"

@using DevExpress.Blazor
@using Facilitate.Admin.Components.Upload

@inject NavigationManager NavigationManager
@inject FileUrlStorageService _fileUrlStorageService

<h1>Upload</h1>

<DxUpload UploadUrl="@GetUploadUrl(@uploadUrl)"
          UploadMode="UploadMode.Instant"
          Name="ImageUpload"
          Id="ImageUpload"
          SelectButtonText="Select Files"
          AllowMultiFileUpload="true"
          AllowCancel="true"
          AllowPause="true"
          ChunkSize="@chunkSize"
          ShowFileList="true"
          AllowedFileExtensions="@allowedFileExtensions"
          AcceptedFileTypes="@acceptableFileTypes"
          FileUploadError="@OnFileUploadError"
          MaxFileSize="@MaxFileSize">
</DxUpload>

@code {

    public class FileUploadEventArgs : EventArgs;

    public string uploadUrl = "/api/Upload/UploadFile";
    //public string uploadUrl = "http://localhost:51916/api/fileservices/UploadFile";

    public int MaxFileSize = 1000000000; // 1000MB
    public int chunkSize = 20000;

    public List<string> allowedFileExtensions = new List<string> { ".jpeg", ".jpg", ".gif", ".mpg", ".mpeg", ".mp4" };
    public List<string> acceptableFileTypes = new List<string> { "audio/*", "doc/*", "image/*", "video/*" };

    public Upload()
    {
    }

    bool ErrorVisible { get; set; } = false;
    string MyError { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var tmpVal = "";
    }

    protected string GetUploadUrl(string url)
    {
        return NavigationManager.ToAbsoluteUri(url).AbsoluteUri;
    }

    void OnFileReloaded()
    {
        var tmpVal = "";
    }

    void OnFileUploadAborted()
    {
        var tmpVal = "";
    }

    void OnFileUploadPaused()
    {
        var tmpVal = "";
    }

    void OnFileUploadProgressChanged()
    {
        var tmpVal = "";
    }

    void OnFileUploadStart()
    {
        var tmpVal = "";
    }

    void SelectedFilesChanged(IEnumerable<UploadFileInfo> files)
    {
        InvokeAsync(StateHasChanged);

        foreach (UploadFileInfo file in files)
        {
            var fileGuid = file.Guid;
            var IsFileExtensionValid = allowedFileExtensions.Contains(file.Type);
            var fileIsMaxSizeValid = file.Size < MaxFileSize;
            var fileIsMinSizeValid = file.Size > 0;
            var fileLastModified = file.LastModified;
            var fileLoadedBtyes = file.LoadedBytes;
            var fileName = file.Name;
            var fileSize = file.Size;
            var fileType = file.Type;
        }
    }

    protected void OnFileUploaded()
    {
        // var fileUrl = _fileUrlStorageService.Get(Guid.Parse(args.FileInfo.Guid));
    }

    void OnFileUploadError(FileUploadErrorEventArgs e)
    {
        MyError = e.RequestInfo.ResponseText;
        ErrorVisible = true;
        InvokeAsync(StateHasChanged);
    }

    void OnFileUploadStarted()
    {
        // var MyMessage = "Upload of the " + e.FileInfo.Name + " file was started.";

        InvokeAsync(StateHasChanged);
    }

    async Task OnEditModelSaving(GridEditModelSavingEventArgs e)
    {
    }

    async Task OnDataItemDeleting(GridDataItemDeletingEventArgs e)
    {
    }
}
