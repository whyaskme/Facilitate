@page "/quotes/warranties"

@using Facilitate.Admin.Data;
@using Facilitate.Libraries.Models;

@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore
@using Microsoft.AspNetCore.WebUtilities

@using MongoDB.Bson;

@using System.Text.Json;

@using DevExpress.Blazor;
@using DevExpress.Data;
@using DevExpress.Data.Linq;

@attribute [StreamRendering(true)]
@rendermode InteractiveServer
@inject WebServices WebServices

@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory
@inject HttpClient httpClient

@inject NavigationManager navMan

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject RoleManager<IdentityRole> roleManager

<PageTitle>Warranties</PageTitle>

<div class="quotes-leaderboard">
    <span class="summary-item">
        <span class="stat-count"><b>@leaderboardStats.TotalQuoteCount.ToString("N0") Quotes</b></span>
        <span class="stat-count">@leaderboardStats.TotalQuoteValue.ToString("C0")</span>
        <span class="stat-count"><span class="value-sqft-separator">&raquo;</span>@leaderboardStats.TotalQuoteSqFt.ToString("N0")sqft</span>
    </span>
    <span class="summary-item">
        <a href="/quotes/leads">Leads</a>
        <span class="stat-count"><b>@leaderboardStats.LeadCount.ToString("N0")</b></span>
        <span class="stat-count">@leaderboardStats.LeadValue.ToString("C0")</span>
    </span>
    <span class="summary-item">
        <a href="/quotes/opportunities">Opportunities</a>
        <span class="stat-count"><b>@leaderboardStats.OpportunityCount.ToString("N0")</b></span>
        <span class="stat-count">@leaderboardStats.OpportunityValue.ToString("C0")</span>
    </span>
    <span class="summary-item">
        <a href="/quotes/customers">Customers</a>
        <span class="stat-count"><b>@leaderboardStats.CustomerCount.ToString("N0")</b></span>
        <span class="stat-count">@leaderboardStats.CustomerValue.ToString("C0")</span>
    </span>
    <span class="summary-item">
        <a href="/quotes/completed">Completions</a>
        <span class="stat-count"><b>@leaderboardStats.CompletionCount.ToString("N0")</b></span>
        <span class="stat-count">@leaderboardStats.CompletionValue.ToString("C0")</span>
    </span>
    <span class="summary-item">
        <a href="/quotes/archives">Archives</a>
        <span class="stat-count"><b>@leaderboardStats.ArchiveCount.ToString("N0")</b></span>
        <span class="stat-count">@leaderboardStats.ArchiveValue.ToString("C0")</span>
    </span>
    <span class="summary-item">
        <a href="/quotes/warranties">Warranties</a>
        <span class="stat-count"><b>@leaderboardStats.WarrantyCount.ToString("N0")</b></span>
        <span class="stat-count">@leaderboardStats.WarrantyValue.ToString("C0")</span>
    </span>
</div>

<h1>
    @updateStatus Warranties
    <span id="update-status" class="@StatusClass">@RefreshStatus</span>
    <span class="stats-container-header">
        <span class="">@leaderboardStats.WarrantyValue.ToString("C0")</span>
        <span class=""><span class="value-sqft-separator">&raquo;</span>@leaderboardStats.WarrantySqFt.ToString("N0")sqft</span>
    </span>
</h1>

<script>
    window.getIpAddress = () => {
        return fetch('https://jsonip.com/')
            .then((response) => response.json())
            .then((data) => {
                return data.ip
            })
    }
</script>

<AuthorizeView>
    <Authorized></Authorized>
    <NotAuthorized>@{
            navMan.NavigateTo("/Account/Login");
        }</NotAuthorized>
</AuthorizeView>

@if (quotes == null)
{
    @*     <p><em>Loading...</em></p> *@
}
else
{
    <div>
        Select row to expand details. Click column headers to sort. Type and hit enter in any empty cell to search that column.
        <br /><br />
        If you have grouped columns below, drag and drop the column back into the grid header to restore.
        <br /><br />
    </div>

    <DxGrid @ref="QuoteGrid"
            Data="@quotes"
            KeyFieldName="_id"
            PageSize="10"
            PagerPosition="GridPagerPosition.Bottom"
            ShowGroupPanel="true"
            AutoExpandAllGroupRows="true"
            ShowFilterRow="true"
            CssClass="mw-1100"
            RowClick="OnRowClick"
            AllowSelectRowByClick="true"
            SelectionMode="GridSelectionMode.Single"
            @bind-SelectedDataItem="@SelectedQuoteItem"
            TextWrapEnabled="true"
            PagerNavigationMode="PagerNavigationMode.InputBox"
            PageSizeSelectorVisible="true"
            PageSizeSelectorAllRowsItemVisible="false"
            KeyboardNavigationEnabled="true">
        <Columns>
            <DxGridDataColumn Caption="Created" FieldName="timestamp" DisplayFormat="MM/dd/yyyy hh:mm tt" SortIndex="0" SortOrder="GridColumnSortOrder.Descending" AllowSort="true" />
            <DxGridDataColumn Caption="Updated" FieldName="lastUpdated" DisplayFormat="MM/dd/yyyy hh:mm tt" />
            <DxGridDataColumn Caption="First" FieldName="firstName" />
            <DxGridDataColumn Caption="Last" FieldName="lastName" />
            <DxGridDataColumn Caption="Street" FieldName="street" />
            <DxGridDataColumn Caption="City" FieldName="city" />
            <DxGridDataColumn Caption="State" FieldName="state" />
            <DxGridDataColumn Caption="Zip" FieldName="zip" />
            <DxGridDataColumn Width="50" Caption="Roofs" FieldName="numberOfIncludedStructures" />
            <DxGridDataColumn Width="75" Caption="SqFt" FieldName="totalSquareFeet" />
            <DxGridDataColumn Width="100" Caption="Quote" DisplayFormat="C0" FieldName="totalQuote" />
            <DxGridDataColumn Caption="Manager" TextAlignment="GridTextAlignment.Left" FieldName="projectManager.Email" />
        </Columns>

        <DetailRowTemplate>
            @{
                var _quote = (Quote)context.DataItem;

                var _emailTabLabel = "Email " + @_quote.firstName + " Documents";

                roofsCount = _quote.structures.Count;
                if (roofsCount <= 1)
                    roofsCountLabel = roofsCount.ToString() + " Roof Project";
                else
                    roofsCountLabel = roofsCount.ToString() + " Roof Projects";

                productsCount = _quote.products.Count;
                if (productsCount <= 1)
                    productsCountLabel = productsCount.ToString() + " Product Quoted";
                else
                    productsCountLabel = productsCount.ToString() + " Products Quoted";

                attachmentsCount = _quote.attachments.Count;
                notesCount = _quote.notes.Count;
                eventsCount = _quote.events.Count;

                <div class="row make-warranty-claim-button">
                    <div class="col">
                        <button class="@WarrantyButtonClass" @onclick="@(() => IsPopupVisibleCloseWarrantyClaim = true)">Close Warranty Claim</button>
                    </div>
                </div>

                <h6>Homeowner</h6>
                <div class="row">
                    <div class="col">
                        <label>Name</label>
                        <span>@_quote.firstName @_quote.lastName</span>
                    </div>
                    <div class="col">
                        <label>Email</label>
                        <a href="mailto:@_quote.email">
                            <span>@_quote.email</span>
                        </a>
                    </div>
                    <div class="col">
                        <label>Phone</label>
                        <span>@_quote.phone</span>
                    </div>
                </div>

                <div class="row">
                    <div class="col">
                        <label>Address</label>
                        <a href="https://www.google.com/maps/search/@_quote.street @_quote.city, @_quote.state @_quote.zip" target="_blank">
                            @_quote.street @_quote.city, @_quote.state @_quote.zip
                        </a>
                    </div>
                    <div class="col">
                        <label>IP</label>
                        <a href="https://whatismyipaddress.com/ip/@SubmissionUserIP" target="_blank">
                            <span>Location</span>
                        </a>
                    </div>
                    <div class="col"></div>
                </div>

                <div class="table-spacer" />

                if (@_quote.projectManager != null)
                {
                    <h6>Project Details</h6>
                    <div class="row">
                        <div class="col">
                            <a class="hyperlink-manager-assignment" @onclick="@(() => IsAssignPopupVisible = true)">Manager Assignment</a>
                            <span class="detail-item">@_quote.projectManager.FirstName</span>
                        </div>
                        <div class="col">
                            <label>Phone</label>
                            <span class="detail-item">@_quote.projectManager.Phone</span>
                        </div>
                        <div class="col">
                            <label>Email</label>
                            <a href="mailto:@_quote.projectManager.Email" target="_blank">
                                <span class="detail-item">@_quote.projectManager.Email</span>
                            </a>
                        </div>
                        <div class="col">
                            <label>Market</label>
                            <a href="https://www.google.com/maps/search/@_quote.projectManager.City, @_quote.projectManager.State @_quote.projectManager.Zip" target="_blank">
                                @_quote.projectManager.City, @_quote.projectManager.State
                            </a>
                        </div>
                    </div>

                    <br />
                }

                <DxTabs Id="tabs-Project-Details" CssClass="tabs-container">

                    <DxTabPage Id="Panel-Project-Manager" CssClass="tab-container" Text="@roofsCountLabel">

                        <div class="container">

                            <div class="row item-details-container">
                                <div class="col">
                                    <label>Total Quote</label>
                                    <span><b>@_quote.totalQuote.ToString("C0")</b></span>
                                </div>
                                <div class="col">
                                    <label>Total Sqft</label>
                                    <span><b>@_quote.totalSquareFeet.ToString("N0")</b></span>
                                </div>
                                <div class="col">
                                    <label>Included Roofs</label>
                                    <span><b>@_quote.numberOfIncludedStructures.ToString("N0")</b></span>
                                </div>
                                <div class="col">
                                </div>
                            </div>

                            <div class="row">
                                @{
                                    currentItemIndex = 0;

                                    for (var i = 0; i < @_quote.structures.Count; i++)
                                    {
                                        currentItemIndex = i + 1;

                                        <b>Roof #@currentItemIndex</b>
                                        <div class="row item-details-container">
                                            <div class="col">
                                                <label>Name</label>
                                                <span>@_quote.structures[i].name</span>
                                            </div>
                                            <div class="col">
                                                <label>SqFt</label>
                                                <span>@_quote.structures[i].squareFeet.ToString("N0")</span>
                                            </div>
                                            <div class="col">
                                                <label>Complexity</label>
                                                <span>@_quote.structures[i].roofComplexity</span>
                                            </div>
                                            <div class="col">
                                                <label>Slope</label>
                                                <span>@_quote.structures[i].slope</span>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </DxTabPage>

                    <DxTabPage Id="Panel-Products" Text="@productsCountLabel">

                        <div class="container">
                            @{
                                for (var i = 0; i < @_quote.products.Count; i++)
                                {
                                    currentItemIndex = i + 1;

                                    var priceLabel = @_quote.products[i].priceInfo.priceType;
                                    if (priceLabel == "BasicFinancing")
                                        priceLabel = "Basic";
                                    else
                                        priceLabel = @_quote.products[i].priceInfo.priceType;

                                    <b>Product #@currentItemIndex</b>

                                    <div class="item-details-container">

                                        <div class="row">
                                            <div class="col">
                                                <label>Name</label>
                                                <span>@_quote.products[i].name</span>
                                            </div>
                                            <div class="col">
                                                <label>Waste Factor</label>
                                                <span>@_quote.products[i].wasteFactorMainRoof</span>
                                            </div>
                                            <div class="col">
                                                <label>Price Type</label>
                                                <span>@priceLabel</span>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col">
                                                <label>Total Quote</label>
                                                <span>@_quote.products[i].priceInfo.total.ToString("C0")</span>
                                            </div>
                                            <div class="col">
                                                <label>Per Square</label>
                                                <span>@_quote.products[i].priceInfo.pricePerSquare.ToString("C0")</span>
                                            </div>
                                            <div class="col">
                                                <label>Monthly</label>
                                                <span>@_quote.products[i].priceInfo.monthly.ToString("C0")</span>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col">
                                                <label>APR</label>
                                                <span>@_quote.products[i].priceInfo.apr%</span>
                                            </div>
                                            <div class="col">
                                                <label>Months</label>
                                                <span>@_quote.products[i].priceInfo.months</span>
                                            </div>
                                            <div class="col">
                                            </div>
                                        </div>

                                    </div>
                                }
                            }
                        </div>

                    </DxTabPage>

                    <DxTabPage Id="Panel-Send-Files" Text="@_emailTabLabel">
                        <DxUpload Name="fileUpload1"
                                  SelectButtonText="Upload"
                                  AllowMultiFileUpload="true"
                                  UploadUrl="@GetUploadUrl("api/Upload/Upload/")"
                                  SelectedFilesChanged="@SelectedFilesChanged"
                                  MaxFileSize="15000000"
                                  AllowedFileExtensions="@(new List<string> { ".jpg", ".jpeg", ".gif", ".png", ".mpg", ".mp4" })"
                                  AcceptedFileTypes="@(new List<string> {  "image/*", "video/*"})"
                                  CssClass="@(SelectedFilesCount > 0 ? "w-100" : "add-item-button")">
                        </DxUpload>
                        <button class="btn btn-primary doc-select-button" disabled="@SendDocsDisabled" @onclick="@EmailFiles">Send Docs</button>
                    </DxTabPage>

                    <DxTabPage Id="Panel-Attach-Files" Text="Attachments">
                        <DxUpload Name="fileUpload2"
                                  SelectButtonText="Upload"
                                  AllowMultiFileUpload="true"
                                  UploadUrl="@GetUploadUrl("api/Upload/Upload/")"
                                  SelectedFilesChanged="@SelectedFilesChanged"
                                  MaxFileSize="15000000"
                                  AllowedFileExtensions="@(new List<string> { ".jpg", ".jpeg", ".gif", ".png", ".mpg", ".mp4" })"
                                  AcceptedFileTypes="@(new List<string> {  "image/*", "video/*"})"
                                  CssClass="@(SelectedFilesCount > 0 ? "w-100" : "add-item-button")">
                        </DxUpload>

                        @foreach (Attachment attachment in _quote.attachments)
                        {
                            if (!attachment.IsDeleted)
                            {
                                <div class="note-row">
                                    <div>
                                        <label>@attachmentsCount) @attachment.Date</label>
                                    </div>

                                    <span class="hyperlink-warning" @onclick="() => SelectAttachmentToDelete(_quote, attachment)">Delete</span>

                                    <span class="bar-spacer">|</span>
                                    <a href="@attachment.MediaUrl" target="_blank">
                                        <span>@attachment.MediaDescription</span>
                                    </a>
                                    <span class="bar-spacer">|</span>
                                    <label>File Type</label>
                                    <span>@FileType</span>
                                    <span class="bar-spacer">|</span>
                                    <label>Author</label>
                                    <span>@Author</span>
                                </div>

                                attachmentsCount--;
                            }
                        }
                    </DxTabPage>

                    <DxTabPage Id="Panel-Notes" Text="Notes">
                        <button class="btn btn-primary doc-select-button add-item-button" @onclick="@(() => IsPopupVisibleAddNote = true)">Add Note</button>
                        @foreach (Note note in _quote.notes)
                        {
                            if (!note.IsDeleted)
                            {
                                <div class="note-row">
                                    <div>
                                        <label>@notesCount) @note.Date</label>
                                    </div>

                                    <span class="hyperlink-warning" @onclick="() => SelectNoteToDelete(_quote, note)">Delete</span>

                                    <span class="bar-spacer">|</span>
                                    <span>@note.Details</span>

                                    <span class="bar-spacer">|</span>
                                    <label>Author</label>
                                    <span>@Author</span>
                                </div>

                                notesCount--;
                            }
                        }
                    </DxTabPage>

                    <DxTabPage Id="Panel-History" Text="History">
                        @foreach (Event _event in _quote.events)
                        {
                            <div class="note-row">
                                <div class="">
                                    <label>@eventsCount) @_event.DateTime</label>
                                </div>

                                <span class="bar-spacer">|</span>
                                <span>@_event.Details</span>

                                <span class="bar-spacer">|</span>
                                <label>Author</label>
                                <span>@Author</span>
                            </div>

                            eventsCount--;
                        }
                    </DxTabPage>

                    <DxTabPage Id="Panel-Origination" Text="Origination">
                        <table id="table-origin" class="table-detail">
                            <tbody>

                                <tr>
                                    <td>
                                        <label>Market</label>
                                        <span>@_quote.market</span>
                                    </td>
                                    <td>
                                        <label>Rep Name</label>
                                        <span>@_quote.repName</span>
                                    </td>
                                    <td>
                                        <label>Rep Email</label>
                                        <a href="mailto:@_quote.repEmail">
                                            <span>@_quote.repEmail</span>
                                        </a>
                                    </td>
                                </tr>

                                <tr>
                                    <td>
                                        <label>RecId</label>
                                        <span>@_quote._id</span>
                                    </td>
                                    <td>
                                        <label>Referrer</label>
                                        <a href="@_quote.externalUrl" target="_blank">
                                            <span>@_quote.externalUrl</span>
                                        </a>
                                    </td>
                                    <td>
                                        <label>Session</label>
                                        <span>@_quote.sessionId</span>
                                    </td>
                                </tr>

                                <tr>
                                    <td>
                                        <label>RefId</label>
                                        <span>@_quote.leadId</span>
                                    </td>
                                    <td>
                                        <label>Created</label>
                                        <span>@_quote.timestamp</span>
                                    </td>
                                    <td>
                                    </td>

                                </tr>
                            </tbody>
                        </table>
                    </DxTabPage>

                </DxTabs>

                <br />

                <h6>Customer Qualifications</h6>
                <br />
                <DxTabs Id="tabs-Customer-Qualifications" CssClass="tabs-container">

                    <DxTabPage Id="Panel-Customer-Qualifications-Mission-Statement-Acknowledgment" CssClass="tab-container" Text="1) Mission Statement Acknowledgment">
                        Mission Statement Acknowledgment...
                    </DxTabPage>

                    <DxTabPage Enabled="false" Id="Panel-Customer-Qualifications-Needs-Analysis" Text="2) Needs Analysis">
                        Needs Analysis...
                    </DxTabPage>

                    <DxTabPage Enabled="false" Id="Panel-Customer-Qualifications-Project-Manager-Inspection-Report" Text="3) Project Manager Inspection Report">
                        Project Manager Inspection Report...
                    </DxTabPage>

                    <DxTabPage Enabled="false" Id="Panel-Customer-Qualifications-Pictometry-Measurements" Text="4) Pictometry Measurements">
                        Pictometry Measurements...
                    </DxTabPage>

                    <DxTabPage Enabled="false" Id="Panel-Customer-Qualifications-Installer-Inspection-Report" Text="5) Installer Inspection Report">
                        Installer Inspection Report...
                    </DxTabPage>

                    <DxTabPage Enabled="false" Id="Panel-Customer-Qualifications-Material-Order" Text="6) Material Order">
                        Material Order...
                    </DxTabPage>

                    <DxTabPage Enabled="false" Id="Panel-Customer-Qualifications-Labor-Order" Text="7) Labor Order">
                        Labor Order...
                    </DxTabPage>

                    <DxTabPage Enabled="false" Id="Panel-Customer-Qualifications-Total-Project-Expense-Summary" Text="8) Total Project Expense Summary">
                        Total Project Expense Summary...
                    </DxTabPage>

                    <DxTabPage Enabled="false" Id="Panel-Customer-Qualifications-Facilitate-Sample-Warranty" Text="9) Facilitate Sample Warranty">
                        Facilitate Sample Warranty...
                    </DxTabPage>

                    <DxTabPage Enabled="false" Id="Panel-Customer-Qualifications-Signed-Proposal" Text="10) Signed Proposal">
                        Signed Proposal...
                    </DxTabPage>

                </DxTabs>

                if (@_quote.warranties.Count > 0)
                {
                    var claimsInitialized = false;

                    <br />

                    <h6>Warranty Info</h6>
                    <br />
                    <DxTabs Id="tabs-Warranty-Info" CssClass="tabs-container">

                        @{
                            var claimCount = 0;
                            var claimLabel = "";

                            foreach (Warranty warranty in @_quote.warranties)
                            {
                                switch(warranty.Type)
                                {
                                    case "Assertion":
                                        <DxTabPage Id="Panel-Warranty-Assertion" CssClass="tab-container" Text="Coverage Statement">
                                            <div class="row">
                                                <div class="col">
                                                    <label>Date</label>
                                                    <span>@warranty.DateCreated</span>
                                                </div>
                                                <div class="col">
                                                    <label>Summary</label>
                                                    <span>@warranty.Summary</span>
                                                </div>
                                                <div class="col">
                                                    <label>Details</label>
                                                    <span>@warranty.Details</span>
                                                </div>
                                            </div>
                                        </DxTabPage>
                                        break;
                                    case "Claim":
                                        claimCount++;
                                        claimLabel = "Claim " + claimCount;

                                        <DxTabPage Id="Panel-Warranty-Claim" CssClass="tab-container" Text="@claimLabel">
                                                <div class="row">
                                                    <div class="col">
                                                        <label>Claim Date</label>
                                                        <span>@warranty.DateCreated</span>
                                                    </div>
                                                    <div class="col">
                                                        <label>Summary</label>
                                                        <span>@warranty.Summary</span>
                                                    </div>
                                                    <div class="col">
                                                        <label>Claim Reason</label>
                                                        <span>@warranty.Details</span>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col">
                                                        <label>Completed?</label>
                                                        <span>@warranty.isCompleted</span>
                                                    </div>
                                                    <div class="col">
                                                        <label>Date Completed</label>
                                                        <span>@warranty.DateCompleted</span>
                                                    </div>
                                                    <div class="col">
                                                        <label>Completion Notes</label>
                                                        <span>@warranty.CompletionDetails</span>
                                                    </div>
                                                </div>
                                            </DxTabPage>
                                        break;
                                }
                            }
                        }

                    </DxTabs>

                    <br />
                }
            }
        </DetailRowTemplate>

    </DxGrid>
}

<DxPopup @bind-Visible="@IsAssignPopupVisible"
         ShowFooter="true"
         HeaderText="Please select a Project Manager for assignment">
    <BodyContentTemplate>
        <DxListBox Data="@ProjectManagers"
                   @bind-Values="@Values"
                   SelectedItemsChanged="@((IEnumerable<ApplicationUser> values) => SelectedProjectManagerChanged(values))"
                   SelectionMode="ListBoxSelectionMode.Single"
                   ShowCheckboxes="true">
            <Columns>
                <DxListEditorColumn FieldName="LastName" Caption="Last" />
                <DxListEditorColumn FieldName="FirstName" Caption="First" />
                <DxListEditorColumn FieldName="Email" Caption="Email" />
                <DxListEditorColumn FieldName="Id" Visible="false" Caption="Id" />
            </Columns>
        </DxListBox>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" Enabled="@IsAssignButtonEnabled" RenderStyle="ButtonRenderStyle.Primary" Text="Save" Click="AssignLead" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsAssignPopupVisible = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleSelectAttachmentToDelete" ShowFooter="true" HeaderText="Delete File">
    <BodyContentTemplate>
        Are you sure you want to delete "@selectedAttachment.MediaDescription"?
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="Delete" Click="DeleteSelectedAttachment" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsPopupVisibleSelectAttachmentToDelete = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleSelectNoteToDelete" ShowFooter="true" HeaderText="Delete Note">
    <BodyContentTemplate>
        Are you sure you want to delete "@selectedNote.Details"?
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="Delete" Click="DeleteSelectedNote" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsPopupVisibleSelectNoteToDelete = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleCloseWarrantyClaim" ShowFooter="true" HeaderText="Close Warranty Claim?">
    <BodyContentTemplate>
        <p>Has this Warranty Claim been completed?</p>
        <DxMemo @bind-Text="@NoteDetails" InputId="archive-reason" CssClass="cw-320" />
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="Save" Click="CloseWarrantyClaim" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsPopupVisibleCloseWarrantyClaim = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleAddNote" ShowFooter="true" HeaderText="Add Note">
    <BodyContentTemplate>
        <p>Please type in your notes below.</p>
        <DxMemo @bind-Text="@NoteDetails" InputId="archive-reason" CssClass="cw-320" />
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton SubmitFormOnClick="true" CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="Save" Click="AddNote" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsPopupVisibleAddNote = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsArchivePopupVisible" ShowFooter="true" HeaderText="Please type in a reason for Archival below">
    <BodyContentTemplate>
        <DxMemo @bind-Text="@NoteDetails" InputId="archive-reason" CssClass="cw-320" />
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton SubmitFormOnClick="true" CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="Archive" Click="ArchiveLead" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => IsArchivePopupVisible = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleHelpSendFiles" ShowFooter="true" HeaderText="Send Documents Help?">
    <BodyContentTemplate>
        <p>Send Documents details...</p>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Close" Click="@(() => IsPopupVisibleHelpSendFiles = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleHelpFileAttachments" ShowFooter="true" HeaderText="File Attachments Help?">
    <BodyContentTemplate>
        <p>File Attachments details...</p>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Close" Click="@(() => IsPopupVisibleHelpFileAttachments = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@IsPopupVisibleHelpFileNotes" ShowFooter="true" HeaderText="File Notes Help?">
    <BodyContentTemplate>
        <p>File Notes details...</p>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Close" Click="@(() => IsPopupVisibleHelpFileNotes = false)" />
    </FooterContentTemplate>
</DxPopup>

<DxLoadingPanel @bind-Visible=@LoadingPanelVisible
                PositionTarget="body"
                ApplyBackgroundShading="true"
                CssClass="w-100">
</DxLoadingPanel>

<div class="@StatusContainerClass">
    <button class="@ButtonClass" disabled="@RefreshDisabled" @onclick="ToggleRefresh">@ButtonText</button>
</div>


@code {

    public QuoteLeaderboard leaderboardStats;

    protected override void OnInitialized()
    {
        leaderboardStats = WebServices.GetLeaderBoardStats();
    }

    public int currentItemIndex = 0;

    public int noteCount = 0;

    IEnumerable<string> Values { get; set; }

    public int roofsCount = 0;
    public int productsCount = 0;

    public string roofsCountLabel = "";
    public string productsCountLabel = "";

    public Quote selectedQuote { get; set; }
    public Attachment selectedAttachment { get; set; }
    public Note selectedNote { get; set; }

    bool LoadingPanelVisible { get; set; } = true;

    WebServices webServices = new WebServices();

    MemberService memberService = new MemberService();

    public bool IsAssignButtonEnabled = false;
    IEnumerable<ApplicationUser> SelectedProjectManager { get; set; }
    public List<ApplicationUser>? ProjectManagers;

    #region Private Properties

    private List<Quote>? quotes;

    int SelectedFilesCount { get; set; }

    ObjectId SelectedFileId { get; set; }

    IGrid QuoteGrid { get; set; }

    IGrid EventGrid { get; set; }

    EntityInstantFeedbackSource InstantFeedbackSource { get; set; }

    bool isBulkInsert = false;

    string FileType { get; set; } = ".pdf";
    string Author { get; set; } = "unknown";

    string NoteDetails { get; set; } = "";

    #endregion

    #region Public Properties

    [Inject] public IJSRuntime jsRuntime { get; set; }

    public Timer _timer;

    public string ClientIP = "";
    public string selectedQuoteId = "";

    public interface IQueryable : System.Collections.IEnumerable;

    public int currentItem = 0;
    public int selectedIndex = 0;

    public string SubmissionUserIP { get; set; }

    public int itemsToCreate = 10;
    public string updateStatus = "Fetching ";

    public int attachmentsCount = 0;
    public int notesCount = 0;
    public int eventsCount = 0;

    #endregion

    #region Popup properties

    bool IsAssignPopupVisible { get; set; }

    bool IsPopupVisibleAddFile { get; set; }
    bool IsPopupVisibleSelectAttachmentToDelete { get; set; }

    bool IsPopupVisibleAddNote { get; set; }
    bool IsPopupVisibleSelectNoteToDelete { get; set; }

    bool IsPopupVisibleCloseWarrantyClaim { get; set; }
    bool IsArchivePopupVisible { get; set; }

    bool IsPopupVisibleHelpSendFiles { get; set; }
    bool IsPopupVisibleHelpFileAttachments { get; set; }
    bool IsPopupVisibleHelpFileNotes { get; set; }

    #endregion

    #region Parameters

    [Parameter]
    public string DisplayFormat { get; set; }

    [Parameter]
    public List<string> AcceptedFileTypes { get; set; }

    [Parameter]
    public GridDetailRowDisplayMode DetailRowDisplayMode { get; set; }

    [Parameter]
    public string RefreshStatus { get; set; } = "";

    [Parameter]
    public string StatusContainerClass { get; set; } = "container-action-buttons-hide";

    [Parameter]
    public string StatusClass { get; set; } = "message-normal";

    [Parameter]
    public string ButtonText { get; set; } = "Pause Refresh";

    [Parameter]
    public string ButtonClass { get; set; } = "btn btn-outline-primary btn-refresh-active";

    [Parameter]
    public string WarrantyButtonClass { get; set; } = "btn btn-outline-primary btn-warning";

    [Parameter]
    public bool RefreshDisabled { get; set; } = false;

    [Parameter]
    public bool SendDocsDisabled { get; set; } = true;

    [Parameter]
    public bool ArchiveLeadsDisabled { get; set; } = true;

    [Parameter]
    public object SelectedQuoteItem { get; set; }

    [Parameter]
    public object SelectedEventItem { get; set; }

    [Parameter]
    public int VisibleIndex { get; set; }

    [Parameter]
    public bool ClearFilterButtonVisible { get; set; }

    #endregion

    #region Methods

    void SelectedProjectManagerChanged(IEnumerable<ApplicationUser> selectedProjectManager)
    {
        SelectedProjectManager = selectedProjectManager;

        if (SelectedProjectManager.Count() > 0)
            IsAssignButtonEnabled = true;
        else
            IsAssignButtonEnabled = false;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ProjectManagers = SortByLastNameUsingLinq(UserManager.Users.ToList());
            RefreshTimer();
        }
        GetIpAddress();
    }

    public List<ApplicationUser> SortByLastNameUsingLinq(List<ApplicationUser> originalList)
    {
        return originalList.OrderBy(x => x.LastName).ToList();
    }

    void OnRowClick(GridRowClickEventArgs args)
    {
        selectedIndex = args.VisibleIndex;
        selectedQuote = quotes[selectedIndex];

        var selectedDetailExpanded = QuoteGrid.IsDetailRowExpanded(selectedIndex);
        if (selectedDetailExpanded)
        {
            QuoteGrid.CollapseDetailRow(selectedIndex);

            PauseRefresh(false);
        }
        else
        {
            QuoteGrid.CollapseAllDetailRows();
            QuoteGrid.ExpandDetailRow(selectedIndex);

            PauseRefresh(true);
        }
    }

    public async Task<string> GetIpAddress()
    {
        try
        {
            SubmissionUserIP = await jsRuntime.InvokeAsync<string>("getIpAddress").ConfigureAwait(true);

            return SubmissionUserIP;
        }
        catch (Exception e)
        {
            //If your request was blocked by CORS or some extension like uBlock Origin then you will get an exception.
            return string.Empty;
        }
    }

    protected void SelectedFilesChanged(IEnumerable<UploadFileInfo> files)
    {
        SelectedFilesCount = files.ToList().Count;
        InvokeAsync(StateHasChanged);

        SendDocsDisabled = false;
    }

    protected void EmailFiles()
    {
        var tmpVal = "";
    }

    protected string GetUploadUrl(string url)
    {
        var absoluteUri = NavigationManager.ToAbsoluteUri(url).AbsoluteUri;

        return absoluteUri;
    }

    public void AssignLead()
    {
        LoadingPanelVisible = true;

        QuoteGrid.CollapseDetailRow(selectedIndex);

        Event statusChanged = new Event();
        statusChanged.Details = selectedQuote.firstName + " " + selectedQuote.lastName + " converted to Opportunity";
        selectedQuote.events.Add(statusChanged);

        var previousProjectManager = selectedQuote.projectManager;

        selectedQuote.projectManager = SelectedProjectManager.ToList()[0];

        // Assignment event
        var projectManager = selectedQuote.projectManager;
        Event assignmentEvent = new Event();
        assignmentEvent.Name = "Assignment";

        if (previousProjectManager != null)
        {
            // Current PM to replace
            assignmentEvent.Details = "Project Manager Id: " + previousProjectManager.Id + " (" + previousProjectManager.FirstName + " " + previousProjectManager.LastName + "), replaced by Project Manager Id: " + projectManager.Id + " (" + projectManager.FirstName + " " + projectManager.LastName + ") and emailed to: " + projectManager.Email;
        }
        else{
            assignmentEvent.Details = "Lead assigned to Project Manager Id: " + projectManager.Id + " (" + projectManager.FirstName + "), moved to Opportunities and emailed to: " + projectManager.Email;
        }        
        
        selectedQuote.events.Add(assignmentEvent);

        WebServices.UpdateQuote(selectedQuote);

        //LoadingPanelVisible = false;

        IsAssignPopupVisible = false;
        IsAssignButtonEnabled = false;

        PauseRefresh(false);
    }

    public void ArchiveLead()
    {
        selectedQuote.status = "Archive";

        QuoteGrid.CollapseDetailRow(selectedIndex);

        Note note = new Note();
        note.Summary = selectedQuote.firstName + " " + selectedQuote.lastName + " moved to Archives";
        note.Details = @NoteDetails;

        selectedQuote.notes.Add(note);

        Event _event = new Event();
        _event.Details = selectedQuote.firstName + " " + selectedQuote.lastName + " moved to Archives";

        selectedQuote.events.Add(_event);

        WebServices.UpdateQuote(selectedQuote);

        IsArchivePopupVisible = false;
        NoteDetails = "";

        PauseRefresh(false);
    }

    public void AddNote()
    {
        QuoteGrid.CollapseDetailRow(selectedIndex);

        Note note = new Note();
        note.Summary = "Note Added";
        note.Details = @NoteDetails;

        selectedQuote.notes.Add(note);

        Event _event = new Event();
        _event.Details = "Note (" + note.Details + ") added to Quote";

        selectedQuote.events.Add(_event);

        IsPopupVisibleAddNote = false;
        NoteDetails = "";

        WebServices.UpdateQuote(selectedQuote);

        RefreshTimer();
        quotes = webServices.GetQuotes("New");

        QuoteGrid.ExpandDetailRow(selectedIndex);

        PauseRefresh(true);
    }

    public void CloseDetails()
    {
        QuoteGrid.CollapseDetailRow(selectedIndex);

        PauseRefresh(false);
    }

    public void SelectAttachmentToDelete(Quote quote, Attachment attachment)
    {
        selectedQuote = quote;
        selectedAttachment = attachment;

        IsPopupVisibleSelectAttachmentToDelete = true;

        RefreshTimer();
    }

    public void SelectNoteToDelete(Quote quote, Note note)
    {
        selectedQuote = quote;
        selectedNote = note;

        IsPopupVisibleSelectNoteToDelete = true;
    }

    public void DeleteSelectedAttachment()
    {
        selectedAttachment.IsDeleted = true;

        Event _event = new Event();
        _event.Details = "Deleted attachment (" + selectedAttachment.MediaDescription + ") from Quote";

        selectedQuote.events.Add(_event);

        WebServices.UpdateQuote(selectedQuote);

        RefreshTimer();

        IsPopupVisibleSelectAttachmentToDelete = false;

        attachmentsCount--;
    }

    public void DeleteSelectedNote()
    {
        selectedNote.IsDeleted = true;

        Event _event = new Event();
        _event.Details = "Deleted note (" + selectedNote.Details + ") from Quote";

        selectedQuote.events.Add(_event);

        WebServices.UpdateQuote(selectedQuote);

        RefreshTimer();

        IsPopupVisibleSelectNoteToDelete = false;

        notesCount--;
    }

    public void CloseWarrantyClaim()
    {
        selectedQuote.status = "Archive";

        QuoteGrid.CollapseDetailRow(selectedIndex);

        foreach (Warranty warranty in selectedQuote.warranties)
        {
            if (warranty.Type == "Claim")
            {
                warranty.isCompleted = true;
                warranty.DateCompleted = DateTime.UtcNow;
                warranty.CompletionDetails = @NoteDetails;
            }
        }

        var projectManager = selectedQuote.projectManager;

        Note note = new Note();
        note.Summary = "Note Added (Close Warranty Claim)";
        note.Details = @NoteDetails;

        selectedQuote.notes.Add(note);

        Event _event = new Event();
        _event.Details = "Warranty Claim moved back to Archive";

        selectedQuote.events.Add(_event);

        WebServices.UpdateQuote(selectedQuote);

        IsPopupVisibleCloseWarrantyClaim = false;
        NoteDetails = "";

        PauseRefresh(false);
    }

    public virtual void PauseRefresh(bool isPaused)
    {
        RefreshDisabled = isPaused;
        ArchiveLeadsDisabled = isPaused;

        if (isPaused)
        {
            ButtonText = "Resume Refresh";
            ButtonClass = "btn btn-outline-primary btn-refresh-inactive";
            StatusClass = "message-warning";
            RefreshStatus = " Auto refresh paused...";

            _timer?.Dispose();
        }
        else
        {
            ButtonText = "Pause Refresh";
            ButtonClass = "btn btn-outline-primary btn-refresh-active";
            StatusClass = "message";
            RefreshStatus = "";

            RefreshTimer();
        }
    }

    public virtual void ToggleRefresh()
    {
        if (ButtonText == "Pause Refresh")
        {
            PauseRefresh(true);
        }
        else
        {
            PauseRefresh(false);
        }

        RefreshDisabled = false;
    }

    public void Dispose()
    {
        _timer?.Dispose();           // because you need it here
    }

    private void RefreshTimer()
    {
        leaderboardStats = WebServices.GetLeaderBoardStats();

        LoadingPanelVisible = true;

        _timer = new Timer(new TimerCallback(_ =>
        {
            quotes = webServices.GetQuotes("Warranty");
            updateStatus = quotes.Count().ToString("N0");
            StatusContainerClass = "container-action-buttons-show";

            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }), null, 1000, 1000);

        LoadingPanelVisible = false;
    }

    #endregion
}