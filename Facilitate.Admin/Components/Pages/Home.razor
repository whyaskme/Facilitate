@page "/"

@using Facilitate.Admin.Data;
@using Facilitate.Libraries.Models;

@using MongoDB.Bson;
@* @using Json.Net; *@

@using System.Text.Json;

@using DevExpress.Blazor;
@using DevExpress.Data;
@using DevExpress.Data.Linq;

@using Microsoft.AspNetCore.Identity;

@attribute [StreamRendering(true)]

@inject WebServices WebServices

@inject NavigationManager navMan

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject RoleManager<IdentityRole> roleManager

@inject IJSRuntime JSRuntime

@inject AuthenticationStateProvider GetAuthenticationStateAsync

<PageTitle>Welcome to Facilitate Platform Administration</PageTitle>

<div class="row">
    <div class="col-md-auto">
        <img src="/images/backgrounds/Dawn Thumb.jpg" class="homepage-image-main" />
    </div>
</div>

@* <h3>Facilitate Platform Administration</h3> *@

<AuthorizeView>
    <Authorized>
        @{
            //navMan.NavigateTo("/Quotes/Opportunities");
        }
    </Authorized>
    <NotAuthorized>
        @{
            //navMan.NavigateTo("/Account/Login");
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    public ApplicationUser currentUser = new ApplicationUser();
    public bool isSystemAdmin = false;
    public bool isUserAdmin = false;

    public QuoteLeaderboard LeaderboardStats;

    protected override void OnInitialized()
    {
        LeaderboardStats = WebServices.GetLeaderboardStats();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // if (firstRender)
        // {
        //     navMan.NavigateTo("/Quotes/Opportunities");
        // }

        try
        {
            var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
            var loggedInUser = authstate.User;
            var loggedInName = loggedInUser.Identity.Name;

            if (loggedInName != null && loggedInName != "")
                currentUser = await UserManager.FindByNameAsync(loggedInName);

            if (currentUser.IsEnabled)
            {

            }
        }
        catch(Exception ex)
        {
            var error = ex.Message;
        }
    }
}